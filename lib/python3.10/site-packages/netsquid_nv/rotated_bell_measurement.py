import numpy as np
import netsquid.components.instructions as ins
from netsquid.qubits.ketstates import BellIndex
from netsquid_nv.move_circuits import reverse_move_using_CXDirections

r"""Module containing functions for applying a Bell state measurement using
only gates which are available in NV circuits. **Important:** the circuit assumes
that the carbon qubit is rotated by a Hadamard. That is, the state that is measured
is not the usual Bell state but instead a rotated one: if the measurement outcome
is PHI_PLUS then actually the state was :math:`(1 \otimes H) (|00\rangle + |11\rangle) / \sqrt{2}`.
"""

OUTPUT_KEY_MEASUREMENT_A = "nv_bsm_outcome_a"
OUTPUT_KEY_MEASUREMENT_B = "nv_bsm_outcome_b"
_OUTCOME_TO_BELL_INDEX = {(0, 0): BellIndex.PHI_MINUS,
                          (0, 1): BellIndex.PSI_PLUS,
                          (1, 0): BellIndex.PHI_PLUS,
                          (1, 1): BellIndex.PSI_MINUS}


def apply_rotated_bell_state_measurement(qprogram, electron_position, carbon_position, inplace=False):
    """
    Parameters
    ----------
    qprogram: :obj:`~netsquid.components.qprogram.QuantumProgram.run`
    electron_position: int
    carbon_position: int
    inplace: bool
        Whether the measured qubits are discarded (`inplace=False`) or not
        (`inplace=True`).

    Note
    ----
    For a drawing of the circuit, see Fig. 17 (d) in Appendix E of https://arxiv.org/abs/2010.12535.

    """
    qprogram.apply(ins.INSTR_ROT_Z, carbon_position, angle=np.pi / 2)
    qprogram.apply(ins.INSTR_CXDIR, [electron_position, carbon_position], angle=np.pi / 2)
    qprogram.apply(ins.INSTR_ROT_Z, carbon_position, angle=-np.pi / 2)
    qprogram.apply(ins.INSTR_ROT_Y, electron_position, angle=np.pi / 2)
    qprogram.apply(instruction=ins.INSTR_MEASURE,
                   qubit_indices=[electron_position],
                   output_key=OUTPUT_KEY_MEASUREMENT_A,
                   inplace=False)
    qprogram.apply(ins.INSTR_INIT, electron_position)
    reverse_move_using_CXDirections(qprogram=qprogram,
                                    control_position=electron_position,
                                    target_position=carbon_position)
    qprogram.apply(ins.INSTR_H, electron_position)
    qprogram.apply(instruction=ins.INSTR_MEASURE,
                   qubit_indices=[electron_position],
                   output_key=OUTPUT_KEY_MEASUREMENT_B,
                   inplace=False)


def convert_rotated_bell_state_circuit_outcomes_to_bell_index(qprogram):
    """
    Parameters
    ----------
    qprogram: :obj:`~netsquid.components.qprogram.QuantumProgram.run`

    Returns
    -------
    :obj:`~netsquid.qubits.ketstates.BellIndex`

    Notes
    -----
    This functions retrieves the outcomes of the NV Bell-state measurement circuit
    using the output keys OUTPUT_KEY_MEASUREMENT_A and OUTPUT_KEY_MEASUREMENT_B
    and converts these into an index of one of the four Bell states.
    """
    outcome_a = qprogram.output[OUTPUT_KEY_MEASUREMENT_A][0]
    outcome_b = qprogram.output[OUTPUT_KEY_MEASUREMENT_B][0]
    return _OUTCOME_TO_BELL_INDEX[(outcome_a, outcome_b)]
