import numpy as np
import netsquid.components.instructions as ins


def reverse_move_using_CXDirections(qprogram, control_position=0, target_position=1):
    r"""Maps the (rotated) qubit on `target_position` to the qubit on `control_position`
    using only gates that are accesible in NV centers. The used circuit is
    the reverse of the circuit defined in
    :meth:`~netsquid_physlayer.quantum_program_library.move_using_CXDirections`.

    Important
    ---------

    1. if the target qubit is in the state :math:`|x\rangle`, then after this circuit,
       the control position will be in the state :math:`H|x\rangle`, where :math:`H`
       is the Hadamard gate. This method thus implemented a "rotated move";
    2. for the circuit to work, the state of the electron should be
       :math:`|0\rangle`, but initializating the electron to :math:`|0\rangle` is
       **not** included in this circuit.

    Note
    ----
    For a drawing of the circuit, see the circuit named 'RETRIEVE' in Fig. 17
    in Appendix E of https://arxiv.org/abs/2010.12535. However, note that this method
    does not apply the electron initialization which is present at the start in the
    figure in the article.

    Parameters
    ----------
    qprogram: :obj:`~netsquid.components.qprogram.QuantumProgram`
        Quantum program to which the circuit is appended
    control_position: int
        Position of the control qubit
    target_position: int
        Position of the target qubit
    """
    qprogram.apply(ins.INSTR_ROT_Y, control_position, angle=np.pi / 2)
    qprogram.apply(ins.INSTR_CXDIR, [control_position, target_position], angle=-np.pi / 2)
    qprogram.apply(ins.INSTR_ROT_X, control_position, angle=-np.pi / 2)
    qprogram.apply(ins.INSTR_ROT_Z, target_position, angle=-np.pi / 2)
    qprogram.apply(ins.INSTR_CXDIR, [control_position, target_position], angle=-np.pi / 2)
    qprogram.apply(ins.INSTR_ROT_Z, target_position, angle=np.pi / 2)


def move_using_CXDirections(qprogram, control_position=0, target_position=1):
    r"""
    This schedules the correct operations in the provided QuantumProgram, using CXDirection, XRot, YRot and ZRot,
    to perform an effective 'move' operation. Assuming that the target qubit is in the \|0> state
    and the control qubit is in the state \|psi>, after the operation the state of the target
    will be H\|psi>, where H is the Hadamard operation, and the control will be \|0>.
    NOTE, will not perform an initialization of the target qubit before.

    The operations in here are taken from the paper: arXiv:1703.03244

    Parameters
    ----------
    qprogram : :class:`netsquid.components.qprogram.QuantumProgram`
    control_position : int
        The qubit ID of the control qubit
    target_position : int
        The qubit ID of the target qubit
    """
    # Do effective CYDirection
    qprogram.apply(ins.INSTR_ROT_Z, target_position, angle=-np.pi / 2)
    qprogram.apply(ins.INSTR_CXDIR, [control_position, target_position], angle=np.pi / 2)
    qprogram.apply(ins.INSTR_ROT_Z, target_position, angle=np.pi / 2)
    # Do ROTX
    qprogram.apply(ins.INSTR_ROT_X, control_position, angle=np.pi / 2)
    # Do CXDirection
    qprogram.apply(ins.INSTR_CXDIR, [control_position, target_position], angle=np.pi / 2)
    # Do ROTY
    qprogram.apply(ins.INSTR_ROT_Y, control_position, angle=-np.pi / 2)
