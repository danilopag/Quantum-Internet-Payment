"""
Expected near-term parameters; the expectation was expressed in 2019.
"""
import numpy as np
from netsquid_nv.nv_parameter_set import \
    compute_product_tau_decay_delta_w_from_nodephasing_number
from netsquid_nv.delft_nvs.delft_nv_2019 import NVParameterSet2019


class NVParameterSet2019Optimistic(NVParameterSet2019):
    """
    Source: go-no-go proposal Sophie Hermans (dated: 10 Jan 2019).
    """

    photon_emission_delay = 3.5 * 10 ** 3

    dark_count_rate = 1  # [Hz]
    prob_dark_count = \
        1. - np.exp(-1. * NVParameterSet2019.time_window * 10 ** (-9) * dark_count_rate)
    total_detection_eff = 1 * 10 ** (-3)

    zero_phonon_prob_with_cavity = NVParameterSet2019.p_zero_phonon(cavity=True)
    zero_phonon_prob_without_cavity = NVParameterSet2019.p_zero_phonon(cavity=False)
    collection_eff_in_case_no_cavity_no_conversion = \
        (total_detection_eff /
         (NVParameterSet2019.p_photon_not_lost *
          zero_phonon_prob_without_cavity *
          NVParameterSet2019.real_detection_eff))
    collection_eff_with_conversion = collection_eff_in_case_no_cavity_no_conversion * 0.3

    prob_detect_excl_transmission_no_conversion_no_cavities = \
        zero_phonon_prob_without_cavity * \
        collection_eff_in_case_no_cavity_no_conversion * \
        NVParameterSet2019.real_detection_eff

    prob_detect_excl_transmission_with_conversion_with_cavities = \
        zero_phonon_prob_with_cavity * \
        collection_eff_with_conversion *\
        NVParameterSet2019.real_detection_eff

    std_electron_electron_phase_drift = 20. * np.pi / 180.  # [radians]

    p_double_exc = 0.03

    nodephasing_number = 1400
    product_tau_decay_delta_w = \
        compute_product_tau_decay_delta_w_from_nodephasing_number(
            nodephasing_number=1400,
            alpha=0.5)
