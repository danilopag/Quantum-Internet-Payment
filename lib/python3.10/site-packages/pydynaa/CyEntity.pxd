# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# File: CyEntity.pxd
# 
# This file is part of the PyDynAA package.
# It is subject to the NetSquid Software End User License Conditions.
# A copy of these conditions can be found in the LICENSE.md file of this package.
# 
# Authors
# =======
# 
# - Julio de Oliveira Filho
# - Rob Knegjens
# - Coen van Leeuwen
# - Joost Adriaanse
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NOTE: a guard with license and author info is auto added to package distributions (see setup.py)
"""
C++ class declaration for CyEntity.
"""
from cpython.ref cimport PyObject
from libcpp.string cimport string as libcpp_string
from libcpp.memory cimport shared_ptr as libcpp_shared_ptr
from libcpp.memory cimport weak_ptr as libcpp_weak_ptr
from libcpp cimport bool
from libcpp.vector cimport vector

from pydynaa.Event cimport Event as _Event
from pydynaa.Event cimport EventID as _EventID
from pydynaa.Event cimport EventSource
from pydynaa.EventType cimport EventType as _EventType
from pydynaa.Entity cimport Entity as _Entity
from pydynaa.EventHandler cimport EventHandler as _EventHandler
from pydynaa.ExpressionHandler cimport ExpressionHandler as _ExpressionHandler
from pydynaa.EventExpression cimport EventExpression as _EventExpression
from pydynaa.dynaatypes cimport SimTime as _SimTime

cdef extern from "<cyentity.h>" namespace "dynaa":

    cdef cppclass CyEntity(_Entity):
        
        CyEntity() nogil except +
        CyEntity(CyEntity) nogil except +
        CyEntity(PyObject* pyEntity) nogil except +

        PyObject* pyobj() except + with gil

        #libcpp_shared_ptr[_Event] scheduleNow(_EventType & evType) nogil except +
        #libcpp_shared_ptr[_Event] scheduleAfter(_SimTime interval, _EventType & evType) nogil except +
        #libcpp_shared_ptr[_Event] scheduleAt(_SimTime instant, _EventType & evType) nogil except +
        libcpp_shared_ptr[_Event] scheduleNow(const libcpp_shared_ptr[_EventType] & evType) nogil except +
        libcpp_shared_ptr[_Event] scheduleAfter(_SimTime interval, const libcpp_shared_ptr[_EventType] & evType) nogil except +
        libcpp_shared_ptr[_Event] scheduleAt(_SimTime instant, const libcpp_shared_ptr[_EventType] & evType) nogil except +

        # wait()
        void wait(libcpp_shared_ptr[_EventHandler] eventHandler, EventSource entity,
                  _EventType & eventType, _EventID eventID) nogil except +
        void wait(libcpp_shared_ptr[_EventHandler] eventHandler,
                  _EventType & eventType, _EventID eventID) nogil except +
        void wait(libcpp_shared_ptr[_ExpressionHandler] exprHandler,
                  libcpp_shared_ptr[_EventExpression] eventExpr) nogil except +

        # waitOnce()
        void waitOnce(libcpp_shared_ptr[_EventHandler] eventHandler, EventSource entity,
                      _EventType & eventType, _EventID eventID) nogil except +
        void waitOnce(libcpp_shared_ptr[_EventHandler] eventHandler,
                      _EventType & eventType, _EventID eventID) nogil except +
        void waitOnce(libcpp_shared_ptr[_EventHandler] eventHandler, _Event & event) nogil except +
        void waitOnce(libcpp_shared_ptr[_ExpressionHandler] exprHandler,
                      libcpp_shared_ptr[_EventExpression] eventExpr) nogil except +
        
        # dismiss()
        void dismiss(libcpp_shared_ptr[_EventHandler] eventHandler, EventSource entity,
                     _EventType & eventType, _EventID eventID) nogil except +
        void dismiss(libcpp_shared_ptr[_EventHandler] eventHandler,
                     _EventType & eventType, _EventID eventID) nogil except +
        void dismiss(libcpp_shared_ptr[_ExpressionHandler] exprHandler,
                     libcpp_shared_ptr[_EventExpression] eventExpr) nogil except +
        void dismiss(libcpp_shared_ptr[_EventHandler] eventHandler, _Event & event) nogil except +
        void dismiss(libcpp_shared_ptr[_ExpressionHandler] exprHandler) nogil except +


    cdef void add_to_ptr_vector(vector[libcpp_weak_ptr[_Entity]] &ptr_vector, libcpp_shared_ptr[CyEntity]) nogil except +
