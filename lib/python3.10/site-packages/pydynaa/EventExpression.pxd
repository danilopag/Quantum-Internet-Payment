# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# File: EventExpression.pxd
# 
# This file is part of the PyDynAA package.
# It is subject to the NetSquid Software End User License Conditions.
# A copy of these conditions can be found in the LICENSE.md file of this package.
# 
# Authors
# =======
# 
# - Julio de Oliveira Filho
# - Rob Knegjens
# - Coen van Leeuwen
# - Joost Adriaanse
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NOTE: a guard with license and author info is auto added to package distributions (see setup.py)
"""
C++ class declaration for EventExpression
"""
from libcpp.string cimport string as libcpp_string
from libcpp cimport bool
from libcpp.memory cimport shared_ptr
from libcpp.memory cimport unique_ptr

from pydynaa.Event cimport Event as _Event
from pydynaa.Event cimport EventID as _EventID
from pydynaa.Event cimport EventSource as _EventSource
from pydynaa.EventType cimport EventType as _EventType
from pydynaa.Entity cimport Entity as _Entity
from pydynaa.PyObjWrapper cimport PyObjWrapper as _PyObjWrapper

cdef extern from "<eventexpression.h>" namespace "dynaa":

    cdef enum EventExpressionType :
        Atomic, AND, OR

    cdef cppclass EventExpression:

        EventExpression() nogil except +
        EventExpression(_EventSource, _EventType, _EventID ) nogil except +
        EventExpression(EventExpression) nogil except +
        bool value() nogil except +
        unique_ptr[_Event] triggeredEvent() nogil except+
        double triggeredTime() nogil except+
        EventExpressionType type() nogil except+
        shared_ptr[EventExpression] firstTermAsPtr() nogil except+
        shared_ptr[EventExpression] secondTermAsPtr() nogil except+
        void reprime() nogil except+
        bool operator== (EventExpression & second) nogil except +
        bool operator!= (EventExpression & second) nogil except +
        shared_ptr[EventExpression] logicalAnd(const shared_ptr[EventExpression]& second) nogil except +
        shared_ptr[EventExpression] logicalOr(const shared_ptr[EventExpression]& second) nogil except +

        _EventType & atomicEventType() nogil except+
        _EventSource atomicEventSource() nogil except+
        _EventID atomicEventID() nogil except+
