# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# File: core.pxd
# 
# This file is part of the PyDynAA package.
# It is subject to the NetSquid Software End User License Conditions.
# A copy of these conditions can be found in the LICENSE.md file of this package.
# 
# Authors
# =======
# 
# - Julio de Oliveira Filho
# - Rob Knegjens
# - Coen van Leeuwen
# - Joost Adriaanse
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NOTE: a guard with license and author info is auto added to package distributions (see setup.py)
"""
Definition of Cython classes.
"""
from libcpp.memory cimport shared_ptr
from libcpp.memory cimport weak_ptr
from libcpp.vector cimport vector
from libcpp cimport bool
from pydynaa.PointerHolder cimport PointerHolder as _PointerHolder
from pydynaa.Event cimport Event as _Event
from pydynaa.Entity cimport Entity as _Entity
from pydynaa.EventHandler cimport EventHandler as _EventHandler
from pydynaa.ExpressionHandler cimport ExpressionHandler as _ExpressionHandler
from pydynaa.EventType cimport EventType as _EventType
from pydynaa.CyEntity cimport CyEntity as _CyEntity
from pydynaa.SimulationEngine cimport SimulationEngine as _SimulationEngine
from pydynaa.EventExpression cimport EventExpression as _EventExpression


cdef class Event:

    cdef shared_ptr[_Event] __inst
    @staticmethod
    cdef __wrap__(const _Event & event)
    @staticmethod
    cdef __wrap_ptr__(shared_ptr[_Event] event_ptr)
    cdef shared_ptr[_Event] inst(self)

cdef class EventType:

    cdef shared_ptr[_EventType] __inst
    @staticmethod
    cdef __wrap__(const _EventType & event_type) 
    @staticmethod
    cdef __wrap_ptr__(shared_ptr[_EventType] event_type_ptr)
    cdef shared_ptr[_EventType] inst(self)

cdef class Entity:

    cdef shared_ptr[_CyEntity] __inst
    cdef shared_ptr[_CyEntity] inst(self) 
    cpdef _schedule_now(self, EventType event_type)
    cpdef _schedule_after(self, double interval, EventType event_type)
    cpdef _schedule_at(self, double instant, EventType event_type)
    cpdef _wait_once(self, handler, Entity entity=*,
                     EventType event_type=*, Event event=*, long event_id=*,
                     EventExpression expression=*)
    cpdef _wait(self, handler, Entity entity=*,
                EventType event_type=*, Event event=*, long event_id=*,
                bool once=*, EventExpression expression=*)
    cpdef _dismiss(self, handler, Entity entity=*,
                   EventType event_type=*, Event event=*, long event_id=*,
                   EventExpression expression=*)

cdef class EventHandler:

    cdef shared_ptr[_EventHandler] __inst
    cdef shared_ptr[_EventHandler] inst(self)
    @staticmethod
    cdef __add_to_safe_guards__(vector[weak_ptr[_Entity]] vec, Entity entity)

cdef class ExpressionHandler:

    cdef shared_ptr[_ExpressionHandler] __inst
    cdef shared_ptr[_ExpressionHandler] inst(self)

cdef class EventExpression:

    cdef shared_ptr[_EventExpression] __inst    
    cdef shared_ptr[_EventExpression] inst(self)

cdef class SimulationEngine:

    cdef _PointerHolder[_SimulationEngine] __inst
    cdef _PointerHolder[_SimulationEngine] inst(self)
    cdef double get_current_time(self)
    cdef int get_state(self)
    cdef void _run(self, object end_time) except *
    #cdef int _run(self, object end_time) except -1

