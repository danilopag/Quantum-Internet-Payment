/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * 
 * File: pointer_tools.h
 * 
 * This file is part of the PyDynAA package.
 * It is subject to the NetSquid Software End User License Conditions.
 * A copy of these conditions can be found in the LICENSE.md file of this package.
 * 
 * Authors
 * =======
 * 
 * - Julio de Oliveira Filho
 * - Rob Knegjens
 * - Coen van Leeuwen
 * - Joost Adriaanse
 * 
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */
// NOTE: a guard with license and author info is auto added to package distributions (see setup.py)
#ifndef _INCLUDED_POINTER_TOOLS_
#define _INCLUDED_POINTER_TOOLS_
/* This header file is a modified version of 'autowrap_tools.h' from the 
 * autowrap package (https://github.com/uweschmitt/autowrap)
 *
 * Copyright (c) 2012-2014, Uwe Schmitt, ETH Zurich, all rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.  
 * 
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution. 
 * 
 * Neither the name of the mineway GmbH nor the names of its contributors may be
 * used to endorse or promote products derived from this software without specific
 * prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

inline char * _cast_const_away(const char *p) {
    return const_cast<char *>(p);
};

template<class A> void _iadd(A * a1, const A * a2) {
    (*a1) += (*a2);
};

namespace dynaa {

template <class X>
class ReferenceHolder {

    private:

        X& _ref = nullptr;

    public:

        ReferenceHolder(X &ref): _ref(ref) 
        {
        }

        X& get()
        {
            return _ref;
        }

        void assign(const X & refneu)
        {
            _ref = refneu;
        }
};

template <class X>
class PointerHolder {

    private:

        X* _ptr = nullptr;

    public:

        PointerHolder() {}

        PointerHolder(X *ref): _ptr(ref) 
        {
        }

        X* get()
        {
            return _ptr;
        }

        void assign(X * ptr)
        {
            _ptr = ptr;
        }
};

template <class X>
class ConstPointerHolder {

    private:

        const X* _ptr;

    public:

        ConstPointerHolder() {}

        ConstPointerHolder(const X *ref): _ptr(ref) 
        {
        }

        const X* get()
        {
            return _ptr;
        }

        void assign(const X * ptr)
        {
            _ptr = ptr;
        }
};

}
#endif
