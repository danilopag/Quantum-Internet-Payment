# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# File: SimulationEngine.pxd
# 
# This file is part of the PyDynAA package.
# It is subject to the NetSquid Software End User License Conditions.
# A copy of these conditions can be found in the LICENSE.md file of this package.
# 
# Authors
# =======
# 
# - Julio de Oliveira Filho
# - Rob Knegjens
# - Coen van Leeuwen
# - Joost Adriaanse
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NOTE: a guard with license and author info is auto added to package distributions (see setup.py)
"""
C++ class declaration for SimulationEngine
"""
from libcpp.string cimport string as libcpp_string
from libcpp.unordered_map cimport unordered_map
from libcpp cimport bool

from pydynaa.dynaatypes cimport SimTime as _SimTime
from pydynaa.HandlerRegistry cimport HandlerQueryInterface as _HandlerQueryInterface
from pydynaa.EventType cimport EventType as _EventType
from pydynaa.Entity cimport Entity as _Entity
from pydynaa.Event cimport Event as _Event


cdef extern from "<simengine.h>" namespace "dynaa":
   
    cdef enum SimState:
        Idle,
        Running,
        Stopped

    cdef cppclass SimulationEngine:

        SimulationEngine() nogil except +
        SimulationEngine(SimulationEngine) nogil except +

        double getCurrentTime() nogil except +

        void run() except + with gil
        void run(_SimTime endTime) except + with gil

        _HandlerQueryInterface& getHandlerInspector() nogil except +
        #_SchedulerInspectorInterface& getEventInspector() nogil except +  # TODO add

        void stop() except + with gil
        void reset() except + with gil
        void unschedule(_Event event) except +
        _SimTime getState() nogil except +

        unordered_map[libcpp_string, long] getDiagnosticInfo() nogil except +

    ctypedef SimulationEngine DynAASim


cdef extern from "<simengine.h>" namespace "dynaa::SimulationEngine":

    SimulationEngine & getInstance() nogil except +
