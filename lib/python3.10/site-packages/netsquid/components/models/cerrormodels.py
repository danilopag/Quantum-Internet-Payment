# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# File: cerrormodels.py
# 
# This file is part of the NetSquid package (https://netsquid.org).
# It is subject to the NetSquid Software End User License Conditions.
# A copy of these conditions can be found in the LICENSE.md file of this package.
# 
# NetSquid Authors
# ================
# 
# NetSquid is being developed within [Quantum Internet division](https://qutech.nl/research-engineering/quantum-internet/) at QuTech.
# QuTech is a collaboration between TNO and the TUDelft.
# 
# Active authors (alphabetical):
# 
# - Tim Coopmans (scientific contributor)
# - Chris Elenbaas (software developer)
# - David Elkouss (scientific supervisor)
# - Rob Knegjens (tech lead, software architect)
# - IÃ±aki Martin Soroa (software developer)
# - Julio de Oliveira Filho (software architect)
# - Ariana Torres Knoop (HPC contributor)
# - Stephanie Wehner (scientific supervisor)
# 
# Past authors (alphabetical):
# 
# - Axel Dahlberg (scientific contributor)
# - Damian Podareanu (HPC contributor)
# - Walter de Jong (HPC contributor)
# - Loek Nijsten (software developer)
# - Martijn Papendrecht (software developer)
# - Filip Rozpedek (scientific contributor)
# - Matt Skrzypczyk (software contributor)
# - Leon Wubben (software developer)
# 
# The simulation engine of NetSquid depends on the pyDynAA package,
# which is developed at TNO by Julio de Oliveira Filho, Rob Knegjens, Coen van Leeuwen, and Joost Adriaanse.
# 
# Ariana Torres Knoop, Walter de Jong and Damian Podareanu from SURFsara have contributed towards the optimization and parallelization of NetSquid.
# 
# Hana Jirovska and Chris Elenbaas have built Python packages for MacOS.
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This file uses NumPy style docstrings: https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt

"""
The classical error model interface (abstract base class) defined in this module
allows users to specify custom error (e.g. noise or loss) functionality for components.

"""
from netsquid.components.models.errormodels import ErrorModel
from netsquid.qubits.qubit import Qubit
__all__ = [
    "ClassicalErrorModel",
]


class ClassicalErrorModel(ErrorModel):
    """Interface for a callable object that applies errors to classical items.

    """

    def error_operation(self, items, delta_time=0, **kwargs):
        """Error operation to apply to items (to be overridden).

        Parameters
        ----------
        items : list of any except :obj:`~netsquid.qubits.qubit.Qubit`
            Items to apply error to.
        delta_time : float, optional
            Time items have spent on a component [ns].

        """
        # Should be overridden
        raise NotImplementedError

    def compute_model(self, items, delta_time=0, **kwargs):
        """Perform the action of the model.

        This is the method called when the object is used as a callable function.

        Parameters
        ----------
        items : list of any except :obj:`~netsquid.qubits.qubit.Qubit`
            Items to apply error to.
        delta_time : float, optional
            Time items have spent on a component [ns].

        Raises
        ------
        TypeError
            If a :obj:`~netsquid.qubits.qubit.Qubit` is passed in the list of items.

        Notes
        -----
            For the model to work, the \\*\\*kwargs need to include all the
            parameters listed in the attribute *required properties* of the
            model.

        """
        if any(isinstance(item, Qubit) for item in items):
            raise TypeError("A ClassicalErrorModel cannot handle Qubits.")
        self.error_operation(items=items, delta_time=delta_time, **kwargs)

    @classmethod
    def concatenation_class(cls):
        """Type of the object that is returned when concatenating this model

        Returns
        -------
        :obj:`~netsquid.components.models.cerrormodels.ClassicalErrorModel`
            Concatenating two (subclasses of) ClassicalErrorModel results in a ClassicalErrorModel
        """
        return ClassicalErrorModel
