# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# File: delaymodels.py
# 
# This file is part of the NetSquid package (https://netsquid.org).
# It is subject to the NetSquid Software End User License Conditions.
# A copy of these conditions can be found in the LICENSE.md file of this package.
# 
# NetSquid Authors
# ================
# 
# NetSquid is being developed within [Quantum Internet division](https://qutech.nl/research-engineering/quantum-internet/) at QuTech.
# QuTech is a collaboration between TNO and the TUDelft.
# 
# Active authors (alphabetical):
# 
# - Tim Coopmans (scientific contributor)
# - Chris Elenbaas (software developer)
# - David Elkouss (scientific supervisor)
# - Rob Knegjens (tech lead, software architect)
# - IÃ±aki Martin Soroa (software developer)
# - Julio de Oliveira Filho (software architect)
# - Ariana Torres Knoop (HPC contributor)
# - Stephanie Wehner (scientific supervisor)
# 
# Past authors (alphabetical):
# 
# - Axel Dahlberg (scientific contributor)
# - Damian Podareanu (HPC contributor)
# - Walter de Jong (HPC contributor)
# - Loek Nijsten (software developer)
# - Martijn Papendrecht (software developer)
# - Filip Rozpedek (scientific contributor)
# - Matt Skrzypczyk (software contributor)
# - Leon Wubben (software developer)
# 
# The simulation engine of NetSquid depends on the pyDynAA package,
# which is developed at TNO by Julio de Oliveira Filho, Rob Knegjens, Coen van Leeuwen, and Joost Adriaanse.
# 
# Ariana Torres Knoop, Walter de Jong and Damian Podareanu from SURFsara have contributed towards the optimization and parallelization of NetSquid.
# 
# Hana Jirovska and Chris Elenbaas have built Python packages for MacOS.
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This file uses NumPy style docstrings: https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt

"""
The model interfaces (abstract base classes) defined in this module allow users
to specify custom delay functionality for classical and quantum components.
Aside from these interfaces, some examples are also defined.

"""
import numpy as np
from netsquid.util import simtools
from netsquid.components.models.model import Model, ModelCompositionException
from netsquid.util.constrainedmap import positive_constr, nonnegative_constr

__all__ = [
    "DelayModel",
    "FixedDelayModel",
    "GaussianDelayModel",
    "FibreDelayModel",
]


class DelayModel(Model):
    """Interface for a callable object that returns a timing delay.

        Parameters
        ----------
        rng : :obj:`~numpy.random.RandomState` or None, optional
            Random number generator to use. If ``None`` then
            :obj:`~netsquid.util.simtools.get_random_state` is used.

    """

    def __init__(self, rng=None, **kwargs):
        super().__init__()
        if rng is None:
            rng = simtools.get_random_state()
        self.add_property('rng', rng, value_type=np.random.RandomState)
        self.properties.update(kwargs)

    @property
    def rng(self):
        """ obj:`~numpy.random.RandomState`: Random number generator to use."""
        return self.properties['rng']

    @rng.setter
    def rng(self, value):
        self.properties['rng'] = value

    def generate_delay(self, **kwargs):
        """Generate a timing delay (this method should be overridden).

        Returns
        -------
        float
            Generated timing delay [ns].

        """
        if self.is_concatenated:
            delay = 0
            for model in self._models:
                delay += model.generate_delay(**kwargs)
            return delay
        # Else should be overwritten
        raise NotImplementedError

    def get_mean(self, **kwargs):
        """Get mean of timing delay.

        Returns
        -------
        float
            Mean of timing delay [ns].

        """
        if self.is_concatenated:
            mean = 0
            for model in self._models:
                mean += model.get_mean(**kwargs)
            return mean
        # Else should be overwritten
        raise NotImplementedError

    def set_mean(self, value):
        """Set mean of timing delay.

        Parameters
        ----------
        value : float
            Mean timing delay.

        """
        if self.is_concatenated:
            raise ModelCompositionException("Can not set mean of a concatenated delay model")
        raise NotImplementedError

    def get_std(self, **kwargs):
        """Get standard deviation of timing delay.

        Returns
        -------
        float
            Standard deviation of timing delay [ns].

        """
        if self.is_concatenated:
            raise ModelCompositionException("Can not get the std of a concatenated delay model")

        raise NotImplementedError

    def compute_model(self, *args, **kwargs):
        """Method associated to the  __call__ method."""
        return self.generate_delay(**kwargs)

    @classmethod
    def concatenation_class(cls):
        """Type of the object that is returned when concatenating this model

        Returns
        -------
        :obj:`~netsquid.components.models.qerrormodels._ConcatenatedDelayModel`
            Concatenating two (subclasses of) DelayModel results in a _ConcatenatedDelayModel.
            This class has, in addition to generate_delay and __call__, also get_mean defined.
        """
        return DelayModel

    def __call__(self, *args, **kwargs):
        if self.is_concatenated:
            return self.compute_model(*args, **kwargs)
        return super(DelayModel, self).__call__(*args, **kwargs)


class FixedDelayModel(DelayModel):
    """Model for fixed timing delay.

    Parameters
    ----------
    delay : float
        Fixed timing delay [ns].

    """

    def __init__(self, delay=0, **kwargs):
        super().__init__(**kwargs)
        self.add_property('delay', delay,
                          value_type=(int, float),
                          value_constraints=nonnegative_constr)

    @property
    def delay(self):
        """float: fixed timing delay [ns]."""
        return self.properties['delay']

    @delay.setter
    def delay(self, value):
        self.properties['delay'] = value

    def get_mean(self, **kwargs):
        """Get mean of timing delay.

        Returns
        -------
        float
            Mean of timing delay [ns].

        """
        return self.delay

    def set_mean(self, value):
        """Set mean of timing delay.

        Parameters
        ----------
        value : float
            Mean timing delay.

        """
        self.delay = value

    def get_std(self, **kwargs):
        """Get standard deviation of transmission delay.

        Returns
        -------
        float
            Standard deviation of transmission delay [ns].

        """
        return 0

    def generate_delay(self, **kwargs):
        """Generate a fixed channel delay.

        Returns
        -------
        float
            Fixed channel delay.

        """
        return self.delay


class GaussianDelayModel(DelayModel):
    """Model for a channel delay with a Gaussian (normal) distribution.

    Parameters
    ----------
    delay_mean : float
        Mean transmission delay.
    delay_std : float
        Standard deviation of transmission delay.
    rng : :obj:`~numpy.random.RandomState` or None, optional
        Random number generator to use. If ``None`` then
        :obj:`~netsquid.util.simtools.get_random_state` is used.

    """

    def __init__(self, delay_mean, delay_std, rng=None, **kwargs):
        super().__init__(rng=rng, **kwargs)
        self.add_property('delay_mean', delay_mean,
                          value_type=(int, float),
                          value_constraints=nonnegative_constr)
        self.add_property('delay_std', delay_std,
                          value_type=(int, float),
                          value_constraints=nonnegative_constr)

    @property
    def delay_mean(self):
        """float: Mean transmission delay."""
        return self.properties['delay_mean']

    @delay_mean.setter
    def delay_mean(self, value):
        self.properties['delay_mean'] = value

    @property
    def delay_std(self):
        """float: Standard deviation of transmission delay."""
        return self.properties['delay_std']

    @delay_std.setter
    def delay_std(self, value):
        self.properties['delay_std'] = value

    def get_mean(self, **kwargs):
        """Get mean of transmission delay.

        Returns
        -------
        float
            Mean of transmission delay [ns].

        """
        return self.delay_mean

    def set_mean(self, value):
        """Set mean of timing delay.

        Parameters
        ----------
        value : float
            Mean timing delay.

        """
        self.delay_mean = value

    def get_std(self, **kwargs):
        """Get standard deviation of transmission delay.

        Returns
        -------
        float
            Standard deviation of transmission delay [ns].

        """
        return self.delay_std

    def generate_delay(self, **kwargs):
        """Generate a channel delay.

        Returns
        -------
        float
            Generated channel delay.

        """
        if self.delay_std > 0:
            return self.rng.normal(self.delay_mean, self.delay_std)
        else:
            return self.delay_mean


class FibreDelayModel(DelayModel):
    """Transmission delay model based on constant speed of photons through fibre.

    The travel distance is given by length of channel.

    Parameters
    ----------
    c : float, optional
        Fixed speed of photons through the channel [km/s].

    """

    def __init__(self, c=200000, **kwargs):
        super().__init__(**kwargs)
        self.add_property('c', c,
                          value_type=(int, float),
                          value_constraints=positive_constr)
        self.required_properties = ['length']

    @property
    def c(self):
        """float: fixed speed of photons through the channel."""
        return self.properties['c']

    @c.setter
    def c(self, value):
        self.properties['c'] = value

    def get_mean(self, **kwargs):
        """Get mean of transmission delay.

        Returns
        -------
        float
            Mean of transmission delay [ns].

        """
        return self.generate_delay(**kwargs)

    def set_mean(self, value):
        """Set mean of timing delay.

        Parameters
        ----------
        value : float
            Mean timing delay.

        """
        raise NotImplementedError

    def get_std(self, **kwargs):
        """Get standard deviation of transmission delay.

        Returns
        -------
        float
            Standard deviation of transmission delay [ns].

        """
        return 0

    def generate_delay(self, **kwargs):
        """Delay from a constant speed signal through a fibre channel.

        Returns
        -------
        float
            Channel delay [ns].

        Raises
        ------
        AttributeError
            If ``channel`` does not have a ``length`` attribute.

        """
        return 1e9 * kwargs['length'] / self.c
