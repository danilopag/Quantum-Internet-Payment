# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# File: test_cliffords.py
# 
# This file is part of the NetSquid package (https://netsquid.org).
# It is subject to the NetSquid Software End User License Conditions.
# A copy of these conditions can be found in the LICENSE.md file of this package.
# 
# NetSquid Authors
# ================
# 
# NetSquid is being developed within [Quantum Internet division](https://qutech.nl/research-engineering/quantum-internet/) at QuTech.
# QuTech is a collaboration between TNO and the TUDelft.
# 
# Active authors (alphabetical):
# 
# - Tim Coopmans (scientific contributor)
# - Chris Elenbaas (software developer)
# - David Elkouss (scientific supervisor)
# - Rob Knegjens (tech lead, software architect)
# - IÃ±aki Martin Soroa (software developer)
# - Julio de Oliveira Filho (software architect)
# - Ariana Torres Knoop (HPC contributor)
# - Stephanie Wehner (scientific supervisor)
# 
# Past authors (alphabetical):
# 
# - Axel Dahlberg (scientific contributor)
# - Damian Podareanu (HPC contributor)
# - Walter de Jong (HPC contributor)
# - Loek Nijsten (software developer)
# - Martijn Papendrecht (software developer)
# - Filip Rozpedek (scientific contributor)
# - Matt Skrzypczyk (software contributor)
# - Leon Wubben (software developer)
# 
# The simulation engine of NetSquid depends on the pyDynAA package,
# which is developed at TNO by Julio de Oliveira Filho, Rob Knegjens, Coen van Leeuwen, and Joost Adriaanse.
# 
# Ariana Torres Knoop, Walter de Jong and Damian Podareanu from SURFsara have contributed towards the optimization and parallelization of NetSquid.
# 
# Hana Jirovska and Chris Elenbaas have built Python packages for MacOS.
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import unittest
from functools import reduce

from netsquid.qubits import cliffords

cliffs = [cliffords.CLIFF_I, cliffords.CLIFF_X, cliffords.CLIFF_Y, cliffords.CLIFF_Z,
          cliffords.CLIFF_S, cliffords.CLIFF_SX, cliffords.CLIFF_SY, cliffords.CLIFF_SZ,
          cliffords.CLIFF_H, cliffords.CLIFF_HX, cliffords.CLIFF_HZ, cliffords.CLIFF_K,
          cliffords.CLIFF_KX, cliffords.CLIFF_KY, cliffords.CLIFF_KZ, cliffords.CLIFF_HK,
          cliffords.CLIFF_HKX, cliffords.CLIFF_HKY, cliffords.CLIFF_HKZ, cliffords.CLIFF_KH,
          cliffords.CLIFF_KHX, cliffords.CLIFF_KHY, cliffords.CLIFF_KHZ]


class TestClifford(unittest.TestCase):

    def test_decomposition(self):
        """Test decomposition of cliffords"""
        for cliff in cliffs:
            self.assertIs(cliff, reduce(lambda x, y: x * y, cliff.decomposition, cliffords.CLIFF_I))
            self.assertIs(cliff, reduce(lambda x, y: x.multiply_with_phase(y)[0], cliff.decomposition,
                                        cliffords.CLIFF_I))

    def test_dagger(self):
        """Test daggers of cliffords"""
        for cliff in cliffs:
            self.assertIs(cliffords.CLIFF_I, cliff * cliff.dagger)
            self.assertIs(cliffords.CLIFF_I, cliff * (cliff ** -1))
            self.assertIs(cliff.dagger, cliff ** -1)


if __name__ == '__main__':
    unittest.main()
