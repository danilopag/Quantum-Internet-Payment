# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# File: test_sparsedmtools.py
# 
# This file is part of the NetSquid package (https://netsquid.org).
# It is subject to the NetSquid Software End User License Conditions.
# A copy of these conditions can be found in the LICENSE.md file of this package.
# 
# NetSquid Authors
# ================
# 
# NetSquid is being developed within [Quantum Internet division](https://qutech.nl/research-engineering/quantum-internet/) at QuTech.
# QuTech is a collaboration between TNO and the TUDelft.
# 
# Active authors (alphabetical):
# 
# - Tim Coopmans (scientific contributor)
# - Chris Elenbaas (software developer)
# - David Elkouss (scientific supervisor)
# - Rob Knegjens (tech lead, software architect)
# - IÃ±aki Martin Soroa (software developer)
# - Julio de Oliveira Filho (software architect)
# - Ariana Torres Knoop (HPC contributor)
# - Stephanie Wehner (scientific supervisor)
# 
# Past authors (alphabetical):
# 
# - Axel Dahlberg (scientific contributor)
# - Damian Podareanu (HPC contributor)
# - Walter de Jong (HPC contributor)
# - Loek Nijsten (software developer)
# - Martijn Papendrecht (software developer)
# - Filip Rozpedek (scientific contributor)
# - Matt Skrzypczyk (software contributor)
# - Leon Wubben (software developer)
# 
# The simulation engine of NetSquid depends on the pyDynAA package,
# which is developed at TNO by Julio de Oliveira Filho, Rob Knegjens, Coen van Leeuwen, and Joost Adriaanse.
# 
# Ariana Torres Knoop, Walter de Jong and Damian Podareanu from SURFsara have contributed towards the optimization and parallelization of NetSquid.
# 
# Hana Jirovska and Chris Elenbaas have built Python packages for MacOS.
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This file uses NumPy style docstrings: https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt

"""Unit tests for sparsedmtools module.

"""
import unittest

from netsquid.qubits.ketutil import ket2dm, ket2sparsedm
from netsquid.qubits.sparsedmtools import SparseDMRepr
from netsquid.qubits.sparseutil import sparse_allclose

from netsquid import b01, s0
from netsquid.qubits import sparsedmtools
from netsquid.qubits.qubit import Qubit
from netsquid.qubits.tests.test_dmtools import TestDMRepr, TestDMState


class TestSparseDMRepr(TestDMRepr, unittest.TestCase):
    """Test the SparseDMRepr class.

    """

    def create_qrepr(self, **kwargs) -> SparseDMRepr:
        return SparseDMRepr(**kwargs)

    def _assertEqualDM2Ket(self, representation, ket):
        if ket.shape[1] == 1:
            ket = ket2dm(ket)
        self.assertTrue(sparse_allclose(representation.sparse_dm, ket))


class TestSparseDMState(TestDMState, unittest.TestCase):
    """Unit tests for deprecated SparseDMState class.

    The TestQState baseclass defines extra test methods.

    """

    def _assertEqualSparseDM2Ket(self, sparse_dm, ket):
        self.assertTrue(sparse_allclose(sparse_dm, ket2sparsedm(ket)))

    @property
    def is_stabilizer(self):
        return False

    def test_SparseDMState_init(self):
        """Test SparseDMState initialization"""
        # check qubit creation
        h1 = Qubit("H1")
        self.assertEqual(h1.name, "H1")
        self.assertEqual(h1.qstate, None)
        with self.assertRaises(RuntimeError):
            h1._index
        # check SparseDMState creation
        with self.assertRaises(ValueError):
            sparsedmtools.SparseDMState([h1, h1], ket2sparsedm(b01))
        with self.assertRaises(ValueError):
            sparsedmtools.SparseDMState([h1], ket2sparsedm(b01))
        h2 = Qubit("H2")
        qs = sparsedmtools.SparseDMState([h1, h2], ket2sparsedm(b01))
        self._assertEqualSparseDM2Ket(qs.sparse_dm, b01)
        h1.qstate.compare(qs)
        h2.qstate.compare(qs)
        self.assertEqual(h1._index, 0)
        self.assertEqual(h2._index, 1)
        self.assertEqual(qs.num_qubits, 2)
        with self.assertRaises(ValueError):
            qs.sparse_dm = ket2sparsedm(s0)


if __name__ == "__main__":
    unittest.main(verbosity=2)
