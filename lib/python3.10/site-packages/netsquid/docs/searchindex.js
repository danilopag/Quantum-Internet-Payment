Search.setIndex({"docnames": ["AUTHORS", "CHANGELOG", "CONTRIBUTING", "INSTALL", "INSTALL-SOURCE", "LICENSE", "README", "RELEASE", "api_components/netsquid.components.cchannel", "api_components/netsquid.components.ccoding", "api_components/netsquid.components.channel", "api_components/netsquid.components.clock", "api_components/netsquid.components.component", "api_components/netsquid.components.cqchannel", "api_components/netsquid.components.instructions", "api_components/netsquid.components.qchannel", "api_components/netsquid.components.qdetector", "api_components/netsquid.components.qmemory", "api_components/netsquid.components.qprocessor", "api_components/netsquid.components.qprogram", "api_components/netsquid.components.qsource", "api_components/netsquid.components.switch", "api_examples/netsquid.examples.entanglenodes", "api_examples/netsquid.examples.magic_simple_link", "api_examples/netsquid.examples.purify", "api_examples/netsquid.examples.repeater", "api_examples/netsquid.examples.repeater_chain", "api_examples/netsquid.examples.simple_link", "api_examples/netsquid.examples.teleportation", "api_models/netsquid.components.models.cerrormodels", "api_models/netsquid.components.models.delaymodels", "api_models/netsquid.components.models.errormodels", "api_models/netsquid.components.models.model", "api_models/netsquid.components.models.qerrormodels", "api_nodes/netsquid.nodes.connections", "api_nodes/netsquid.nodes.network", "api_nodes/netsquid.nodes.node", "api_protocols/netsquid.protocols.nodeprotocols", "api_protocols/netsquid.protocols.protocol", "api_protocols/netsquid.protocols.serviceprotocol", "api_pydynaa", "api_qubits/netsquid.qubits.cliffords", "api_qubits/netsquid.qubits.dmtools", "api_qubits/netsquid.qubits.dmutil", "api_qubits/netsquid.qubits.gslctools", "api_qubits/netsquid.qubits.gslcutil", "api_qubits/netsquid.qubits.ketstates", "api_qubits/netsquid.qubits.kettools", "api_qubits/netsquid.qubits.ketutil", "api_qubits/netsquid.qubits.operators", "api_qubits/netsquid.qubits.opmath", "api_qubits/netsquid.qubits.qformalism", "api_qubits/netsquid.qubits.qrepr", "api_qubits/netsquid.qubits.qreprutil", "api_qubits/netsquid.qubits.qstate", "api_qubits/netsquid.qubits.qubit", "api_qubits/netsquid.qubits.qubitapi", "api_qubits/netsquid.qubits.sparsedmtools", "api_qubits/netsquid.qubits.sparseutil", "api_qubits/netsquid.qubits.stabtools", "api_qubits/netsquid.qubits.state_sampler", "api_reference", "api_util/netsquid.util.constrainedmap", "api_util/netsquid.util.cycache", "api_util/netsquid.util.cymath", "api_util/netsquid.util.datacollector", "api_util/netsquid.util.simlog", "api_util/netsquid.util.simstats", "api_util/netsquid.util.simtools", "index", "learn.examples", "learn_examples/learn.examples.magic_simple_link", "learn_examples/learn.examples.repeater", "learn_examples/learn.examples.repeater_chain", "learn_examples/learn.examples.simple_link", "learn_examples/learn.examples.teleportation", "napoleon/README", "netsquid.components", "netsquid.components.models", "netsquid.examples", "netsquid.nodes", "netsquid.protocols", "netsquid.qubits", "netsquid.util", "pydynaa", "quick_start", "tutorial.components", "tutorial.intro", "tutorial.nodes", "tutorial.protocols", "tutorial.pydynaa", "tutorial.quantumprocessor", "tutorial.qubits", "tutorial.simulation"], "filenames": ["AUTHORS.md", "CHANGELOG.md", "CONTRIBUTING.md", "INSTALL.md", "INSTALL-SOURCE.md", "LICENSE.md", "README.md", "RELEASE.md", "api_components/netsquid.components.cchannel.rst", "api_components/netsquid.components.ccoding.rst", "api_components/netsquid.components.channel.rst", "api_components/netsquid.components.clock.rst", "api_components/netsquid.components.component.rst", "api_components/netsquid.components.cqchannel.rst", "api_components/netsquid.components.instructions.rst", "api_components/netsquid.components.qchannel.rst", "api_components/netsquid.components.qdetector.rst", "api_components/netsquid.components.qmemory.rst", "api_components/netsquid.components.qprocessor.rst", "api_components/netsquid.components.qprogram.rst", "api_components/netsquid.components.qsource.rst", "api_components/netsquid.components.switch.rst", "api_examples/netsquid.examples.entanglenodes.rst", "api_examples/netsquid.examples.magic_simple_link.rst", "api_examples/netsquid.examples.purify.rst", "api_examples/netsquid.examples.repeater.rst", "api_examples/netsquid.examples.repeater_chain.rst", "api_examples/netsquid.examples.simple_link.rst", "api_examples/netsquid.examples.teleportation.rst", "api_models/netsquid.components.models.cerrormodels.rst", "api_models/netsquid.components.models.delaymodels.rst", "api_models/netsquid.components.models.errormodels.rst", "api_models/netsquid.components.models.model.rst", "api_models/netsquid.components.models.qerrormodels.rst", "api_nodes/netsquid.nodes.connections.rst", "api_nodes/netsquid.nodes.network.rst", "api_nodes/netsquid.nodes.node.rst", "api_protocols/netsquid.protocols.nodeprotocols.rst", "api_protocols/netsquid.protocols.protocol.rst", "api_protocols/netsquid.protocols.serviceprotocol.rst", "api_pydynaa.rst", "api_qubits/netsquid.qubits.cliffords.rst", "api_qubits/netsquid.qubits.dmtools.rst", "api_qubits/netsquid.qubits.dmutil.rst", "api_qubits/netsquid.qubits.gslctools.rst", "api_qubits/netsquid.qubits.gslcutil.rst", "api_qubits/netsquid.qubits.ketstates.rst", "api_qubits/netsquid.qubits.kettools.rst", "api_qubits/netsquid.qubits.ketutil.rst", "api_qubits/netsquid.qubits.operators.rst", "api_qubits/netsquid.qubits.opmath.rst", "api_qubits/netsquid.qubits.qformalism.rst", "api_qubits/netsquid.qubits.qrepr.rst", "api_qubits/netsquid.qubits.qreprutil.rst", "api_qubits/netsquid.qubits.qstate.rst", "api_qubits/netsquid.qubits.qubit.rst", "api_qubits/netsquid.qubits.qubitapi.rst", "api_qubits/netsquid.qubits.sparsedmtools.rst", "api_qubits/netsquid.qubits.sparseutil.rst", "api_qubits/netsquid.qubits.stabtools.rst", "api_qubits/netsquid.qubits.state_sampler.rst", "api_reference.rst", "api_util/netsquid.util.constrainedmap.rst", "api_util/netsquid.util.cycache.rst", "api_util/netsquid.util.cymath.rst", "api_util/netsquid.util.datacollector.rst", "api_util/netsquid.util.simlog.rst", "api_util/netsquid.util.simstats.rst", "api_util/netsquid.util.simtools.rst", "index.rst", "learn.examples.rst", "learn_examples/learn.examples.magic_simple_link.rst", "learn_examples/learn.examples.repeater.rst", "learn_examples/learn.examples.repeater_chain.rst", "learn_examples/learn.examples.simple_link.rst", "learn_examples/learn.examples.teleportation.rst", "napoleon/README.md", "netsquid.components.rst", "netsquid.components.models.rst", "netsquid.examples.rst", "netsquid.nodes.rst", "netsquid.protocols.rst", "netsquid.qubits.rst", "netsquid.util.rst", "pydynaa.rst", "quick_start.rst", "tutorial.components.rst", "tutorial.intro.rst", "tutorial.nodes.rst", "tutorial.protocols.rst", "tutorial.pydynaa.rst", "tutorial.quantumprocessor.rst", "tutorial.qubits.rst", "tutorial.simulation.rst"], "titles": ["NetSquid Authors", "CHANGELOG", "Contributing", "Installing the NetSquid package", "Building and installing NetSquid from source", "NETSQUID SOFTWARE END USER LICENSE CONDITIONS", "NetSquid: the Network Simulator for Quantum Information using Discrete events", "RELEASE NOTES", "netsquid.components.cchannel", "netsquid.components.ccoding", "netsquid.components.channel", "netsquid.components.clock", "netsquid.components.component", "netsquid.components.cqchannel", "netsquid.components.instructions", "netsquid.components.qchannel", "netsquid.components.qdetector", "netsquid.components.qmemory", "netsquid.components.qprocessor", "netsquid.components.qprogram", "netsquid.components.qsource", "netsquid.components.switch", "netsquid.examples.entanglenodes", "netsquid.examples.magic_simple_link", "netsquid.examples.purify", "netsquid.examples.repeater", "netsquid.examples.repeater_chain", "netsquid.examples.simple_link", "netsquid.examples.teleportation", "netsquid.components.models.cerrormodels", "netsquid.components.models.delaymodels", "netsquid.components.models.errormodels", "netsquid.components.models.model", "netsquid.componentsmodels.qerrormodels", "netsquid.nodes.connections", "netsquid.nodes.network", "netsquid.nodes.node", "netsquid.protocols.nodeprotocols", "netsquid.protocols.protocol", "netsquid.protocols.serviceprotocol", "pyDynAA package", "netsquid.qubits.cliffords", "netsquid.qubits.dmtools", "netsquid.qubits.dmutil", "netsquid.qubits.gslctools", "netsquid.qubits.gslcutil", "netsquid.qubits.ketstates", "netsquid.qubits.kettools", "netsquid.qubits.ketutil", "netsquid.qubits.operators", "netsquid.qubits.opmath", "netsquid.qubits.qformalism", "netsquid.qubits.qrepr", "netsquid.qubits.qreprutil", "netsquid.qubits.qstate", "netsquid.qubits.qubit", "netsquid.qubits.qubitapi", "netsquid.qubits.sparsedmtools", "netsquid.qubits.sparseutil", "netsquid.qubits.stabtools", "netsquid.qubits.state_sampler", "NetSquid package", "netsquid.util.constrainedmap", "netsquid.util.cycache", "netsquid.util.cymath", "netsquid.util.datacollector", "netsquid.util.simlog", "netsquid.util.simstats", "netsquid.util.simtools", "NetSquid", "Examples", "Faster Link layer Protocol using abstraction", "Repeater with purification", "Repeater chain", "A simple link layer protocol", "Teleportation", "&lt;no title&gt;", "netsquid.components", "netsquid.components.models", "netsquid.examples", "netsquid.nodes", "netsquid.protocols", "netsquid.qubits", "netsquid.util", "pydynaa.Entity", "NetSquid in 10 minutes", "Modelling of network components", "Tutorial", "Nodes and Connections", "Protocols", "Discrete event simulation", "The Quantum Processor", "Qubits and quantum computation", "A full simulation"], "terms": {"i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 78, 82, 84, 85, 93], "being": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 34, 36, 51, 56, 84, 87, 89], "develop": [0, 1, 2, 3, 4, 5, 6], "within": [0, 1, 2, 3, 4, 5, 7, 14, 17, 19, 26, 27, 28, 36, 49, 55, 56, 62, 74, 77, 84, 89, 93], "quantum": [0, 1, 5, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 33, 34, 35, 36, 38, 39, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 67, 69, 72, 73, 74, 75, 77, 80, 82, 85, 88, 89, 93], "internet": [0, 6], "divis": [0, 6], "qutech": [0, 4, 5, 6, 87], "collabor": [0, 1, 5, 6], "between": [0, 1, 2, 5, 6, 7, 11, 12, 14, 16, 19, 20, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 37, 39, 42, 43, 44, 47, 48, 49, 51, 52, 53, 56, 57, 58, 59, 71, 72, 73, 74, 75, 85, 86, 87, 88, 90, 91, 92, 93], "tno": [0, 4, 6], "tudelft": [0, 5, 6], "activ": [0, 1, 16, 68, 84], "alphabet": 0, "tim": 0, "coopman": 0, "scientif": [0, 5], "contributor": [0, 6], "chri": 0, "elenbaa": 0, "softwar": [0, 2, 4, 85, 89], "david": 0, "elkouss": 0, "supervisor": 0, "rob": 0, "knegjen": 0, "tech": 0, "lead": [0, 1, 4, 26, 73, 88], "architect": 0, "i\u00f1aki": 0, "martin": 0, "soroa": 0, "julio": 0, "de": [0, 1, 5, 7, 37], "oliveira": 0, "filho": 0, "ariana": 0, "torr": 0, "knoop": 0, "hpc": 0, "stephani": [0, 1], "wehner": 0, "past": [0, 8, 10, 13, 15, 84], "axel": 0, "dahlberg": [0, 27, 74], "damian": [0, 1], "podareanu": [0, 1], "walter": 0, "jong": [0, 5], "loek": 0, "nijsten": 0, "martijn": 0, "papendrecht": 0, "filip": [0, 1], "rozpedek": 0, "matt": 0, "skrzypczyk": 0, "leon": 0, "wubben": 0, "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 81, 82, 84, 85, 86, 87, 88, 92, 93], "simul": [0, 1, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 36, 38, 39, 40, 49, 51, 56, 59, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 84, 86, 87, 88, 89, 92], "engin": [0, 1, 5, 6, 7, 40, 68, 84, 86], "depend": [0, 1, 3, 4, 8, 10, 13, 15, 17, 19, 21, 26, 32, 33, 51, 72, 73, 85, 86, 90, 91], "pydynaa": [0, 1, 3, 4, 5, 6, 23, 26, 27, 65, 68, 69, 71, 73, 74, 85, 86, 89, 93], "packag": [0, 1, 2, 5, 6, 66, 69, 90], "which": [0, 1, 2, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 38, 39, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 62, 65, 68, 71, 72, 73, 74, 77, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "coen": 0, "van": [0, 5], "leeuwen": 0, "joost": 0, "adriaans": 0, "from": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "surfsara": [0, 1], "have": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 42, 44, 47, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 62, 65, 68, 71, 72, 73, 74, 85, 86, 88, 89, 90, 91, 92, 93], "contribut": [0, 6, 69], "toward": [0, 37, 87, 93], "optim": [0, 1, 2, 7, 42, 44, 47, 52, 57, 59, 93], "parallel": [0, 1, 7, 18, 19, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 91, 93], "hana": 0, "jirovska": 0, "built": [0, 1, 4, 59, 65, 86, 87, 92], "python": [0, 1, 2, 3, 4, 6, 24, 43, 49, 56, 58, 61, 66, 67, 68, 69, 70, 72, 84, 86, 89, 93], "maco": [0, 3], "thi": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "file": [1, 2, 4, 6, 7, 24, 26, 28, 70, 72, 73, 75, 93], "list": [1, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 62, 65, 66, 70, 84, 86, 89, 92, 93], "import": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 39, 41, 42, 43, 44, 47, 48, 49, 51, 56, 57, 58, 59, 60, 62, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 85, 86, 88, 89, 90, 91, 92, 93], "increment": [1, 6, 7, 56], "chang": [1, 2, 4, 5, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 34, 36, 38, 39, 42, 44, 47, 52, 55, 56, 57, 59, 62, 74, 85, 86, 92], "netsquid": [1, 2, 40, 70, 71, 72, 73, 74, 75, 86, 87, 88, 89, 90, 91, 92, 93], "sourc": [1, 2, 3, 5, 6, 7, 14, 20, 22, 24, 25, 26, 28, 40, 65, 68, 69, 72, 73, 84, 86, 88, 89, 90, 93], "repositori": [1, 2, 4, 6, 7], "For": [1, 2, 3, 4, 7, 8, 10, 12, 13, 14, 15, 17, 18, 19, 23, 26, 27, 29, 31, 32, 33, 36, 42, 44, 47, 51, 54, 55, 56, 57, 59, 62, 71, 73, 74, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "summari": [1, 7, 51, 57, 61, 67, 85, 90], "per": [1, 8, 10, 13, 15, 16, 18, 22, 26, 33, 37, 51, 73, 84], "releas": [1, 4, 5, 6, 69], "see": [1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 38, 39, 43, 44, 45, 49, 56, 58, 59, 65, 66, 68, 69, 71, 73, 74, 84, 85, 86, 88, 90, 91], "fail": [1, 2, 3, 5, 7, 14, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28, 38, 39, 52, 61, 72, 74, 89], "build": [1, 2, 3, 6, 7, 18, 27, 41, 72, 74, 86, 87, 89], "test": [1, 2, 3, 4, 7, 16, 22, 24, 25, 33, 51, 61, 62, 66, 68, 72, 83, 88, 90], "try": [1, 2, 3, 4, 19, 26, 27, 28, 91], "clean": [1, 22, 23, 24, 25, 26, 27, 28, 38, 39], "environ": [1, 3, 4, 22, 23, 24, 25, 26, 27, 28, 38, 39], "befor": [1, 2, 5, 7, 8, 10, 11, 13, 15, 16, 17, 18, 20, 22, 24, 25, 27, 37, 38, 53, 56, 66, 72, 74, 84, 86, 89, 90, 91, 93], "again": [1, 3, 16, 23, 66, 68, 71, 84, 85, 86, 88, 89, 93], "e": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 33, 36, 38, 39, 42, 44, 47, 49, 51, 52, 54, 55, 56, 57, 59, 60, 65, 66, 72, 73, 84, 85, 86, 87, 88, 89, 90, 91, 92], "g": [1, 2, 3, 4, 7, 8, 10, 12, 13, 14, 15, 17, 18, 26, 29, 33, 36, 38, 51, 55, 56, 59, 85, 87, 90, 91], "make": [1, 2, 4, 5, 6, 7, 18, 19, 20, 23, 26, 27, 28, 42, 44, 47, 52, 55, 56, 59, 62, 66, 71, 73, 74, 78, 81, 85, 86, 88, 90, 93], "up": [1, 2, 5, 7, 18, 22, 23, 24, 25, 26, 27, 28, 36, 37, 38, 39, 43, 49, 56, 58, 59, 67, 68, 71, 72, 73, 84, 85, 86, 87, 88, 89, 90], "ani": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 49, 51, 53, 56, 59, 60, 62, 65, 67, 68, 73, 74, 84, 85, 86, 88, 89, 90, 91, 92], "linger": [1, 89], "object": [1, 2, 5, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 41, 42, 47, 49, 51, 52, 54, 55, 56, 57, 59, 60, 62, 63, 65, 66, 67, 71, 74, 84, 86, 90, 91, 92], "librari": [1, 4, 66, 69, 93], "o": [1, 3, 7, 50, 51, 70], "so": [1, 4, 5, 7, 12, 16, 18, 19, 22, 23, 26, 27, 28, 41, 55, 56, 59, 65, 71, 72, 73, 74, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "etc": [1, 2, 6, 7, 12, 27, 34, 36, 39, 57, 66, 67, 74, 90, 91, 92], "mai": [1, 2, 3, 5, 8, 10, 13, 15, 16, 17, 18, 22, 23, 24, 25, 26, 28, 34, 37, 38, 39, 45, 54, 55, 56, 57, 58, 66, 68, 71, 72, 84, 85, 89, 90, 92, 93], "caus": [1, 5, 14, 18, 19, 26, 27, 28, 68, 84, 85, 89, 90, 92, 93], "problem": [1, 23, 71, 91], "detail": [1, 3, 4, 7, 23, 51, 71, 85, 86, 90], "concern": [1, 5, 7, 89], "new": [1, 2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 65, 68, 71, 72, 74, 78, 84, 85, 86, 89, 90, 91, 92, 93], "featur": [1, 2, 6, 19, 69, 86, 87], "pleas": [1, 2, 3, 4, 5, 7, 69, 85], "refer": [1, 2, 4, 5, 7, 12, 14, 22, 23, 24, 25, 26, 27, 28, 38, 39, 40, 42, 44, 47, 48, 51, 52, 54, 56, 57, 58, 59, 71, 73, 84, 85, 87, 90, 91], "onlin": [1, 2, 4, 6], "document": [1, 6, 61, 65, 66, 69, 85, 92], "local": [1, 3, 4, 7, 19, 22, 23, 24, 25, 26, 27, 28, 36, 37, 38, 39, 41, 44, 53, 61, 66, 71, 72, 73, 74, 80, 88, 89, 90, 93], "doc": [1, 2, 4, 6, 7, 66], "deploi": [1, 2], "server": [1, 2, 4], "now": [1, 5, 16, 18, 20, 26, 27, 35, 39, 56, 73, 74, 84, 85, 86, 89, 90, 91, 92, 93], "possibl": [1, 2, 5, 7, 8, 10, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 34, 38, 39, 42, 44, 47, 49, 51, 52, 56, 57, 59, 73, 74, 78, 84, 86, 87, 88, 89, 90, 92, 93], "via": [1, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 42, 44, 47, 52, 53, 54, 57, 59, 65, 71, 72, 73, 74, 85, 86, 88, 92], "proxi": 1, "onli": [1, 2, 4, 5, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 41, 42, 44, 47, 49, 51, 54, 56, 57, 58, 59, 60, 62, 65, 66, 68, 71, 73, 74, 84, 86, 87, 88, 89, 90, 91, 92], "sftp": 1, "us": [1, 2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 81, 84, 85, 87, 88, 90, 92, 93], "support": [1, 4, 8, 10, 13, 14, 15, 18, 19, 24, 26, 27, 28, 42, 44, 47, 51, 52, 56, 57, 58, 59, 78, 91, 92], "modern": [1, 3], "openssh": 1, "restrict": [1, 7, 62, 90, 92], "updat": [1, 2, 4, 7, 17, 18, 90], "link": [1, 4, 6, 7, 12, 17, 18, 22, 23, 24, 25, 26, 27, 28, 34, 36, 39, 69, 70, 72, 73, 75, 77, 80, 85, 86, 88, 90], "paper": [1, 6, 27, 59, 74], "readm": 1, "author": [1, 5, 6, 69], "fix": [1, 2, 8, 10, 11, 13, 15, 20, 27, 30, 36, 51, 56, 62, 74, 86, 87, 90, 92], "bug": [1, 2, 6], "where": [1, 2, 5, 7, 8, 10, 13, 15, 16, 17, 18, 19, 21, 22, 27, 37, 39, 41, 49, 51, 56, 59, 62, 65, 72, 74, 85, 86, 88, 89, 90, 91, 92], "call": [1, 2, 4, 7, 8, 10, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 49, 51, 56, 62, 65, 66, 67, 71, 72, 73, 74, 78, 84, 85, 86, 87, 88, 90, 91, 92], "channel": [1, 8, 9, 13, 15, 16, 22, 24, 25, 27, 28, 30, 33, 34, 35, 36, 55, 61, 66, 72, 74, 77, 85, 87, 88, 90, 91, 92, 93], "peek": [1, 7, 8, 10, 13, 15, 17, 18, 22, 26, 27, 61, 72, 73, 74, 86, 88, 89], "method": [1, 2, 10, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 42, 44, 47, 49, 51, 52, 53, 56, 57, 58, 59, 62, 66, 72, 74, 84, 85, 86, 88, 89, 90, 91, 92], "an": [1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 44, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 62, 65, 68, 71, 72, 73, 74, 75, 84, 85, 86, 87, 89, 90, 91, 92, 93], "empti": [1, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 26, 27, 28, 35, 36, 49, 56, 60, 62, 74, 84], "gave": 1, "indexerror": [1, 22, 23, 24, 25, 26, 27, 28, 38, 39, 42, 44, 47, 52, 57, 59], "major": [1, 2, 3, 5], "version": [1, 3, 4, 5, 23, 49, 64, 69, 71], "x": [1, 2, 4, 5, 7, 14, 16, 17, 18, 26, 35, 39, 42, 44, 49, 51, 56, 59, 61, 62, 73, 82, 85, 86, 87, 89, 90, 91, 92, 93], "py": [1, 2, 7, 22, 24, 25, 26, 28, 72, 73, 75, 84, 93], "function": [1, 2, 5, 8, 10, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 43, 45, 48, 49, 51, 52, 56, 58, 62, 64, 65, 66, 67, 68, 71, 72, 73, 74, 78, 84, 85, 86, 88, 89, 90, 92], "get_git_version_tag": 1, "bump_vers": 1, "take": [1, 5, 7, 16, 17, 18, 20, 23, 25, 27, 41, 48, 49, 66, 68, 71, 72, 74, 84, 85, 90, 91, 92, 93], "return": [1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 71, 72, 73, 74, 78, 84, 85, 86, 88, 89, 92, 93], "tupl": [1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 44, 47, 49, 50, 51, 52, 56, 57, 59, 60, 62, 65, 73, 84], "int": [1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 60, 63, 65, 66, 68, 71, 72, 73, 74, 84, 93], "instead": [1, 2, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 27, 28, 34, 36, 41, 42, 44, 47, 52, 54, 56, 57, 59, 71, 73, 74, 85, 86, 87, 88, 89, 90, 91, 92, 93], "string": [1, 21, 35, 36, 49, 66, 85], "ha": [1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 34, 36, 37, 38, 39, 42, 44, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 67, 68, 71, 72, 73, 74, 84, 85, 86, 87, 88, 89, 90, 91, 93], "major_vers": [1, 2], "variabl": [1, 2, 4, 7, 32, 56, 62, 89, 90], "determin": [1, 2, 5, 14, 66, 85, 86, 92], "current": [1, 2, 3, 4, 5, 7, 8, 10, 11, 13, 15, 17, 18, 19, 20, 26, 27, 28, 41, 51, 56, 60, 62, 65, 66, 68, 74, 78, 84, 90, 93], "differ": [1, 2, 4, 7, 9, 12, 17, 18, 23, 26, 32, 51, 56, 58, 60, 65, 71, 73, 86, 87, 88, 90, 91, 92, 93], "latest": [1, 2, 4, 69], "tag": [1, 2, 12, 23, 27, 71, 74], "git": [1, 4], "ad": [1, 2, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 61, 65, 74, 78, 85, 86, 88, 90, 92], "v": [1, 2, 5, 62], "protect": [1, 2, 7], "branch": [1, 2, 4], "gitlab": [1, 4, 44], "ci": [1, 2, 4], "script": [1, 22, 25, 28, 70, 72, 75], "These": [1, 2, 5, 7, 16, 17, 18, 27, 32, 43, 48, 49, 51, 56, 58, 67, 68, 74, 85, 86, 90, 92], "act": [1, 5, 14, 16, 17, 18, 19, 22, 25, 26, 27, 28, 42, 44, 47, 49, 50, 52, 56, 57, 59, 62, 84], "ar": [1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "focu": [1, 24, 72], "master": [1, 2, 4], "v2": 1, "when": [1, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 41, 51, 52, 55, 60, 62, 63, 65, 66, 68, 71, 72, 73, 74, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "merg": [1, 2, 5, 7, 21], "v1": 1, "in_us": [1, 7, 17, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61], "properti": [1, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 49, 55, 61, 62, 65, 67, 73, 74, 84, 85, 86, 87], "memori": [1, 14, 15, 17, 18, 22, 23, 24, 25, 26, 27, 28, 36, 38, 39, 51, 57, 66, 69, 71, 72, 73, 74, 77, 84, 85, 88, 89, 90, 92, 93], "posit": [1, 2, 7, 14, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 38, 39, 43, 52, 56, 58, 62, 64, 71, 72, 73, 74, 86, 88, 89, 91, 93], "wasn": [1, 35], "t": [1, 3, 7, 14, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 33, 35, 38, 39, 42, 44, 47, 49, 51, 52, 54, 56, 57, 59, 61, 62, 66, 71, 73, 74, 82, 89, 90, 92], "toggl": [1, 7, 17, 22, 23, 24, 25, 26, 27, 28, 38, 39, 44], "upon": [1, 5, 8, 10, 13, 15, 18, 20, 27, 52, 56, 74, 85, 89, 92], "set_qubit": [1, 7, 17, 61], "get_qubit": [1, 17, 61], "therebi": [1, 7, 14, 18, 51, 84, 88], "also": [1, 2, 3, 4, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 47, 49, 51, 52, 54, 56, 57, 59, 62, 68, 71, 72, 73, 84, 85, 86, 90, 91, 93], "put": [1, 7, 8, 10, 13, 14, 15, 16, 17, 18, 20, 23, 24, 26, 27, 39, 61, 71, 72, 73, 74, 85, 86, 88, 89, 92], "pop": [1, 7, 17, 18, 24, 25, 61, 72, 86, 91, 93], "qmemori": [1, 14, 22, 23, 24, 25, 26, 27, 28, 35, 36, 38, 39, 61, 71, 72, 73, 74, 77, 86, 88, 89, 91, 93], "miss": [1, 3, 7, 18], "delay_dephas": [1, 56, 61, 82], "qubitapi": [1, 7, 14, 49, 54, 55, 61, 82, 86, 89, 92], "output": [1, 2, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 38, 39, 44, 50, 52, 58, 59, 61, 65, 71, 72, 73, 74, 85, 86, 88, 89, 90, 91, 93], "port": [1, 2, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 37, 38, 39, 61, 71, 72, 73, 74, 77, 85, 88, 89, 93], "qout": [1, 7, 14, 17, 18, 20, 27, 74, 86], "0": [1, 2, 3, 4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 71, 72, 73, 74, 75, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "n": [1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 38, 39, 42, 47, 48, 49, 51, 56, 57, 58, 59, 65, 67, 68, 70, 71, 72, 73, 74, 75, 78, 85, 86, 88, 89, 90, 91, 92, 93], "can": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 47, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 62, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "altern": [1, 2, 4, 20, 56, 86, 88, 89], "gener": [1, 2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 33, 37, 38, 39, 41, 42, 44, 47, 48, 49, 51, 52, 56, 57, 59, 60, 61, 66, 68, 71, 72, 73, 74, 78, 84, 85, 86, 88, 89, 90, 93], "extend": [1, 5, 7, 14, 18, 23, 24, 26, 39, 51, 69, 71, 72, 73, 86, 87, 88, 90], "gmeasur": [1, 7, 42, 44, 47, 52, 56, 57, 59, 61, 82, 92], "directli": [1, 3, 5, 12, 14, 17, 18, 20, 26, 27, 44, 55, 70, 73, 74, 84, 85, 86, 88, 90, 91], "accept": [1, 7, 16, 19, 26, 27, 28, 35, 65], "oper": [1, 3, 4, 5, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 29, 31, 33, 41, 42, 43, 44, 46, 47, 50, 51, 52, 54, 56, 57, 59, 61, 67, 72, 73, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93], "user": [1, 2, 3, 4, 6, 7, 18, 29, 30, 31, 32, 33, 39, 49, 55, 62, 65, 68, 84, 86], "don": [1, 3, 7, 22, 23, 24, 25, 26, 27, 28, 38, 39, 42, 44, 47, 51, 52, 54, 56, 57, 59, 66, 73, 74, 90], "need": [1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 41, 42, 51, 52, 59, 71, 72, 73, 74, 81, 84, 85, 86, 89, 91, 92, 93], "extract": [1, 5, 27, 74], "projector": [1, 7, 42, 44, 47, 49, 52, 56, 57, 59, 61, 92], "themselv": [1, 7, 27, 74], "implement": [1, 7, 10, 14, 17, 18, 21, 23, 27, 33, 39, 44, 51, 55, 56, 59, 71, 74, 86, 88, 90, 91, 92], "multi": [1, 2, 16, 18], "pauli": [1, 7, 26, 56, 59, 73], "measur": [1, 8, 10, 13, 14, 15, 16, 17, 18, 24, 25, 26, 27, 28, 42, 44, 46, 47, 48, 49, 52, 56, 57, 59, 61, 72, 73, 74, 82, 85, 86, 87, 89, 90, 91, 93], "stabrepr": [1, 7, 51, 53, 56, 59, 61, 82, 92], "requir": [1, 2, 4, 5, 7, 8, 14, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 56, 58, 59, 71, 74, 84, 86, 90, 92, 93], "helper": [1, 7, 10, 18, 22, 23, 24, 25, 26, 27, 28, 33, 38, 39, 56, 89, 92], "check_measurement_oper": 1, "modul": [1, 7, 11, 14, 16, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 41, 49, 55, 66, 70, 72, 73, 75, 90, 91, 92, 93], "interfac": [1, 7, 9, 12, 21, 27, 29, 30, 31, 32, 33, 39, 51, 52, 63, 74, 86, 88], "switch": [1, 7, 14, 61, 77, 86, 90, 92], "It": [1, 2, 4, 6, 7, 8, 10, 12, 13, 15, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28, 34, 36, 38, 39, 41, 42, 47, 48, 51, 52, 56, 57, 59, 68, 71, 74, 84, 86, 90, 91, 92, 93], "forward": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 26, 27, 28, 34, 36, 73, 74, 85, 86, 88, 93], "messag": [1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 38, 39, 61, 62, 66, 71, 72, 73, 74, 77, 85, 86, 87, 88, 89, 90, 92, 93], "dynam": [1, 32, 49, 85, 90, 92], "even": [1, 7, 10, 65, 68, 84, 86, 91, 93], "split": [1, 21, 27, 55, 56, 60, 74, 92], "over": [1, 2, 5, 8, 13, 16, 20, 25, 27, 51, 56, 62, 68, 72, 74, 84, 87, 92], "multipl": [1, 2, 4, 7, 8, 10, 12, 13, 14, 15, 16, 18, 19, 20, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 59, 65, 68, 69, 72, 73, 74, 86, 87, 89, 90, 91, 92, 93], "compon": [1, 2, 22, 24, 25, 26, 27, 28, 33, 34, 35, 36, 38, 61, 62, 66, 69, 72, 73, 74, 80, 81, 87, 88, 89, 90, 91, 92, 93], "simpleswitch": [1, 7, 21, 61, 77], "base": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 54, 55, 57, 58, 59, 60, 62, 63, 65, 67, 77, 78, 81, 85, 86, 87, 88, 89, 90, 91, 92], "map": [1, 7, 18, 20, 21, 23, 27, 35, 39, 52, 61, 62, 86, 91, 92], "you": [1, 2, 3, 4, 5, 6, 7, 10, 14, 18, 20, 22, 23, 24, 25, 26, 27, 28, 38, 39, 41, 43, 45, 49, 51, 56, 58, 60, 65, 67, 68, 69, 70, 72, 85, 87, 89, 90, 93], "specifi": [1, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 47, 48, 49, 51, 56, 57, 58, 59, 62, 65, 68, 72, 74, 84, 85, 86, 88, 89, 90, 91, 92], "fidel": [1, 7, 22, 24, 25, 26, 27, 28, 42, 43, 44, 47, 48, 52, 54, 56, 57, 58, 59, 61, 72, 73, 74, 75, 82, 86, 88, 89, 90, 91, 92, 93], "estim": [1, 39], "spars": [1, 48, 49, 50, 51, 53, 57, 58, 63], "densiti": [1, 7, 26, 42, 43, 44, 45, 47, 48, 50, 52, 53, 56, 57, 58, 59, 60, 61, 73, 85, 86, 90, 92], "matric": [1, 26, 42, 43, 50, 51, 57, 58, 63, 73], "repres": [1, 5, 11, 12, 14, 17, 18, 23, 26, 27, 33, 34, 39, 41, 42, 43, 44, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 71, 73, 74, 77, 80, 85, 86, 87, 88, 89, 90, 91, 92], "pure": [1, 7, 49, 51, 52, 56, 58, 60, 85, 88, 92], "sparse_dm_fidel": [1, 58, 61, 82], "one": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 49, 51, 52, 54, 56, 57, 58, 59, 60, 65, 66, 72, 73, 74, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "doe": [1, 2, 7, 12, 13, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 36, 37, 38, 39, 42, 44, 47, 48, 51, 52, 56, 57, 59, 62, 66, 72, 74, 78, 84, 85, 86, 89, 90, 92], "squar": [1, 7, 24, 25, 26, 42, 43, 44, 47, 48, 52, 54, 56, 57, 58, 59, 72, 73, 86, 89, 90, 91, 92, 93], "root": [1, 2, 4, 60, 66], "matrix": [1, 7, 26, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 56, 57, 58, 59, 60, 61, 64, 73, 85, 86, 90, 92], "is_pure_sparse_dm": [1, 58, 61, 82], "check": [1, 2, 3, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 43, 48, 52, 54, 56, 58, 59, 61, 62, 65, 66, 69, 74, 84, 85, 87, 88, 90, 92], "remov": [1, 3, 4, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 38, 39, 40, 51, 61, 62, 84, 86, 92], "usag": [1, 7, 51, 57, 84, 92], "is_trigg": [1, 16, 27, 61], "in_dead_tim": [1, 16, 27, 61], "quantumdetector": [1, 16, 27, 61, 74, 77], "intend": [1, 2, 3, 4, 5, 7, 8, 12, 13, 14, 15, 19, 38, 42, 44, 47, 52, 55, 57, 59, 62, 84, 86, 90, 91, 93], "overwritten": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 34, 36, 37, 38, 39], "model": [1, 2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 36, 55, 61, 69, 71, 72, 73, 74, 75, 85, 87, 88, 90, 91, 92, 93], "constrainedmap": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 61, 83, 88], "add_properti": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 61], "add": [1, 2, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 51, 62, 65, 68, 72, 73, 74, 86, 88, 91, 93], "valu": [1, 2, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 53, 56, 58, 59, 62, 63, 65, 66, 72, 73, 74, 84, 86, 89, 90, 93], "type": [1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 74, 84, 86, 89, 90, 91, 92], "constraint": [1, 2, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 42, 44, 47, 52, 56, 57, 59, 62, 71, 91], "kei": [1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 37, 38, 39, 57, 61, 62, 63, 65, 66, 69, 73, 74, 85, 86, 90, 93], "allow": [1, 4, 5, 7, 12, 16, 26, 27, 29, 30, 31, 32, 33, 39, 49, 51, 58, 66, 73, 74, 84, 86, 90, 93], "default": [1, 2, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 47, 49, 50, 51, 52, 56, 57, 58, 59, 62, 63, 65, 66, 68, 71, 72, 73, 74, 84, 85, 86, 88, 90, 91, 92], "value_typ": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 62], "rng": [1, 26, 30, 33, 42, 44, 47, 48, 52, 54, 57, 59, 60, 61, 68, 85], "paramet": [1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 71, 72, 73, 74, 84, 85, 86, 90, 91, 93], "delaymodel": [1, 7, 8, 10, 11, 13, 15, 16, 20, 61, 78, 85, 86], "cython": [1, 4, 6, 7, 63, 64, 69], "languag": [1, 5], "level": [1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 41, 66, 84, 91, 92], "3str": 1, "sparseutil": [1, 7, 61, 82], "some": [1, 2, 4, 7, 17, 18, 23, 27, 30, 32, 33, 41, 46, 49, 59, 62, 67, 68, 71, 74, 85, 86, 87, 89, 90, 91, 92], "instanc": [1, 7, 8, 10, 13, 15, 19, 22, 23, 24, 25, 26, 27, 28, 32, 38, 39, 41, 42, 44, 47, 52, 54, 55, 56, 57, 59, 60, 65, 68, 73, 74, 84, 86, 88, 90, 91, 92], "convert": [1, 2, 5, 8, 9, 12, 13, 45, 48, 49, 51, 52, 53, 56, 58, 59, 60, 65, 68, 92], "dm": [1, 7, 17, 18, 23, 27, 42, 44, 45, 47, 48, 51, 52, 53, 56, 57, 58, 59, 60, 61, 71, 74, 86, 88, 89, 90, 91, 92], "real": [1, 7, 49, 58, 64, 90], "complex": [1, 2, 7, 48, 49, 51, 58, 60, 84], "np": [1, 14, 20, 26, 43, 47, 48, 49, 56, 58, 60, 68, 73, 92], "_": [1, 2, 3, 4, 7, 23, 27, 71, 74, 88, 89], "just": [1, 2, 8, 10, 13, 15, 16, 27, 39, 42, 44, 47, 52, 57, 59, 63, 74, 86, 89], "numpi": [1, 2, 20, 24, 26, 30, 33, 42, 43, 44, 45, 47, 48, 49, 50, 52, 56, 57, 58, 59, 60, 68, 69, 92], "deprec": [1, 6, 17, 18, 54, 66], "ware": 1, "note": [1, 2, 4, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 68, 69, 72, 73, 74, 78, 84, 85, 86, 88, 89, 90, 92], "complex_t": 1, "should": [1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 71, 74, 78, 84, 85, 86, 89, 90, 91, 92, 93], "stai": [1, 20, 55, 85], "discard": [1, 7, 8, 12, 14, 16, 17, 18, 26, 27, 33, 42, 44, 47, 52, 54, 55, 56, 57, 59, 61, 82, 86, 92, 93], "quantummemori": [1, 14, 17, 18, 22, 23, 24, 25, 26, 27, 28, 35, 36, 38, 39, 61, 77, 86, 88, 91], "provid": [1, 2, 5, 6, 7, 9, 11, 12, 16, 27, 32, 35, 40, 41, 42, 43, 44, 47, 49, 52, 54, 56, 57, 58, 59, 60, 67, 68, 74, 84, 85, 88, 90, 91, 92], "combin": [1, 5, 7, 12, 13, 14, 17, 18, 19, 20, 24, 25, 26, 27, 28, 32, 35, 41, 42, 44, 47, 52, 54, 55, 56, 57, 59, 60, 61, 62, 65, 72, 74, 84, 87, 89, 90, 91, 92], "wa": [1, 3, 5, 7, 12, 17, 18, 22, 23, 24, 25, 26, 27, 28, 35, 37, 38, 39, 41, 42, 44, 47, 52, 56, 57, 59, 60, 85, 86, 89, 90, 91, 92], "part": [1, 5, 8, 10, 13, 16, 22, 23, 26, 27, 29, 30, 31, 32, 33, 35, 71, 72, 74, 84, 87, 88, 90, 93], "idiscard": [1, 7], "instruct": [1, 4, 6, 18, 19, 25, 26, 27, 28, 61, 72, 73, 74, 77, 85, 86, 89, 90, 92, 93], "class": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 49, 51, 52, 54, 55, 57, 58, 59, 60, 62, 63, 65, 67, 71, 72, 73, 74, 77, 78, 81, 84, 85, 86, 88, 89, 90, 91, 92, 93], "instr_discard": [1, 14, 61, 77], "constant": [1, 30], "explan": 1, "simlog": [1, 7, 61, 83], "how": [1, 2, 3, 4, 6, 8, 13, 18, 19, 25, 26, 27, 28, 39, 44, 52, 54, 56, 72, 73, 74, 75, 79, 85, 86, 87, 88, 89, 90, 91, 92, 93], "logger": [1, 7, 61, 66, 83], "work": [1, 2, 3, 4, 7, 11, 19, 26, 27, 28, 29, 31, 33, 51, 55, 69, 70, 74, 75, 86, 90, 91], "thei": [1, 2, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 49, 51, 52, 56, 62, 71, 72, 74, 81, 84, 85, 86, 89, 90, 91, 93], "found": [1, 2, 6, 7, 41, 66, 75, 93], "configur": [1, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 66, 71, 73, 74], "": [1, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 33, 34, 35, 36, 43, 48, 49, 50, 51, 54, 56, 58, 60, 61, 62, 65, 69, 71, 72, 73, 74, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93], "prefer": [1, 2, 85, 86], "includ": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 18, 20, 25, 26, 29, 31, 33, 56, 57, 60, 61, 65, 68, 69, 72, 84, 86, 90, 92, 93], "concret": [1, 7], "exampl": [1, 2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 30, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 49, 51, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 84, 85, 86, 87, 88, 92, 93], "get_logg": [1, 7, 61, 66, 83], "collaps": [1, 17, 18, 49], "degener": [1, 7, 49], "eigenvalu": [1, 7, 14, 42, 44, 47, 49, 52, 57, 59], "In": [1, 2, 5, 7, 8, 10, 13, 14, 15, 18, 19, 23, 24, 25, 26, 27, 33, 36, 42, 44, 47, 49, 51, 52, 56, 57, 59, 65, 68, 71, 72, 73, 74, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "practic": [1, 38, 88, 92], "zz": [1, 26, 73], "pariti": [1, 56], "A": [1, 2, 3, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 51, 52, 54, 57, 58, 59, 60, 62, 65, 66, 68, 69, 70, 71, 72, 73, 75, 84, 85, 86, 87, 88, 89, 91, 92], "side": [1, 27, 74, 86, 93], "effect": [1, 5, 16, 22, 23, 24, 25, 26, 27, 28, 38, 39, 73, 84, 86, 90, 91, 92], "longer": [1, 7, 22, 23, 24, 25, 26, 27, 28, 38, 39, 52, 84], "guarante": [1, 8, 10, 13, 15, 19, 26, 27, 28, 44], "match": [1, 2, 3, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 42, 44, 47, 48, 49, 51, 52, 54, 56, 57, 59, 60, 66, 69, 72, 84, 85, 86, 90, 91], "aren": [1, 17, 18, 27, 42, 44, 47, 52, 57, 74], "pick": [1, 2, 51, 86, 89], "time": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 37, 38, 39, 56, 59, 65, 67, 68, 71, 72, 73, 74, 84, 85, 86, 89, 90, 91, 92, 93], "other": [1, 2, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 47, 48, 49, 51, 52, 54, 55, 56, 57, 59, 60, 62, 68, 69, 71, 72, 73, 74, 78, 84, 85, 86, 87, 89, 90, 91, 92], "extern": [1, 7, 12, 20, 22, 24, 25, 61, 72, 86, 88, 93], "bell_projector": [1, 7, 49, 61, 82], "bell": [1, 14, 16, 25, 26, 27, 28, 46, 49, 56, 72, 73, 74, 86, 87, 89, 90, 91, 92, 93], "correspond": [1, 7, 14, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 38, 39, 44, 45, 46, 48, 49, 51, 54, 58, 59, 62, 90, 92, 93], "bellindex": [1, 7, 14, 26, 46, 49, 61, 73, 82], "qrepr": [1, 7, 42, 44, 47, 51, 53, 54, 56, 57, 59, 60, 61, 66, 82, 92], "create_in_basi": [1, 42, 44, 47, 52, 57, 59, 61], "static": [1, 18, 22, 23, 24, 25, 26, 27, 28, 33, 35, 36, 38, 39, 42, 44, 47, 52, 57, 59, 71], "easili": [1, 2, 26, 35, 73, 88, 92], "creat": [1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 47, 49, 50, 51, 52, 53, 56, 57, 58, 59, 65, 71, 72, 73, 74, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "represent": [1, 5, 42, 44, 45, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 92], "particular": [1, 5, 42, 44, 47, 52, 57, 59, 66, 84, 86, 88, 91], "basi": [1, 5, 14, 26, 27, 42, 44, 47, 49, 52, 56, 57, 59, 73, 74, 85, 86, 87, 90, 91, 92], "defin": [1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 49, 51, 52, 54, 56, 57, 58, 59, 65, 67, 72, 73, 74, 84, 85, 86, 88, 89, 90, 91, 92, 93], "singl": [1, 2, 4, 7, 8, 10, 12, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 39, 41, 42, 44, 47, 48, 49, 51, 52, 55, 56, 57, 59, 65, 72, 73, 74, 84, 85, 86, 87, 89, 91, 92, 93], "observ": [1, 7, 14, 16, 17, 18, 27, 42, 44, 47, 49, 52, 54, 56, 57, 59, 85, 86, 90, 92], "measurem": 1, "indic": [1, 2, 3, 7, 10, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 38, 39, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 54, 57, 58, 59, 61, 62, 71, 74, 84, 90, 91], "signal": [1, 7, 14, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 37, 38, 39, 61, 71, 72, 73, 74, 81, 89, 90, 93], "favor": [1, 7], "send_sign": [1, 7, 17, 18, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 71, 72, 73, 74, 89, 93], "physicalindex": [1, 7, 18, 61, 77], "num": [1, 7], "qprocessor": [1, 19, 26, 61, 66, 73, 77, 91, 93], "instr_measure_faulti": [1, 7], "replac": [1, 2, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 27, 28, 34, 36, 71, 86], "keyword": [1, 7, 12, 14, 18, 19, 26, 27, 28], "name": [1, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 49, 52, 54, 55, 56, 57, 59, 61, 65, 66, 71, 72, 73, 74, 84, 85, 86, 88, 89, 90, 92, 93], "param": [1, 7, 18], "program_kwarg": [1, 7], "physicalinstruct": [1, 7, 14, 18, 19, 26, 27, 61, 73, 74, 77, 91, 93], "c": [1, 4, 5, 6, 7, 8, 10, 13, 15, 21, 24, 25, 30, 49, 51, 61, 62, 69, 72, 82, 84, 86, 87], "q": [1, 7, 23, 27, 56, 71, 74, 85, 86], "_noise_model": [1, 7, 16], "classic": [1, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 24, 25, 26, 27, 28, 29, 30, 34, 35, 36, 51, 72, 73, 74, 75, 77, 80, 85, 86, 87, 88, 89, 90, 92, 93], "classicalcodingfactori": [1, 8, 9, 13, 61, 77], "create_coded_item": [1, 9, 61], "classmethod": [1, 9, 26, 29, 30, 31, 32, 33, 67], "add_subcompon": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 34, 35, 36, 61, 72, 74, 88, 93], "clifford": [1, 7, 44, 49, 53, 59, 61, 82, 92], "correctli": [1, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 74], "assign": [1, 2, 7, 17, 18, 22, 23, 24, 25, 26, 27, 28, 36, 38, 39, 54, 56, 60, 68, 74, 85, 86, 89, 92], "attribut": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 41, 42, 44, 47, 51, 52, 54, 57, 59, 71, 74, 84, 86, 88, 90, 92], "give": [1, 2, 4, 5, 7, 18, 19, 22, 23, 24, 25, 26, 27, 28, 35, 36, 38, 39, 44, 56, 71, 74, 84, 85, 86, 89, 92, 93], "more": [1, 2, 7, 13, 14, 17, 18, 22, 23, 24, 25, 26, 27, 28, 37, 39, 42, 44, 47, 49, 51, 52, 56, 57, 59, 65, 66, 68, 73, 74, 84, 85, 86, 87, 88, 89, 90, 92, 93], "target": [1, 2, 14, 18, 44, 56, 58, 59, 91, 92], "padded_matrix": [1, 7, 49], "than": [1, 4, 5, 7, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 33, 37, 38, 39, 42, 44, 47, 50, 51, 52, 55, 56, 57, 59, 63, 65, 66, 73, 84, 86, 88, 89, 90], "would": [1, 2, 7, 8, 10, 13, 15, 16, 18, 23, 26, 62, 71, 73, 89, 90, 92], "argument": [1, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 27, 28, 34, 36, 52, 62, 65, 71, 74, 84, 90, 91], "delta_tim": [1, 7, 8, 9, 10, 13, 15, 17, 18, 26, 29, 31, 33, 61, 73], "get": [1, 7, 10, 14, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 30, 35, 36, 38, 39, 41, 51, 54, 56, 60, 61, 62, 63, 65, 68, 71, 74, 85, 86, 87, 89, 90, 91], "set": [1, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 42, 43, 44, 47, 49, 51, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 71, 72, 74, 84, 85, 86, 87, 88, 89, 90, 91, 92], "_position_us": [1, 7], "get_position_empti": [1, 7, 17, 18, 61], "is_empti": [1, 7, 17, 61], "access": [1, 2, 4, 5, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 51, 55, 65, 84, 86, 88, 89, 90, 92], "evtype_outputreadi": [1, 7], "its": [1, 2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 42, 44, 47, 49, 51, 52, 54, 56, 57, 58, 59, 62, 65, 66, 72, 73, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "evtype_output": [1, 7, 10, 12], "used_posit": [1, 7, 17, 18, 61], "num_used_posit": [1, 7], "qsourc": [1, 2, 22, 24, 25, 28, 61, 72, 75, 77, 86, 88, 93], "omit": [1, 7, 22, 24, 25, 44, 72], "puls": [1, 7, 16, 20], "case": [1, 2, 6, 7, 8, 10, 12, 13, 14, 15, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 33, 34, 36, 38, 39, 49, 50, 54, 55, 56, 65, 68, 71, 74, 84, 85, 86, 88, 89, 90, 91, 92], "statesampl": [1, 20, 22, 23, 24, 25, 56, 60, 61, 71, 72, 82, 86, 88, 93], "vacuum": [1, 7, 52, 85], "none": [1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 68, 71, 72, 73, 74, 84, 85, 86, 88, 89, 90, 92, 93], "intern": [1, 5, 7, 12, 18, 20, 49, 56, 60, 61, 62, 86, 88, 90, 93], "doubl": [1, 7, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 38, 39, 42, 43, 44, 47, 48, 52, 57, 59, 60, 64, 74, 84], "tableau": [1, 7, 61], "result": [1, 2, 5, 6, 7, 8, 13, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 52, 56, 57, 58, 59, 61, 65, 72, 73, 74, 78, 85, 86, 87, 89, 90, 91, 92, 93], "been": [1, 4, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 51, 54, 55, 56, 68, 71, 74, 84, 86, 88, 89, 90], "reduc": [1, 5, 7, 19, 26, 27, 28, 42, 43, 44, 47, 48, 52, 56, 57, 58, 59, 60, 92], "certain": [1, 5, 7, 23, 71, 84, 93], "correct": [1, 2, 4, 5, 19, 22, 23, 24, 25, 26, 27, 28, 38, 39, 44, 52, 58, 62, 64, 71, 72, 73, 86, 87, 89, 90, 91, 92, 93], "select": [1, 7, 8, 10, 13, 15, 19, 42, 44, 47, 52, 56, 57, 59, 66, 69, 86, 90, 91], "rang": [1, 7, 23, 25, 26, 27, 42, 44, 47, 52, 57, 59, 71, 72, 73, 74, 84, 92, 93], "restor": [1, 59], "log": [1, 3, 12, 42, 44, 47, 51, 52, 54, 57, 59, 66], "gslcrepr": [1, 7, 44, 45, 51, 53, 61, 82, 92], "sim_run": [1, 7, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 35, 61, 65, 67, 68, 71, 72, 73, 74, 75, 83, 85, 86, 88, 89, 90, 91, 93], "count": [1, 16, 38, 42, 44, 47, 52, 54, 57, 59, 61, 84], "wai": [1, 4, 5, 7, 8, 10, 12, 13, 14, 15, 18, 21, 26, 34, 35, 36, 41, 49, 51, 52, 56, 65, 73, 78, 84, 85, 86, 88, 89, 90, 92], "qstate": [1, 7, 23, 27, 42, 44, 47, 51, 52, 55, 56, 57, 59, 61, 66, 71, 74, 82, 85, 90, 92], "actual": [1, 7, 13, 16, 17, 27, 54, 55, 56, 68, 74, 84, 86, 90], "describ": [1, 2, 3, 7, 12, 14, 23, 27, 38, 51, 71, 74, 78, 85, 86, 87, 88, 89, 90, 92], "direct": [1, 14, 18, 21, 22, 23, 24, 25, 26, 27, 28, 34, 38, 39, 85, 86, 88, 89, 93], "notion": [1, 7], "respons": [1, 5, 7, 17, 23, 26, 27, 39, 71, 73, 74, 90], "share": [1, 2, 6, 7, 12, 19, 20, 22, 25, 26, 27, 28, 33, 42, 44, 47, 51, 54, 55, 56, 57, 59, 72, 85, 86, 87, 90, 91, 92], "subclass": [1, 9, 10, 14, 19, 21, 26, 27, 29, 30, 31, 32, 33, 37, 38, 51, 52, 53, 54, 58, 73, 78, 84, 86, 88, 90, 91, 92], "five": [1, 5, 7, 51], "formal": [1, 5, 14, 17, 18, 24, 26, 41, 42, 43, 44, 47, 48, 49, 55, 56, 57, 59, 60, 61, 69, 73, 86, 90], "ketrepr": [1, 7, 47, 51, 53, 56, 61, 82, 92], "densedmrepr": [1, 7, 42, 51, 53, 60, 61, 82, 92], "sparsedmrepr": [1, 7, 51, 53, 57, 61, 82, 92], "do": [1, 2, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 34, 36, 41, 51, 54, 56, 58, 62, 65, 71, 72, 84, 85, 86, 89, 90, 91, 92, 93], "dmrepr": [1, 7, 42, 57, 61, 82], "immut": [1, 7, 8, 10, 13, 15, 17, 18, 49, 52, 62], "permit": [1, 5], "modifi": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 42, 44, 47, 52, 54, 56, 57, 58, 59, 62, 86, 88, 89], "flag": [1, 7, 16, 17, 22, 23, 24, 25, 26, 27, 28, 38, 39], "info": [1, 7, 27, 66, 84], "about": [1, 6, 7, 49, 85, 86, 90, 93], "supports_mixed_st": [1, 42, 44, 47, 52, 57, 59, 61], "supports_univers": [1, 42, 44, 47, 52, 57, 59, 61], "tensor": [1, 42, 44, 47, 49, 52, 57, 58, 59, 61], "num_qubit": [1, 7, 18, 19, 26, 27, 28, 41, 42, 44, 47, 49, 52, 54, 56, 57, 59, 60, 61, 73, 74, 91, 92], "indices_of": [1, 7, 54, 61], "convert_to": [1, 7, 52, 61, 82], "convers": [1, 7, 8, 33, 51, 52, 53, 56], "regist": [1, 5, 7, 17, 22, 23, 24, 25, 26, 27, 28, 38, 39, 52, 66, 68, 74, 84, 86, 90], "refactor": [1, 2, 7], "qformal": [1, 7, 23, 27, 56, 60, 61, 71, 74, 82, 86, 88, 89, 90, 91, 92], "previous": [1, 7, 86], "enum": [1, 7, 22, 23, 24, 25, 26, 27, 28, 38, 39], "extra": [1, 2, 3, 4, 7, 8, 10, 11, 13, 15, 18, 20, 22, 41, 51, 62, 90], "specii": [1, 7], "assign_qst": [1, 7, 23, 54, 56, 61, 71, 82, 86, 90, 92], "given": [1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 66, 68, 72, 84, 85, 86, 90, 92], "well": [1, 5, 6, 7, 22, 23, 24, 25, 26, 27, 28, 38, 39, 41, 49, 84, 85, 86, 90], "sampler": [1, 60, 86], "keep": [1, 2, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 34, 36, 38, 43, 48, 56, 58, 62, 73, 90, 92], "arrai": [1, 7, 14, 18, 24, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 57, 58, 59, 60, 85, 92], "all": [1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 49, 51, 52, 54, 56, 57, 59, 60, 62, 65, 66, 68, 71, 72, 73, 74, 84, 86, 87, 88, 89, 90, 91, 92, 93], "leav": [1, 7, 22, 23, 24, 25, 26, 27, 28, 38, 39, 60, 84, 92], "state_sampl": [1, 7, 20, 22, 24, 25, 61, 72, 82, 86], "sampl": [1, 7, 8, 10, 13, 15, 20, 23, 33, 42, 44, 47, 48, 51, 52, 53, 56, 59, 60, 61, 71, 82, 86, 92], "renam": [1, 7, 26, 73], "former": [1, 7, 90], "decid": [1, 27, 51, 74], "against": [1, 5], "0a6": 1, "coverag": [1, 2], "report": [1, 2, 3, 6, 17, 18, 69, 90], "makefil": 1, "achiev": [1, 5, 27, 74, 90], "without": [1, 2, 5, 7, 8, 10, 13, 15, 18, 19, 20, 21, 22, 25, 26, 27, 28, 58, 68, 72, 84, 86, 87, 88, 90, 91, 92], "rebuild": 1, "coveragerc": 1, "exclud": [1, 5, 60], "code": [1, 4, 5, 7, 8, 9, 13, 22, 24, 25, 27, 43, 49, 56, 58, 66, 67, 68, 70, 72, 74, 75, 85], "we": [1, 2, 3, 7, 9, 14, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 35, 38, 39, 51, 56, 63, 71, 72, 73, 74, 85, 86, 87, 88, 89, 90, 91, 92, 93], "expect": [1, 7, 17, 18, 22, 23, 26, 27, 39, 52, 56, 66, 71, 73, 74, 84, 86, 90, 91], "run": [1, 2, 3, 4, 11, 14, 18, 19, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 40, 43, 49, 56, 58, 61, 62, 66, 67, 68, 71, 72, 73, 74, 75, 84, 86, 87, 88, 89, 91], "dmstate": [1, 7], "ketstat": [1, 7, 43, 48, 49, 56, 58, 61, 82, 86, 88], "sparsedmst": [1, 7, 57], "stabstat": [1, 7], "gslcstate": [1, 7], "calcul": [1, 7, 11, 18, 20, 26, 41, 42, 43, 44, 47, 48, 52, 54, 56, 57, 59, 73], "remain": [1, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 34, 36, 44, 48, 56, 72, 84, 88, 90], "inspect": [1, 2, 7, 17, 18, 84, 90, 92], "like": [1, 2, 4, 5, 7, 16, 23, 24, 25, 39, 57, 63, 71, 72, 86, 88], "ket": [1, 7, 26, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 64, 73, 90, 92], "stab": [1, 7, 51, 56, 61, 92], "convert_qsrepr": [1, 7], "convert_qrepr": [1, 7, 51, 61, 82], "stabil": [1, 14, 24, 41, 53, 55, 56, 59, 61, 92], "get_formalism_of_qst": [1, 7], "eventtyp": [1, 14, 17, 18, 22, 23, 24, 25, 26, 27, 28, 38, 39, 40, 65, 69, 90], "evtype_busy_toggl": [1, 17, 61], "evtype_in_use_toggl": [1, 17, 61], "memoryposit": [1, 7, 17, 18, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 77, 86], "schedul": [1, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 38, 39, 65, 68, 71, 72, 74, 84, 85, 86], "busi": [1, 2, 5, 7, 17, 18, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 61, 72, 91], "respect": [1, 2, 4, 5, 7, 14, 26, 35, 44, 56, 73, 84, 85, 86, 90], "event": [1, 5, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 38, 39, 40, 65, 67, 68, 69, 72, 74, 85, 86, 87, 88, 89, 92, 93], "disabl": [1, 7, 22, 23, 24, 25, 26, 27, 28, 38, 39, 42, 44, 47, 52, 57, 59], "busy_event_en": [1, 17, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61], "in_use_event_en": [1, 17, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61], "fals": [1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 47, 48, 49, 51, 52, 54, 56, 57, 58, 59, 60, 62, 66, 68, 72, 73, 74, 84, 89, 91, 92, 93], "await_mempos_busy_toggl": [1, 7, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61], "await_mempos_in_use_toggl": [1, 7, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61], "eventexpress": [1, 7, 18, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 40, 65, 69, 71, 72, 73, 74, 89, 90, 93], "wait": [1, 7, 8, 10, 12, 13, 15, 17, 18, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 40, 65, 71, 72, 73, 74, 84, 85, 86, 88, 89, 93], "unittest": [1, 4], "integr": [1, 4, 6, 7, 22, 24, 25, 68, 72], "facilit": [1, 7, 13, 15], "util": [1, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 43, 45, 48, 58, 61, 69, 73, 93], "collect": [1, 5, 13, 15, 23, 24, 25, 26, 27, 38, 39, 45, 51, 56, 58, 60, 65, 66, 67, 72, 73, 84, 93], "basic": [1, 19, 25, 72, 84, 87, 90, 91], "html": [1, 2, 4, 66], "sophist": 1, "cach": [1, 14, 43, 49, 56, 59, 63], "individu": [1, 5, 7, 8, 10, 16, 22, 23, 24, 25, 26, 27, 28, 38, 39, 88], "command": [1, 3, 4, 14, 91, 93], "advanc": [1, 86, 88, 89, 90, 91, 92, 93], "nice": [1, 26, 73], "badg": 1, "netsquid_coverag": 1, "enabl": [1, 5, 18, 22, 23, 24, 25, 26, 27, 28, 38, 39, 49], "line": [1, 2, 4, 26, 73, 90], "trace": [1, 43, 48, 56, 58, 66], "runtim": [1, 18, 23, 62, 71], "averag": [1, 24, 25, 51, 72, 85, 93], "check_dirty_vers": 1, "warn": [1, 5, 7, 66], "potenti": [1, 54], "dirti": 1, "due": [1, 3, 5, 18, 26, 33, 56, 60, 73, 86, 89, 90], "profil": [1, 2], "netsquid_build_cor": [1, 4], "core": [1, 4, 6, 23, 27, 71, 74, 84], "retriev": [1, 7, 8, 10, 13, 15, 17, 18, 22, 23, 24, 25, 26, 27, 28, 35, 38, 39, 66, 72, 84, 86, 90], "trigger": [1, 7, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 61, 65, 67, 72, 74, 84, 85, 86, 88, 89, 90, 93], "were": [1, 7, 8, 10, 13, 15, 17, 18, 27, 35, 48, 59, 60, 68, 74, 84, 90, 93], "sent": [1, 5, 7, 8, 10, 12, 13, 15, 22, 23, 24, 25, 26, 27, 28, 38, 39, 55, 68, 73, 74, 84, 85, 86, 89], "same": [1, 2, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 38, 39, 42, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 65, 71, 73, 74, 78, 84, 85, 86, 87, 89, 90, 91, 93], "get_signal_by_ev": [1, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 74], "alreadi": [1, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 49, 51, 55, 56, 62, 68, 72, 74, 84, 89, 92], "newer": 1, "If": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 68, 72, 74, 84, 85, 86, 89, 90, 91, 92, 93], "most": [1, 2, 7, 19, 22, 23, 24, 25, 26, 27, 28, 38, 39, 55, 57, 66, 70, 73, 87, 91], "recent": [1, 22, 23, 24, 25, 26, 27, 28, 38, 39, 49, 63, 66, 91], "connect": [1, 5, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 38, 39, 61, 69, 72, 73, 74, 75, 77, 80, 85, 86, 87, 89, 93], "network": [1, 5, 10, 12, 16, 20, 22, 23, 24, 25, 26, 27, 28, 36, 38, 55, 61, 69, 70, 71, 72, 73, 74, 75, 77, 80, 85, 87, 88, 89, 90, 92], "wouldn": [1, 23, 71], "alwai": [1, 2, 7, 12, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 37, 39, 44, 46, 52, 60, 68, 84, 86, 90], "v0": [1, 7], "boolean": [1, 84], "exit": 1, "ensemble_form": [1, 51, 61], "purestate_form": [1, 51, 61], "universal_form": [1, 51, 61], "definit": [1, 26, 51, 52, 53, 54, 73], "them": [1, 2, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 36, 37, 38, 39, 41, 49, 51, 56, 62, 65, 72, 73, 77, 84, 85, 86, 87, 88, 89, 90], "convert_qst": [1, 7, 51, 61, 82], "multi_oper": [1, 7, 42, 44, 47, 52, 56, 57, 59, 61, 82, 92], "apply_pauli_nois": [1, 56, 61, 82, 92], "sparsedm": [1, 7, 51, 61, 92], "dens": [1, 7, 42, 49, 50, 51, 53, 58], "csrmatrix": 1, "__repr__": [1, 7], "__rshift__": 1, "rais": [1, 2, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 66, 72, 73, 74, 84], "valueerror": [1, 2, 12, 14, 15, 16, 19, 20, 22, 23, 24, 25, 26, 27, 28, 33, 38, 39, 42, 43, 44, 47, 48, 50, 52, 54, 56, 57, 58, 59, 62, 72, 73, 74], "_emit": 1, "_generate_new_puls": 1, "_set_qubit_port_map": 1, "expos": [1, 88], "cpdef": 1, "cdef": 1, "likewis": 1, "_send_delayed_messag": 1, "_set_port_model": 1, "ident": [1, 5, 7, 23, 27, 41, 43, 46, 56, 58, 71, 74], "store": [1, 4, 7, 12, 13, 14, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 38, 39, 49, 51, 57, 62, 63, 65, 72, 73, 74, 85, 86, 90, 91, 93], "format": [1, 2, 5, 7, 8, 20, 22, 23, 24, 25, 26, 27, 28, 38, 39, 51, 56, 57, 58, 59, 66, 70, 72, 73, 75, 84, 89], "move": [1, 7, 15, 35, 87], "amplitude_dampen": [1, 56, 61, 82, 92], "dmutil": [1, 7, 61, 82], "ketutil": [1, 7, 61, 82], "ket2sparsedm": [1, 48, 61, 82], "operate_sparse_dm": [1, 50, 61, 82], "multi_operate_sparse_dm": [1, 50, 61, 82], "opmath": [1, 7, 61, 82], "reorder_sparse_dm": [1, 58, 61, 82], "sparse_partialtrac": [1, 58, 61, 82], "reduced_sparse_dm": [1, 58, 61, 82], "dm2sparsedm": [1, 58, 61, 82], "sourcestatu": [1, 20, 22, 24, 25, 61, 72, 77, 86, 88, 93], "gslc": [1, 7, 41, 44, 45, 51, 53, 61, 92], "gslcutil": [1, 61, 82], "stab2gslc": [1, 53, 61, 82], "gslc2ket": [1, 45, 53, 61, 82], "gslc2dm": [1, 45, 61, 82], "gslc2stab": [1, 53, 61, 82], "quantumprocessor": [1, 14, 18, 19, 22, 23, 24, 25, 26, 27, 28, 35, 38, 39, 61, 72, 73, 74, 77, 91, 93], "add_composite_instruct": [1, 18, 61], "compil": [1, 2, 4, 6, 18], "compos": [1, 16, 18, 84, 85, 86, 88], "lower": [1, 2, 7, 18, 25, 41, 72], "physic": [1, 5, 7, 10, 12, 14, 16, 17, 18, 19, 20, 26, 27, 28, 38, 52, 73, 74, 77, 78, 85, 86, 87, 89, 92, 93], "appli": [1, 2, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26, 27, 28, 29, 31, 32, 33, 42, 44, 47, 50, 51, 52, 56, 57, 59, 61, 66, 72, 73, 74, 86, 90, 91, 93], "program": [1, 5, 14, 18, 19, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 72, 73, 74, 92, 93], "execut": [1, 7, 14, 18, 19, 22, 23, 24, 25, 26, 27, 28, 32, 37, 38, 39, 61, 71, 73, 74, 89, 91, 93], "qproccesor": [1, 7], "composit": [1, 12, 18, 35, 36, 77, 80, 84, 85, 86, 88, 90], "hardcod": [1, 18], "index": [1, 2, 3, 4, 8, 10, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 33, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 52, 54, 56, 57, 58, 59, 61, 86], "outsid": [1, 5, 12, 16, 18, 42, 44, 47, 52, 57, 59, 84], "scope": [1, 5, 18, 84], "ket2stabil": [1, 7], "handl": [1, 14, 20, 22, 27, 39, 40, 49, 65, 66, 72, 74, 78, 84, 85, 86, 89, 91], "vector": [1, 7, 14, 26, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 59, 61, 64, 73, 87, 90, 92], "system": [1, 3, 4, 5, 16, 26, 27, 56, 70, 73, 87, 90, 93], "delai": [1, 7, 8, 10, 11, 13, 15, 16, 20, 22, 23, 24, 25, 27, 28, 30, 32, 35, 56, 61, 69, 71, 72, 74, 75, 84, 85, 86, 88, 89, 90, 91, 92, 93], "dead": [1, 16, 27], "gatedquantumdetector": [1, 7, 16, 61, 77], "overview": [1, 7, 10, 17, 20, 27, 40, 61, 74, 77, 78, 82, 92], "possibli": [1, 10], "break": [1, 6, 22, 23, 71, 72, 89, 93], "execute_program": [1, 7, 18, 19, 26, 27, 61, 73, 74, 91, 93], "evenexpress": [1, 7], "yield": [1, 18, 19, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 71, 72, 73, 74, 84, 85, 89, 91, 93], "my_quantum_processor": 1, "my_quantum_program": 1, "To": [1, 2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 34, 35, 36, 37, 38, 39, 42, 44, 47, 49, 51, 56, 59, 66, 72, 73, 74, 78, 84, 85, 86, 89, 90, 91, 92], "sequence_end_tim": [1, 18, 61], "execute_instruct": [1, 7, 14, 18, 22, 61, 72, 91, 93], "third": [1, 5, 7], "custom": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 73, 85, 91, 92], "submodul": [1, 7], "our": [1, 2, 23, 24, 26, 27, 57, 59, 71, 72, 73, 74, 85, 86, 88, 89, 90, 91, 92], "fork": 1, "napoleon": 1, "docstr": [1, 2, 61], "head": 1, "automat": [1, 2, 3, 4, 5, 7, 11, 16, 21, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 48, 52, 56, 61, 74, 86, 88, 90, 92], "append": [1, 2, 7, 8, 10, 15, 20, 23, 26, 27, 42, 44, 47, 52, 54, 56, 57, 59, 65, 71, 73, 74, 84, 92], "portion": 1, "after": [1, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 23, 24, 25, 27, 39, 42, 44, 47, 48, 52, 54, 56, 57, 58, 59, 65, 68, 71, 72, 74, 84, 86, 88, 89, 90, 92, 93], "setup": [1, 2, 7, 21, 22, 23, 24, 25, 26, 27, 28, 71, 72, 73, 74, 75, 85, 86, 88, 89, 90, 91, 93], "request": [1, 2, 5, 6, 7, 18, 19, 23, 26, 27, 28, 39, 63, 71, 74], "serviceprotocol": [1, 7, 27, 61, 74, 81], "handler": [1, 7, 10, 11, 12, 18, 20, 21, 23, 27, 39, 65, 67, 68, 71, 74, 84, 86, 90], "enumer": [1, 2, 7, 86], "relat": [1, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 51, 56, 84, 90], "repeat": [1, 7, 19, 26, 27, 28, 61, 69, 70, 74, 79, 85, 86, 91, 93], "chain": [1, 7, 26, 69, 70], "dictionari": [1, 7, 16, 18, 19, 23, 24, 26, 27, 28, 46, 51, 57, 63, 66, 71, 74, 86, 91], "bell_stat": [1, 46, 61, 82], "lazi": [1, 7, 19, 26, 27, 28], "true": [1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 47, 48, 49, 52, 54, 56, 57, 58, 59, 60, 62, 65, 66, 68, 72, 73, 74, 84, 85, 86, 88, 89, 90, 91, 92, 93], "onc": [1, 2, 7, 8, 10, 13, 15, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 33, 37, 38, 39, 65, 66, 71, 72, 73, 74, 84, 85, 89, 90, 91, 93], "track": [1, 7, 17, 26, 51, 73, 85, 92], "fake": [1, 7], "nois": [1, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 29, 33, 51, 56, 72, 73, 74, 85, 86, 90, 91], "extens": [1, 2, 6, 61], "avail": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 15, 16, 17, 18, 22, 23, 25, 26, 27, 28, 37, 39, 40, 42, 44, 47, 51, 52, 57, 59, 69, 72, 73, 74, 91, 92, 93], "remove_nod": [1, 7, 35, 61], "remove_connect": [1, 7, 35, 61], "faster": [1, 7, 23, 51, 59, 69, 70, 89], "show": [1, 2, 25, 26, 27, 28, 62, 66, 72, 73, 74, 86, 89, 90, 92, 93], "improv": [1, 5, 24, 26, 72, 73, 86, 88, 90], "simpl": [1, 17, 23, 26, 27, 39, 69, 70, 71, 73, 89, 90], "abstract": [1, 7, 9, 14, 21, 23, 27, 29, 30, 31, 32, 33, 34, 37, 38, 51, 52, 69, 70, 74, 86, 91, 92], "entangl": [1, 6, 7, 14, 16, 20, 22, 23, 24, 25, 26, 27, 28, 51, 70, 71, 73, 74, 75, 85, 86, 87, 89, 90, 91, 92, 93], "attempt": [1, 3, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 52, 53, 71, 74, 91, 92], "magic": [1, 23, 71], "egpservic": 1, "egservic": [1, 23, 27, 71, 74], "queue": [1, 23, 27, 71, 74], "egprotocol": [1, 23, 27, 71, 74], "dimension": 1, "ndarrai": [1, 42, 43, 44, 45, 47, 48, 50, 52, 54, 57, 58, 59, 64], "incorrect": [1, 12, 19, 26, 27, 28, 56, 62], "size": [1, 7, 20, 56, 63, 85, 90], "two": [1, 2, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 47, 49, 52, 54, 56, 57, 58, 59, 60, 62, 65, 71, 72, 73, 74, 75, 85, 86, 87, 88, 89, 90, 92, 93], "left": [1, 26, 35, 41, 46, 49, 54, 58, 73, 89], "special": [1, 2, 5, 7, 13, 14, 88], "previou": [1, 7, 17, 18, 22, 23, 24, 25, 26, 27, 28, 38, 39, 65, 67, 86, 88, 89, 90, 91, 93], "order": [1, 2, 5, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 23, 26, 27, 32, 42, 43, 44, 45, 47, 48, 49, 52, 54, 56, 57, 58, 59, 65, 66, 68, 71, 73, 74, 84, 85, 86, 89, 92], "combine_qubit": [1, 7, 56, 61, 82, 92], "subcompon": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 34, 35, 36, 61, 72, 73, 74, 75, 85, 86, 88, 93], "parent": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 66, 78, 86, 88], "sibl": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36], "unlink": 1, "componenterror": [1, 12, 61, 77], "componenthierarchyerror": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 61, 77], "except": [1, 2, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26, 27, 28, 29, 32, 35, 39, 52, 54, 56, 60, 62, 84, 86, 92], "anoth": [1, 5, 7, 10, 12, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 42, 44, 47, 48, 51, 52, 54, 55, 57, 59, 60, 72, 74, 85, 86, 87, 88, 91, 92, 93], "graph": [1, 7, 44, 45, 53, 61], "usual": [1, 2, 17, 18, 23, 51, 71, 89], "similar": [1, 5, 7, 17, 18, 19, 86, 91], "main": [1, 7, 23, 26, 27, 57, 71, 73, 74, 85, 89, 93], "gslctool": [1, 51, 61, 82], "hold": [1, 2, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 25, 26, 27, 28, 34, 36, 41, 51, 55, 72, 73, 84, 86, 88, 89, 92, 93], "And": [1, 27, 41, 74, 91], "edg": [1, 44, 51, 61], "here": [1, 2, 7, 12, 22, 23, 24, 25, 26, 27, 28, 38, 39, 51, 68, 70, 71, 75, 86, 89, 91, 92, 93], "space": [1, 2, 15, 42, 43, 44, 47, 52, 56, 57, 58, 59], "ndlog": 1, "d": [1, 26, 51, 62, 69, 73], "amount": [1, 5, 22, 23, 24, 25, 26, 27, 28, 35, 38, 39, 41, 51, 89], "On": [1, 27, 74, 86, 93], "group": [1, 41, 59, 60], "contain": [1, 2, 4, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 33, 34, 36, 41, 42, 44, 47, 51, 52, 54, 57, 59, 62, 72, 74, 79, 82, 84, 85, 86, 88, 92], "cz": [1, 18, 41, 44, 49, 56, 59, 61, 82, 92], "swap": [1, 7, 14, 18, 25, 26, 27, 41, 44, 49, 51, 59, 61, 72, 73, 74, 82, 88, 92], "operatior": 1, "made": [1, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 74, 86, 88, 92], "product": [1, 5, 42, 44, 47, 48, 49, 52, 57, 58, 59], "abov": [1, 2, 3, 4, 5, 22, 50, 56, 60, 65, 72, 85, 86, 88, 90, 91, 92], "recogn": [1, 2, 8, 10, 11, 12, 13, 15, 16, 17, 20, 21], "quicker": [1, 23, 41, 71], "look": [1, 2, 7, 25, 27, 72, 74, 85], "active_instruct": [1, 7, 18, 61], "processor": [1, 14, 18, 19, 22, 23, 24, 25, 26, 27, 28, 38, 39, 69, 72, 73, 74, 77, 86, 87, 88, 89, 90, 93], "measure_faulti": [1, 14, 17, 18, 61], "imperfect": [1, 7, 91], "project": [1, 2, 7, 14, 16, 33, 49, 56, 85, 87, 92], "imeasurefaulti": [1, 7, 14, 61, 77], "still": [1, 2, 3, 7, 8, 10, 13, 15, 16, 20, 22, 24, 25, 26, 27, 28, 37, 38, 39, 60, 62, 65, 74, 84, 90, 91], "limit": [1, 5, 22, 51, 63, 66, 72, 89, 90, 91], "might": [1, 5, 18, 56, 85, 91, 92], "slow": [1, 57], "to_basis_st": [1, 59, 61], "standard": [1, 4, 5, 7, 8, 10, 12, 13, 14, 15, 22, 23, 24, 25, 26, 27, 28, 30, 33, 36, 37, 39, 42, 47, 56, 57, 59, 73, 85, 86, 87, 90, 91, 92], "circuit": [1, 14, 41, 44, 51, 91, 92], "convert_st": [1, 60, 61], "leaf": [1, 60], "each": [1, 2, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 50, 51, 52, 54, 56, 57, 58, 59, 60, 62, 65, 71, 72, 73, 74, 84, 85, 86, 87, 90, 91, 92, 93], "handle_request": [1, 23, 27, 39, 61, 71, 74], "addit": [1, 2, 5, 7, 14, 16, 17, 18, 19, 20, 23, 26, 27, 28, 30, 36, 42, 47, 51, 57, 59, 65, 68, 71, 74], "id": [1, 7, 23, 27, 36, 40, 49, 61, 71, 74, 84, 90], "pdf": [1, 5], "start": [1, 2, 7, 11, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 56, 61, 66, 67, 71, 72, 73, 74, 75, 85, 86, 87, 89, 90, 92, 93], "self": [1, 2, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 34, 35, 36, 37, 38, 39, 41, 42, 44, 47, 52, 54, 57, 59, 60, 62, 63, 65, 71, 72, 73, 74, 84, 85, 86, 88, 89, 90, 91, 93], "conveni": [1, 2, 5, 7, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 36, 38, 39, 41, 42, 47, 48, 49, 57, 72, 73, 85, 86, 89, 90, 92], "nodeprotocol": [1, 7, 22, 24, 25, 26, 27, 28, 38, 39, 61, 72, 73, 74, 81, 85, 89, 93], "localprotocol": [1, 24, 25, 26, 37, 61, 72, 73, 81, 89], "print": [1, 7, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 35, 38, 39, 41, 43, 49, 51, 56, 57, 58, 60, 62, 65, 66, 67, 70, 72, 73, 74, 75, 84, 85, 86, 88, 89, 90, 91, 92, 93], "foo": [1, 2], "versu": 1, "k": [1, 22, 24, 25, 26, 41, 44, 49, 59, 61, 62, 72, 73, 82, 86, 88, 93], "gate": [1, 14, 15, 16, 18, 41, 44, 49, 51, 56, 59, 85, 86, 91, 92], "servic": [1, 7, 23, 27, 39, 71, 74], "layer": [1, 7, 23, 27, 69, 70, 86], "subpackag": [1, 66, 82, 92], "input": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 43, 48, 50, 52, 58, 59, 62, 72, 73, 74, 85, 86, 88, 89, 93], "supercompon": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 61, 88], "qubit_map": [1, 7, 18, 19, 26, 27, 28, 73, 74, 91], "quantumprogram": [1, 14, 18, 19, 26, 27, 28, 61, 73, 74, 77, 91, 93], "constructor": [1, 7, 11, 84, 85, 86], "abl": [1, 18, 22, 23, 24, 25, 26, 27, 28, 35, 38, 39, 72, 74, 88], "concaten": [1, 19, 26, 29, 30, 31, 32, 33, 60, 78, 91], "noth": [1, 5, 7, 12, 34, 51, 55, 89], "came": [1, 12], "fibr": [1, 7, 26, 30, 33, 73, 86], "purif": [1, 24, 25, 69, 70], "stage": 1, "pipelin": [1, 2, 4], "pypi": [1, 3, 4], "instal": [1, 6, 7, 69, 85, 93], "pip": [1, 3, 4], "pass": [1, 2, 7, 9, 12, 14, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 62, 65, 68, 74, 84, 86, 89, 90], "unit": [1, 2, 4, 5, 14, 33, 49, 51, 68, 85, 87, 90], "bump": [1, 2], "minor": [1, 2, 5], "commit": [1, 2], "ahead": [1, 84], "dev4": [1, 2], "tabl": [1, 7, 21, 85], "content": [1, 7, 39], "learn": [1, 7, 70, 86, 88, 89, 90, 91, 92, 93], "goal": [1, 7, 86, 88, 89, 90, 91, 92, 93], "tutori": [1, 6, 22, 25, 26, 69, 72, 73, 75, 85, 86, 88, 89, 90, 91, 92, 93], "section": [1, 2, 4, 7, 8, 10, 11, 12, 13, 15, 16, 17, 20, 21, 25, 51, 59, 61, 72, 85, 86, 87, 88, 89, 90, 91, 92, 93], "exist": [1, 2, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 62, 68, 77, 84, 86, 92], "dataprotocol": [1, 7], "datanodeprotocol": [1, 7, 37, 61, 81], "constrainedmapview": [1, 7, 35, 61, 62, 83], "filter": [1, 7, 12, 24, 25, 61, 62, 66, 72, 79, 84], "valueconstraint": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 61, 62, 83], "filter_by_typ": [1, 7, 61, 62], "everyth": [1, 7], "out": [1, 5, 7, 8, 10, 12, 13, 14, 15, 18, 19, 26, 27, 28, 43, 48, 56, 58, 60, 62, 70, 86, 93], "minimum": [1, 27, 32, 51, 74], "scipi": [1, 7, 48, 49, 50, 57, 58, 69], "panda": [1, 7, 24, 25, 26, 28, 65, 72, 73, 93], "header": [1, 4, 8, 10, 13, 15, 24, 27, 35, 74, 86], "discov": [1, 68], "incompat": [1, 54, 92], "md": [1, 2, 3, 6], "build_pi": 1, "setuptool": 1, "overriden": [1, 2], "prepend": [1, 26, 42, 44, 47, 52, 54, 57, 59, 60, 73], "comment": [1, 2, 7], "licens": [1, 2, 4, 6, 7, 69], "further": [1, 5, 7, 68, 84, 86, 88, 90], "autom": [1, 86], "deploy": 1, "stabl": [1, 2, 4], "directori": [1, 2, 4, 6, 70], "symlink": 1, "notify_all_": [1, 7], "contrast": [1, 7, 89], "notify_next_": [1, 7], "ensur": [1, 2, 5, 7, 8, 10, 13, 15, 26, 27, 56, 64, 66, 73, 74, 84, 89, 90, 92], "minim": [1, 2, 5, 7, 93], "docker": [1, 2], "imag": 1, "dagger": [1, 7, 14, 17, 18, 41, 48, 50, 56, 61, 82], "ket2dm": [1, 7, 48, 61, 82], "reduced_dm": [1, 7, 18, 42, 43, 44, 45, 47, 48, 52, 54, 56, 57, 58, 59, 61, 82, 85, 92], "partial_trac": [1, 7], "reorder_ket": [1, 7, 48, 61, 82], "ket_fidel": [1, 7, 48, 61, 82], "avoid": [1, 2, 4, 5, 7, 22, 23, 24, 25, 26, 27, 28, 38, 39, 49, 60, 84, 86, 89], "full": [1, 5, 7, 27, 39, 59, 68, 69, 74, 75, 86, 87, 89, 90, 91], "initi": [1, 7, 11, 14, 20, 33, 42, 44, 47, 52, 55, 57, 58, 59, 60, 62, 68, 84, 86, 88, 92, 93], "topologi": [1, 7, 18, 21, 26, 61, 73, 91, 93], "doctest": [1, 92], "manual": [1, 5, 7, 16, 17, 19, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 54, 71, 86, 92, 93], "termin": [1, 2, 3], "verifi": [1, 2, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 52, 86], "record": [1, 5, 7, 18, 24, 25, 26, 28, 61, 67, 72, 73, 90, 93], "meta": [1, 7, 12, 14, 17, 18, 20, 24, 27, 61, 74, 86], "through": [1, 5, 7, 12, 15, 16, 18, 22, 23, 24, 25, 26, 27, 28, 30, 38, 39, 74, 75, 85, 86, 87], "instant": [1, 8, 10, 12, 13, 15, 16, 68, 84, 89, 90], "query_meta_": 1, "awaitcondit": [1, 7], "done": [1, 2, 7, 24, 25, 35, 37, 39, 51, 55, 65, 66, 72, 85, 86, 87, 89, 91, 92, 93], "await_program": [1, 7, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 72, 93], "await_sleep": [1, 7], "await_tim": [1, 7, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 71, 74, 89], "durat": [1, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 68, 73, 74, 85, 89, 90, 91, 93], "end_tim": [1, 16, 22, 23, 24, 25, 26, 27, 28, 38, 39, 68, 74, 84, 86, 90], "await_evexpr": 1, "await_ev": [1, 7], "statu": [1, 7, 11, 18, 20, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 67, 72, 86, 88, 93], "creation": [1, 7, 23, 71, 84], "invalid": [1, 5, 17, 18, 19, 26, 27, 28, 56], "patch": [1, 2, 6, 7], "instr_measure_bel": [1, 7, 14, 26, 61, 73, 77], "imeasur": [1, 7, 14, 61, 77], "option": [1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 62, 63, 65, 66, 68, 71, 72, 73, 74, 84, 85, 86, 89, 90, 93], "meas_oper": [1, 7, 14, 16, 17, 18, 27, 56, 74, 92], "overrid": [1, 2, 7, 14, 16, 17, 18, 19, 26, 27, 28, 38, 84], "imeasurebel": [1, 7, 14, 61, 77], "stabilis": [1, 49], "dimens": [1, 7, 42, 44, 47, 52, 57, 58, 59], "dismiss": [1, 7, 11, 18, 65, 84], "api": [1, 2, 40, 43, 56, 58, 90, 92], "npy_no_deprecated_api": 1, "npy_1_7_api_vers": 1, "strip": 1, "get_vers": 1, "loss": [1, 7, 8, 9, 10, 13, 15, 26, 29, 33, 55, 85, 86], "equat": [1, 14], "error": [1, 5, 7, 12, 14, 15, 16, 17, 18, 20, 21, 26, 27, 29, 31, 32, 33, 35, 39, 52, 54, 60, 62, 66, 68, 73, 74, 84, 86, 90, 91], "counterpart": 1, "error_oper": [1, 7, 26, 29, 31, 32, 33, 61, 73], "quantumerrormodel": [1, 7, 13, 15, 16, 17, 18, 20, 26, 27, 33, 61, 73, 78, 86], "classicalerrormodel": [1, 7, 8, 9, 13, 16, 18, 27, 29, 61, 78], "overridden": [1, 2, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 50], "noise_oper": [1, 7], "mempositionbusyerror": [1, 7, 17, 61, 77], "processorbusyerror": [1, 18, 61, 77, 91], "heavili": 1, "qrepeat": [1, 7], "snippet": [1, 2, 7, 27, 43, 49, 56, 58, 61, 67, 68], "entanglenod": [1, 7, 24, 25, 61, 72, 79], "purifi": [1, 7, 25, 61, 72, 79], "serv": [1, 5, 88], "ext_test": 1, "data": [1, 5, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 24, 25, 26, 27, 28, 36, 37, 42, 44, 47, 52, 57, 59, 61, 62, 65, 66, 67, 72, 73, 74, 86, 89, 93], "test_": [1, 2], "testint_": [1, 2], "invers": [1, 7, 26, 41, 49, 59, 73], "inttest": [1, 4], "express": [1, 2, 5, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 65, 71, 72, 74, 84, 86, 89, 93], "multicondit": 1, "first": [1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 37, 38, 39, 56, 58, 59, 60, 64, 68, 72, 73, 74, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "term": [1, 7, 51, 84, 85, 88, 90, 92], "second": [1, 2, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 27, 28, 34, 35, 36, 56, 58, 59, 61, 68, 83, 84, 85, 86, 89, 92], "ones": [1, 27, 51, 74, 87], "condit": [1, 7, 11, 14, 65, 84], "outcom": [1, 7, 14, 16, 17, 18, 19, 23, 26, 27, 71, 73, 74, 85, 86, 87, 91, 92], "datacollector": [1, 7, 24, 25, 26, 28, 61, 66, 72, 73, 83, 93], "entiti": [1, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 38, 39, 40, 65, 68, 69, 77, 80, 81, 85, 86, 88, 89, 90], "stamp": [1, 7, 65], "column": [1, 7, 26, 45, 47, 48, 57, 65, 73], "mutablemap": [1, 7], "get_data_funct": [1, 7, 61, 65], "metadata": [1, 7, 16, 17, 18, 27, 74], "__getitem__": [1, 7], "__setitem__": [1, 7], "__contains__": [1, 7], "__delitem__": [1, 7], "qerrormodel": [1, 7, 18, 61, 78, 86, 91], "lose_qubit": [1, 7, 26, 33, 61], "easier": [1, 7, 86, 88, 89], "own": [1, 2, 7, 12, 26, 49, 51, 56, 73, 78, 86, 88, 90], "lose": [1, 7, 26, 33], "worri": 1, "prob_item_lost": [1, 7], "apply_loss": [1, 7], "fibrelossmodel": [1, 7, 33, 61, 78, 86], "subprotocol": [1, 2, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 72, 73, 74, 89], "must": [1, 2, 4, 5, 7, 12, 14, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 35, 38, 39, 42, 44, 46, 47, 52, 56, 57, 58, 59, 60, 68, 72, 73, 74, 84, 86, 91], "start_subprotocol": [1, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 61, 72, 74, 89], "always_notify_": [1, 7], "mean": [1, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 34, 36, 38, 39, 44, 59, 68, 72, 73, 75, 84, 85, 86, 87, 90, 93], "incom": [1, 7, 16, 17, 18, 21, 22, 27, 74, 85, 86], "outgo": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 93], "besid": [1, 7, 84, 86, 87], "qin": [1, 7, 16, 17, 18, 86, 88], "always_notify_input": [1, 7], "output_meta": [1, 7, 16, 20, 27, 61, 74], "iswap": [1, 7, 14, 61, 77], "construct": [1, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 27, 28, 34, 36, 44, 49, 56, 60, 72, 84, 88, 92], "chosen": [1, 7, 26, 56, 73, 86, 92], "uniqu": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 38, 39, 42, 44, 47, 49, 51, 52, 54, 55, 57, 59, 66, 71, 73, 74, 84], "larg": [1, 7, 26, 51, 56, 57, 73], "sphinx": [1, 2, 4], "check_memory_usag": [1, 7, 61, 66, 83], "context": [1, 5, 7, 66, 67], "alloc": [1, 7, 66], "block": [1, 2, 7, 18, 66, 93], "complet": [1, 2, 14, 17, 18, 23, 24, 25, 27, 39, 41, 43, 48, 56, 58, 71, 72, 74, 79, 85, 86, 88, 92], "written": [1, 2, 5, 14, 19, 89], "sequenti": [1, 90, 91], "until": [1, 5, 7, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 52, 68, 71, 74, 84, 85, 89, 90, 93], "met": [1, 7, 84], "await_": [1, 7], "await_port_input": [1, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 72, 73, 74, 85, 89, 93], "await_sign": [1, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 72, 74, 89], "continu": [1, 4, 5, 7, 16, 22, 24, 25, 26, 28, 37, 38, 39, 54, 56, 73, 84, 85, 87, 90], "await_port_output": [1, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 89], "halt": 1, "arriv": [1, 8, 10, 13, 15, 16, 23, 27, 71, 74, 85, 86, 88, 89, 90, 93], "happen": [1, 84, 86, 89], "timedprotocol": [1, 7], "togeth": [1, 5, 7, 24, 25, 26, 27, 29, 30, 31, 32, 33, 41, 51, 56, 59, 60, 65, 72, 74, 85, 86, 87, 88], "consecut": [1, 7, 78], "multipli": [1, 7, 41, 58, 59, 78], "integ": [1, 7, 16, 20, 27, 35, 42, 47, 52, 54, 57, 58, 59, 62, 74, 78, 84], "bitarrai": [1, 7], "bit": [1, 2, 3, 4, 7, 8, 13, 22, 23, 51, 56, 71, 72, 87, 92], "encod": [1, 7, 8, 9, 13, 61, 87], "bitencod": [1, 7], "ccode": [1, 7, 61, 77], "netsquid_bitencod": [1, 7], "bitcod": [1, 7], "cnoisemodel": [1, 7], "bitnoisemodel": [1, 7], "affect": [1, 5, 7, 8, 10, 13, 15, 16, 17, 18], "delay_model": [1, 7, 8, 10, 13, 15, 24, 25, 72, 85, 86, 88, 93], "quantum_nois": [1, 7], "loss_model": [1, 7, 9, 86], "restructur": [1, 2], "errormodel": [1, 7, 29, 33, 61, 78], "both": [1, 2, 7, 12, 13, 18, 19, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 38, 39, 56, 59, 62, 66, 68, 71, 72, 73, 74, 77, 84, 85, 86, 88, 89, 90, 91, 93], "noisemodel": 1, "specif": [1, 2, 5, 7, 9, 11, 12, 14, 16, 17, 18, 23, 26, 27, 28, 37, 56, 58, 71, 73, 74, 84, 85, 86, 89, 90, 91, 93], "item": [1, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 26, 27, 28, 29, 31, 33, 34, 35, 36, 61, 62, 71, 73, 74, 85, 86, 89, 93], "introduc": [1, 7, 26, 41, 73, 85, 86, 87, 88, 89, 90, 92], "while": [1, 2, 7, 13, 18, 20, 22, 24, 25, 26, 27, 49, 51, 55, 72, 73, 74, 85, 86, 89, 90, 91, 92, 93], "latter": [1, 4, 7, 36, 51, 86, 90, 92], "depolarnoisemodel": [1, 7, 18, 24, 25, 26, 33, 61, 72, 73, 78, 86, 88, 91, 93], "dephasenoisemodel": [1, 7, 26, 33, 61, 73, 78, 93], "t1t2noisemodel": [1, 7, 18, 33, 61, 78], "triggered_ev": [1, 7, 24, 25, 27, 40, 65, 72, 74, 84, 89, 90, 93], "sort": [1, 7, 12, 18, 26, 54, 73, 84], "last": [1, 2, 7, 8, 10, 13, 15, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 38, 39, 65, 66, 72, 86, 91], "atom": [1, 7, 84, 90], "flatten": [1, 7, 60], "label": [1, 7, 20, 22, 23, 24, 25, 26, 27, 28, 35, 36, 38, 39, 60, 61, 72, 73, 74, 75, 92, 93], "equal": [1, 7, 8, 10, 13, 15, 16, 17, 20, 54, 58, 59, 60, 65, 84], "reduce_st": [1, 7, 60, 61], "want": [1, 2, 3, 4, 6, 7, 9, 18, 22, 23, 24, 25, 26, 27, 28, 38, 39, 45, 58, 60, 73, 74, 86, 88, 89, 93], "suppli": [1, 7], "pad": [1, 7, 49, 50], "either": [1, 5, 7, 12, 14, 15, 18, 19, 22, 23, 24, 25, 26, 27, 28, 34, 35, 37, 38, 39, 44, 55, 59, 68, 74, 84, 85, 86, 87, 89, 90, 91, 93], "threshold": [1, 7, 60], "logic": [1, 7, 18, 19, 26, 27, 28, 84, 88, 90, 91], "reference_ket": [1, 7, 54], "reference_st": [1, 7, 42, 44, 47, 48, 52, 56, 57, 59, 92], "circular": [1, 2, 7, 88], "use_spars": [1, 7, 49, 61], "reset": [1, 3, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 38, 39, 40, 61, 65, 66, 67, 68, 84, 86, 89, 90, 91, 93], "rather": [1, 7, 50, 55, 84, 86], "re": [1, 20, 26, 27, 39, 68, 73, 74], "design": [1, 2, 5, 27, 42, 52, 74, 86], "expressionhandl": [1, 7, 40, 69, 90], "similarli": [1, 7, 8, 15, 19, 57, 62, 63, 84, 86, 88, 90, 93], "_wait": [1, 7, 40, 84, 86, 90], "_onc": [1, 7], "evexpr": [1, 7, 24, 25, 26, 27, 65, 72, 73, 74, 84, 93], "_dismiss": [1, 7, 40, 84], "eventhandl": [1, 7, 40, 69, 86, 90], "wrap": [1, 8, 10, 12, 15, 18, 36, 68, 84, 85, 86, 90], "prioriti": [1, 7, 40, 61, 65, 84], "copi": [1, 5, 7, 14, 16, 17, 19, 26, 27, 28, 40, 58, 84, 87, 89], "find": [1, 4, 26, 42, 44, 47, 52, 56, 57, 59, 73, 93], "histori": 1, "sub": [1, 2, 5, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 37, 38, 39, 72, 74, 86, 88, 90], "independ": [1, 4, 7, 13, 26, 29, 30, 31, 32, 33, 43, 48, 56, 87], "separ": [1, 2, 5, 7, 13, 14, 16, 17, 18, 27, 56, 86, 90, 91], "dummi": 1, "overhead": 1, "recommend": [1, 2, 4, 36, 51, 56, 57, 88, 90, 92], "soon": [1, 90, 91], "read": [1, 4, 22, 69, 72, 87, 88, 93], "txt": [1, 4], "end": [1, 2, 7, 8, 10, 13, 15, 16, 18, 25, 26, 28, 34, 35, 36, 41, 49, 51, 56, 61, 67, 68, 72, 73, 84, 85, 86, 88, 89, 90, 93], "seper": 1, "vx": [1, 2], "y": [1, 2, 5, 7, 14, 18, 26, 44, 49, 51, 56, 59, 61, 73, 82, 91, 92, 93], "z": [1, 2, 7, 14, 16, 17, 18, 26, 41, 42, 44, 47, 49, 51, 52, 54, 56, 57, 59, 61, 73, 82, 85, 86, 87, 89, 90, 91, 92], "dev": [1, 2, 4], "hash": [1, 2], "untrack": 1, "place": [1, 4, 5, 9, 35, 43, 53, 56, 68, 86, 89, 91], "anyth": [1, 16, 20, 26, 33, 37, 84, 89, 90], "preprocess_input": [1, 8, 10, 13, 15, 16, 27, 61, 74], "quantumchannel": [1, 7, 13, 15, 22, 24, 25, 27, 35, 61, 72, 74, 77, 85, 86, 88, 89, 93], "classicalchannel": [1, 8, 13, 24, 25, 27, 61, 72, 74, 77, 86, 88, 93], "binari": [1, 2, 3, 7], "wheel": [1, 4, 7], "bdist": [1, 4], "bpkg": 1, "databuff": [1, 7, 61, 65], "sinc": [1, 2, 7, 16, 17, 18, 26, 44, 58, 59, 65, 73, 89, 93], "datafram": [1, 7, 24, 25, 26, 28, 61, 65, 72, 73, 75, 93], "sever": [1, 3, 6, 7, 43, 56, 58, 61, 66, 86, 87, 89, 90, 92], "protectedmap": 1, "valid": [1, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 42, 43, 44, 47, 52, 53, 56, 57, 58, 59, 61, 62, 84], "immutabilityerror": [1, 7, 61, 62, 83], "attributeerror": [1, 7, 30], "setter_fn": [1, 7], "encapsul": [1, 7, 9], "global": [1, 7, 26, 41, 59, 62, 64, 66, 73], "noise_model": [1, 7, 17, 86, 88], "memory_noise_model": [1, 7, 17, 24, 25, 72, 86, 88, 93], "init": [1, 2, 7, 18], "leakag": [1, 7], "julien": 1, "clear": [1, 7, 12, 17, 18, 27, 36, 61, 63, 65, 68, 74, 84, 90], "emiss": [1, 7, 14, 17, 18, 20], "iemit": [1, 7, 14, 61, 77], "emit": [1, 7, 14, 16, 17, 18, 20, 27, 74], "cysign": 1, "clock": [1, 16, 20, 61, 77, 86, 88], "start_delai": [1, 7, 11], "edit": [1, 4, 7], "arbitrari": [1, 7, 12, 14, 16, 19, 86, 90, 91], "mode": [1, 7, 20, 86], "below": [1, 2, 3, 4, 5, 7, 14, 16, 19, 22, 23, 24, 25, 26, 27, 28, 38, 39, 40, 43, 49, 56, 66, 72, 73, 74, 85, 86, 87, 90, 91, 92], "present": [1, 4, 7, 8, 17, 35, 36, 38, 59, 62, 69, 85, 86, 90], "cout": [1, 7, 11, 16, 20, 27, 74], "frequenc": [1, 11, 16, 20, 26, 28, 33, 61, 73, 86, 90, 93], "nl": [1, 4], "blueprint": 1, "team": 1, "back": [1, 5, 8, 18, 24, 68, 72, 84, 85, 86, 89, 90], "familiar": [1, 90], "meta_data": [1, 7, 12, 17, 18, 20], "hous": [1, 7], "_qstate_form": [1, 7], "formerli": [1, 7], "convert_qstate_form": [1, 7], "recurs": [1, 18, 60], "field": [1, 3, 4, 17, 18, 24, 38, 86], "favour": [1, 7], "port_": [1, 7], "send": [1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 35, 37, 38, 39, 61, 71, 72, 73, 74, 85, 86, 87, 88, 89, 90, 92, 93], "recv": [1, 7, 8, 10, 15, 27, 74, 86, 88, 93], "quantum_noise_model": [1, 7, 13, 15, 18, 26, 61, 73, 86, 91, 93], "quantum_loss_model": [1, 7, 13, 15, 24, 25, 72, 86], "dure": [1, 10, 14, 15, 16, 18, 19, 26, 27, 28, 56, 62, 74, 84, 86, 90, 91, 92], "behav": [1, 7, 23, 71], "dict": [1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 37, 38, 39, 54, 62, 63, 65, 66, 67, 71, 74, 84], "delet": [1, 7, 22, 23, 24, 25, 26, 27, 28, 38, 39, 84], "mutabl": [1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 62], "_add_port": 1, "specify_model": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 61], "mutat": [1, 7], "privat": [1, 2, 3, 7, 90], "get_noise_model": [1, 7], "set_noise_model": [1, 7], "get_subcompon": 1, "register_handl": [1, 7], "clear_handl": [1, 7], "length": [1, 7, 8, 10, 13, 14, 15, 17, 18, 20, 24, 25, 26, 27, 28, 30, 33, 42, 44, 47, 48, 52, 56, 57, 59, 72, 73, 74, 85, 86, 87, 88, 93], "debug": [1, 7, 66, 86], "wallclock": [1, 85, 90], "timelin": [1, 67, 68, 84, 85, 90], "simstat": [1, 7, 20, 61, 68, 83, 90], "varieti": [1, 7, 90], "stat": [1, 7, 16, 20, 67, 86, 88, 89, 90], "simtool": [1, 7, 26, 33, 61, 66, 83, 90], "set_console_debug": [1, 7], "set_console_log": [1, 7], "setlevel": [1, 7, 66], "tune": [1, 7, 20, 93], "wish": [1, 4, 7, 15, 56, 90], "qubitio": [1, 7, 85], "emission_noise_model": [1, 7, 20], "absorption_noise_model": [1, 7], "held": [1, 5, 7, 9, 12, 17, 18, 36, 42, 44, 47, 55, 57, 59, 60], "mem_posit": [1, 7, 17, 18, 61, 86], "inform": [1, 7, 12, 13, 16, 27, 39, 44, 59, 61, 66, 74, 84, 85, 86, 89, 90], "adopt": [1, 7, 49, 54], "get_matching_qubit": [1, 7, 17, 18, 61], "get_matching_posit": [1, 7, 17, 18, 61], "get_positions_of_ev": [1, 7], "get_put_ev": [1, 7], "get_positions_for_typ": [1, 7], "get_qubit_typ": [1, 7], "put_ev": [1, 7], "keyboard": [1, 7], "interrupt": [1, 7], "ctrl": [1, 7, 49, 56, 61, 92], "robustli": [1, 7], "otherwis": [1, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 49, 56, 58, 68, 73, 87, 90], "lookup": [1, 54, 56, 59], "has_supercompon": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 61], "has_subcompon": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 61], "super": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 28, 34, 36, 39, 71, 72, 73, 74, 85, 86, 88, 89, 93], "depth": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 27, 28, 34, 36, 85, 87, 91, 92], "help": [1, 7, 22, 26, 35, 36, 51, 72, 73, 84, 85, 88], "prevent": [1, 2, 5, 7, 91], "hierachi": [1, 7], "add_compon": [1, 7], "rem_subcompon": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 61], "io": [1, 7, 24, 25, 27, 28, 34, 85], "commun": [1, 7, 12, 23, 24, 25, 27, 34, 36, 71, 74, 85, 86, 87, 88, 90], "beyond": [1, 2, 5, 7, 12, 42, 44, 47, 51, 52, 57, 59], "simutil": [1, 7], "locat": [1, 4, 7, 22, 24, 25, 26, 27, 28, 34, 43, 48, 58, 66, 70, 72, 73, 75, 80, 87, 88, 89, 93], "transmit": [1, 7, 8, 10, 12, 13, 15, 28, 33, 61, 85, 86, 88, 90, 93], "tx_input": [1, 7, 12, 16, 21, 61, 86], "tx_output": [1, 7, 12, 26, 27, 35, 61, 73, 74, 85, 86, 89, 93], "receiv": [1, 3, 5, 7, 8, 10, 12, 13, 15, 16, 20, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 38, 39, 61, 72, 73, 74, 85, 86, 87, 88, 89, 90, 93], "__str__": [1, 7], "port_nam": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 26, 27, 28, 34, 36, 37, 61, 73, 74, 88, 89], "set_position_us": [1, 7, 17, 18, 61], "inv": [1, 7, 49, 61], "conj": [1, 7, 43, 49, 58, 61], "conjug": [1, 7, 24, 41, 48, 49, 50, 58], "control": [1, 5, 7, 14, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 38, 39, 41, 44, 49, 51, 56, 85, 88, 91, 92], "__eq__": [1, 7, 54], "__neq__": [1, 7], "almost": [1, 7, 23, 58, 60, 71, 92], "probabl": [1, 7, 14, 17, 18, 23, 24, 25, 26, 27, 33, 42, 44, 47, 51, 52, 56, 57, 59, 60, 61, 71, 72, 73, 74, 85, 86, 89, 90, 92], "itself": [1, 7, 35, 48, 54, 56, 58, 68, 84, 90], "tree": [1, 7], "qs_repr": 1, "stabtool": [1, 7, 51, 61, 66, 82, 92], "b00": [1, 22, 25, 26, 43, 46, 48, 49, 56, 58, 61, 72, 73, 82, 86, 88, 92, 93], "mixtur": 1, "qs_reprn": 1, "heterogen": [1, 7], "yet": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 37, 38, 39, 55, 56, 60, 71, 84, 88, 89, 90, 91, 92], "inplac": [1, 4, 7, 14, 26, 42, 47, 52, 57, 59, 73], "accord": [1, 5, 7, 17, 26, 33, 56], "multi_operate_qubit": [1, 7, 54, 61], "multi_operate_dm": [1, 7, 50, 61, 82], "generator_to_matrix": [1, 7, 59, 61], "dm2ket": [1, 7], "sample_ket_from_dm": [1, 7, 48, 61, 82], "eigendecomposit": [1, 7, 56], "no_stat": [1, 7, 56, 86, 90, 92], "create_qubit": [1, 7, 14, 16, 23, 49, 56, 61, 67, 71, 82, 85, 86, 89, 90, 92], "phase": [1, 7, 26, 41, 44, 59, 61, 64, 73, 92], "setter": [1, 7], "row_reduc": [1, 7, 59, 61], "publicli": [1, 2, 5, 7], "old": [1, 7, 20], "programinstruct": [1, 19, 26, 27, 28], "iinit": [1, 14, 61, 77], "instr_init": [1, 7, 14, 18, 27, 61, 74, 77, 91, 93], "num_posit": [1, 14, 17, 18, 24, 25, 26, 27, 61, 72, 73, 74, 86, 88, 91, 93], "By": [1, 2, 17, 18, 19, 20, 21, 23, 26, 27, 28, 36, 38, 56, 62, 65, 71, 74, 85, 86, 87, 88, 90, 92], "initialis": [1, 14, 17, 22, 72, 81, 86, 90, 91, 92, 93], "quantum_memori": [1, 14], "create_qubits_at": 1, "garbag": [1, 66, 84], "gc": [1, 84], "though": [1, 14], "moment": [1, 16, 20, 65, 68, 84, 93], "irrespect": [1, 92], "whether": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 43, 44, 49, 51, 52, 55, 56, 58, 59, 62, 65, 66, 67, 84, 86, 91], "weak": [1, 84], "delay_mean": [1, 8, 10, 13, 15, 30, 61, 86], "delay_std": [1, 8, 10, 13, 15, 30, 61, 86], "reviv": 1, "time_independ": [1, 33, 61, 91, 93], "depolar_r": [1, 24, 25, 28, 33, 56, 61, 72, 75, 86, 88, 90, 91, 92, 93], "analogu": [1, 87], "delay_depolar": [1, 56, 61, 82, 90, 92], "whole": [1, 9, 16, 23, 42, 44, 47, 52, 57, 59, 71, 85, 88, 89], "str": [1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 47, 49, 52, 54, 55, 56, 57, 59, 60, 62, 65, 66, 67, 71, 73, 74, 84, 93], "qnoisemodel": 1, "_required_properti": 1, "meant": [1, 41, 92], "adapt": [1, 5], "kwarg": [1, 8, 10, 13, 14, 15, 18, 19, 20, 23, 26, 27, 29, 30, 31, 32, 33, 36, 71, 73, 74, 84, 85], "compute_model": [1, 26, 29, 30, 31, 32, 33, 61], "turn": [1, 85, 86, 88, 90, 91], "cyutil": [1, 7], "cla": 1, "process": [1, 6, 7, 8, 12, 14, 15, 16, 23, 27, 37, 65, 71, 74, 85, 89, 92], "plot": [1, 7, 26, 28, 73, 89, 93], "export": [1, 4, 5, 7], "priorit": 1, "regard": [1, 5, 86], "behaviour": [1, 2, 16, 23, 27, 38, 71, 78, 84, 85, 86, 88, 89], "gatewai": [1, 7, 12], "bind": [1, 5, 7, 12, 84, 86], "payload": [1, 86], "add_port": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 61, 88], "onto": [1, 8, 10, 13, 15, 17, 18, 86], "remot": [1, 2, 6, 22, 23, 27, 28, 34, 36, 71, 72, 74, 75, 80, 85, 88], "b": [1, 2, 5, 8, 10, 12, 13, 15, 18, 19, 21, 22, 24, 25, 27, 28, 34, 56, 62, 64, 66, 72, 74, 88, 89, 93], "directconnect": [1, 24, 25, 34, 35, 36, 61, 72, 80, 85, 88, 89], "connect_to": [1, 7, 24, 36, 61, 72, 85], "get_conn_port": [1, 36, 61], "remote_id": [1, 36], "transmit_empty_item": [1, 8, 10, 13, 15, 61], "ready_evtyp": [1, 17, 18, 90], "concept": [1, 7, 85, 86, 90, 93], "bandwidth": 1, "channelbandwidtherror": 1, "becaus": [1, 2, 3, 5, 7, 8, 10, 13, 15, 16, 18, 22, 23, 24, 25, 26, 27, 28, 38, 39, 55, 65, 73, 84, 85, 86, 88, 90, 93], "As": [1, 2, 5, 7, 26, 73, 84, 86, 91, 92], "pulse_interv": 1, "output_no_wait": 1, "warn_on_discard": 1, "entir": [1, 42, 44, 47, 52, 57, 59], "nodeapi": [1, 7], "create_nod": [1, 7], "link_nod": [1, 7], "position_in_us": 1, "get_position_us": [1, 17, 18, 61], "empty_posit": 1, "unused_posit": [1, 17, 18, 61, 89], "everywher": [1, 7], "pend": [1, 7], "element": [1, 7, 31, 32, 56, 57, 59, 64], "wise": [1, 7], "transpos": [1, 7, 41, 43, 48, 58], "innerprod": [1, 7, 48, 61, 82], "outerprod": [1, 7, 48, 61, 82, 91], "mat": [1, 7], "arr": [1, 7, 49, 56, 61, 91], "operate_dm": [1, 50, 61, 82], "analog": [1, 86, 90], "operate_ket": [1, 50, 61, 82], "failur": [1, 5, 18, 68], "quantummemoryerror": [1, 17, 61, 77], "rx90": [1, 7], "rx180": [1, 7], "rx270": [1, 7], "equival": [1, 4, 7, 44, 49, 56, 84, 88, 90], "irotationg": [1, 14, 61, 77], "axi": [1, 14, 49, 92], "angl": [1, 14, 49, 92], "_standard_rotation_op": 1, "reus": [1, 27, 49, 74], "rotat": [1, 14, 24, 49, 56, 92], "effici": [1, 7, 41, 42, 44, 47, 48, 49, 51, 52, 54, 56, 57, 58, 59, 69, 86, 92], "sparse_mul_dense_matrix": [1, 58, 61, 82], "sparse_fast_conj": [1, 58, 61, 82], "create_controlled_op": [1, 7], "cx": [1, 7, 14, 49, 61, 82, 90, 92], "ccx": [1, 7, 14, 49, 61, 82], "toffoli": [1, 7, 14, 49], "mechan": [1, 7, 27, 74, 87], "compar": [1, 7, 14, 54, 61, 93], "_multiply_row": 1, "public": [1, 2, 5, 7, 14, 90], "greatli": [1, 7, 86], "much": [1, 7, 27, 49, 74, 85, 90], "100x": 1, "clifford_transform": [1, 7, 49, 59, 61, 82], "migrat": [1, 7], "get_cach": [1, 49, 61], "cache_id": [1, 49], "lrucach": [1, 49, 61, 63, 83], "reserv": [1, 5, 23, 54, 71], "decython": 1, "computation": [1, 49], "intens": 1, "sparse_kron_identity_": 1, "right": [1, 5, 26, 41, 46, 49, 51, 58, 73], "middl": [1, 27, 74], "cymath": [1, 61, 83], "sparse_padding_threshold": [1, 50, 61, 82], "fulli": [1, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 70, 72], "speed": [1, 27, 30, 43, 51, 56, 59, 69, 74, 85, 86, 92], "stab_form": 1, "factor": [1, 68], "inherit": [1, 12, 81, 84, 90], "sequenc": [1, 7, 8, 10, 13, 15, 18, 19, 22, 23, 24, 25, 26, 27, 28, 38, 39, 89, 91], "properli": [1, 7, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 90], "propag": [1, 16, 27, 74], "processorstatu": [1, 18, 61, 77], "paus": [1, 18, 61], "error_on_fail": [1, 16, 18, 27, 74], "paramat": 1, "error_on_program_fail": [1, 18, 61, 77], "quantumprocess": 1, "stop_program": [1, 18, 61], "fail_except": [1, 18, 61], "failure_except": 1, "shorter": [1, 2], "consist": [1, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 41, 60, 61, 64, 66, 71, 73, 74, 87, 88, 91, 93], "non": [1, 2, 5, 7, 8, 13, 15, 18, 19, 22, 23, 24, 25, 26, 27, 28, 37, 39, 56, 57, 60, 62, 64, 68, 72, 73, 74, 86, 91], "trivial": [1, 7, 8, 13, 15], "drop": [1, 7, 42, 44, 47, 52, 54, 56, 57, 59, 89, 90, 92], "__version__": [1, 2], "download": [1, 3, 5], "artefact": 1, "newli": [1, 7], "gitmodul": 1, "reorder_dm": [1, 7, 43, 61, 82], "final": [1, 7, 18, 22, 24, 25, 26, 27, 28, 37, 38, 39, 51, 56, 72, 73, 74, 86, 88, 90, 91, 92, 93], "ket_form": 1, "dm_formal": 1, "status_": 1, "idl": [1, 18, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 68, 84, 91], "bitstream": [1, 13], "codeditem": [1, 9, 61, 77], "bitcodeditem": 1, "classicalcodedobject": 1, "classicalcod": 1, "byte": [1, 66], "apply_loss_model": [1, 9, 61], "random": [1, 8, 10, 13, 15, 18, 26, 30, 33, 42, 44, 47, 48, 52, 53, 57, 59, 60, 65, 68, 85, 86, 89, 90, 92], "nonloc": [1, 22, 23, 24, 25, 26, 27, 28, 38, 39], "easyprotocol": 1, "easysquid": [1, 33], "primari": [1, 36, 88], "qmem": [1, 14, 35, 86], "store_qubit": 1, "retrieve_qubit": 1, "interact": [1, 17, 18, 56, 85, 88, 90, 92], "qmemory_empti": 1, "num_qmemori": 1, "stub": 1, "inclus": [1, 66], "factori": [1, 26, 28, 73, 93], "bitcodingfactori": 1, "classical_cod": [1, 8, 13, 61], "distil": [1, 24, 25, 27, 61, 72, 74, 79], "recordfidel": 1, "filterexpt": 1, "repeaterexpt": 1, "distilrepeaterexpt": 1, "along": [1, 13, 14, 60, 85, 90, 92], "recurr": 1, "reli": 1, "discret": [1, 5, 7, 40, 69, 84, 85, 86, 87, 92], "home": [1, 4], "exttest": 1, "yml": [1, 2], "organ": [1, 5], "namespac": 1, "evtype_signal_default": 1, "instr_sign": [1, 14, 18, 19, 61, 77, 91], "zero": [1, 16, 26, 33, 37, 56, 57, 58, 64, 68, 73, 84, 86, 90], "get_finished_instr": [1, 18, 61], "plural": 1, "finish": [1, 7, 16, 18, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 61, 71, 73, 74, 86, 89, 90, 91], "usabl": 1, "anymor": [1, 23, 71, 84, 92], "evtype_job_finish": 1, "load": [1, 19, 26, 27, 28, 61, 91], "other_program": 1, "prog3": [1, 19, 91], "prog2": [1, 18, 19, 91], "operand": [1, 19, 91], "least": [1, 2, 16, 26, 35, 49, 63, 66, 73, 84], "repeatedli": 1, "prog1": [1, 18, 19, 91], "cphase": [1, 59], "confus": 1, "qubit_indic": [1, 18, 19, 26, 27, 28, 43, 44, 48, 50, 58], "null": 1, "distinct": [1, 2, 86], "wild": 1, "card": 1, "missinginstructionerror": [1, 18, 61, 77, 91], "occur": [1, 2, 8, 10, 13, 14, 15, 16, 17, 18, 22, 56, 57, 60, 72, 84, 89, 90], "stop": [1, 3, 5, 11, 12, 18, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 40, 61, 68, 72, 73, 74, 84, 85, 89], "_statu": 1, "status_idl": 1, "status_run": 1, "status_fail": 1, "status_paus": 1, "_fail": 1, "_lock": 1, "set_program_fail_callback": [1, 18, 61], "set_program_done_callback": [1, 18, 61], "job": [1, 7, 18, 90], "_handle_job": 1, "_job": 1, "super_instruct": 1, "hierarchi": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 86, 88], "fallback_to_nonphys": [1, 18, 22, 24, 25, 26, 27, 61, 72, 73, 74, 91], "success": [1, 3, 18, 22, 24, 25, 26, 27, 72, 73, 74, 89, 90, 93], "noiseless": 1, "instructionerror": [1, 14, 61, 77], "measure_qubit": [1, 44, 54, 61], "bool": [1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 47, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 84], "neg": [1, 14, 16, 33, 62, 84], "qprogram": [1, 18, 61, 77, 91], "statement": [1, 7, 18, 19, 89, 91], "realiz": 1, "sim_count_reset": [1, 61, 68, 83], "mani": [1, 2, 3, 19, 26, 27, 28, 35, 52], "detect": [1, 7, 16], "delta": [1, 17, 18, 56], "skip_nois": [1, 17, 18], "bypass": [1, 84], "applic": [1, 2, 8, 10, 13, 15, 17, 18, 26, 33, 56, 59, 62, 84, 91, 92], "lru": [1, 49, 63], "bound": [1, 12, 19, 21, 26, 27, 28, 62, 63, 86, 88], "1e6": [1, 63, 86, 93], "quantumnoisemodel": 1, "qcontrol": 1, "cpp": 1, "create_cpp_extens": 1, "cache_precis": [1, 43, 56], "round": [1, 16, 22, 43, 53, 56, 60, 72, 90], "amplitud": [1, 26, 33, 43, 51, 55, 56], "damp": [1, 33, 43, 56], "_random_amplitude_dampen": 1, "235": 1, "quantummemorydevic": 1, "deriv": [1, 12, 36, 77, 78, 81, 84, 90], "address": [1, 2, 5, 17, 27, 36, 74], "xxx": 1, "unitari": [1, 49], "diagnost": [1, 84], "sim_count_ev": [1, 61, 68, 83], "sim_count_inst": [1, 61, 68, 83], "sim_count_handl": [1, 61, 68, 83], "cdynaa": [1, 84], "iter": [1, 22, 25, 26, 35, 44, 51, 62, 63, 72, 73, 89], "inner": [1, 48], "outer": [1, 26, 48, 73], "kron": [1, 43, 48, 58], "csr_matrix": [1, 48, 49, 50, 57, 58], "skip": [1, 17, 23, 27, 37, 58, 71, 74, 85], "kukli": 1, "193": 1, "force_tupl": 1, "transmiss": [1, 8, 10, 12, 13, 15, 30, 69, 85, 86, 90], "easynois": 1, "combinedchannel": [1, 13, 61, 77], "generalcombochannel": 1, "qchannel": [1, 13, 22, 24, 61, 72, 77, 85, 86, 88], "quantumcontrol": 1, "postprocess_output": [1, 8, 10, 13, 15, 16, 27, 61], "_messag": 1, "lost": [1, 8, 9, 12, 13, 15, 26, 33, 54, 55, 56, 86, 87, 89], "remove_empti": 1, "reflect": [1, 48], "compute_item_loss": 1, "compat": 1, "too": [1, 2, 3, 19, 26, 27, 28], "ultim": 1, "better": [1, 27, 51, 55, 74, 86], "paradigm": [1, 86], "prepar": [1, 19, 26, 27, 28, 44, 89, 92], "reorgan": 1, "fibredelaymodel": [1, 24, 25, 30, 61, 72, 78, 86, 88, 93], "easynoisemodel": 1, "warn_deprec": [1, 61, 66, 83], "log_messag": 1, "is_valid_dm": [1, 43, 61, 82], "toler": [1, 58], "precis": [1, 43, 56], "sum": [1, 2, 51, 56, 60], "stoch_operate_qubit": [1, 54, 61], "p_weight": [1, 54, 56, 92], "unschedul": [1, 18, 40, 84], "readi": [1, 8, 10, 13, 15, 16, 18, 22, 25, 26, 27, 37, 72, 73, 85, 86, 89, 90, 91, 93], "cytutil": 1, "becom": [1, 2, 5, 8, 10, 13, 15, 16, 23, 26, 54, 56, 71, 73, 84, 86, 88], "cytil": 1, "cysim": 1, "exclus": [1, 5, 66], "dmtool": [1, 51, 60, 61, 66, 82], "partialtrac": [1, 43, 48, 61, 82], "dm_fidel": [1, 43, 61, 82], "rhoa": 1, "rhob": 1, "dm_check": [1, 43], "comput": [1, 6, 8, 10, 13, 15, 18, 23, 26, 41, 42, 43, 44, 47, 48, 49, 51, 52, 56, 57, 58, 59, 60, 69, 71, 73, 82, 85, 86, 87, 90], "rho": [1, 17, 18, 43, 50, 51, 56, 58], "new_qstat": [1, 54], "opposit": [1, 88], "action": [1, 5, 26, 29, 31, 33, 56, 59, 93], "keep_combin": [1, 56], "ignor": [1, 2, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 35, 38, 39, 56, 66, 84], "won": [1, 16, 27, 74], "issu": [1, 2, 5, 6, 27, 44, 68, 69, 74, 84], "futur": [1, 5, 18, 49, 68, 84, 85, 90], "qnetsquid": [1, 58], "best": [1, 51], "distribut": [1, 2, 3, 4, 5, 20, 23, 30, 56, 71, 86, 90], "python3": [1, 4], "suit": [1, 3, 6], "pull": [1, 2], "abc": [1, 14, 27, 74], "notimplementederror": [1, 39, 44, 51, 56, 59], "asid": [1, 30, 33, 65, 86, 92], "nanosecond": [1, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 68, 74, 83, 85, 89, 90, 91], "adjust": [1, 60, 66, 88, 93], "accordingli": [1, 19, 26, 27, 28], "sure": [1, 4, 19, 23, 26, 27, 28, 71, 74], "your": [1, 2, 3, 4, 5, 10, 51, 69, 70, 78, 93], "sensit": 1, "sim_tim": [1, 16, 18, 19, 23, 25, 26, 27, 28, 35, 61, 68, 71, 72, 74, 83, 85, 86, 89, 90, 91], "sim_reset": [1, 16, 18, 20, 23, 26, 27, 61, 65, 68, 71, 73, 74, 83, 86, 89, 90, 91, 93], "sim_stop": [1, 61, 68, 83, 90], "sim_statu": 1, "simulationengin": [1, 40, 68, 69, 90], "dynaasim": 1, "singleton": [1, 68, 84, 90], "obviat": [1, 7, 41], "With": [1, 26, 51, 73, 86, 87, 93], "absolut": [1, 19, 26, 27, 28, 58], "exp_valu": [1, 56, 61, 82], "larger": [1, 26, 73], "dampen": [1, 26, 33, 43, 55, 56], "wait_for_messag": 1, "wait_with_callback": 1, "wait_for_ev": 1, "wait_with_nonlocal_callback": 1, "exercis": [1, 5, 92], "cover": [1, 5, 86], "experi": [1, 6, 24, 25, 26, 28, 33, 72, 73, 85, 86, 91, 93], "solut": 1, "statist": [1, 25, 51, 67, 68, 72, 85, 90, 92], "follow": [1, 2, 3, 4, 5, 14, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 33, 36, 43, 44, 49, 56, 58, 66, 67, 68, 69, 71, 72, 73, 74, 75, 84, 85, 86, 88, 89, 90, 91, 92, 93], "add_callback": 1, "get_callback": 1, "dismiss_callback": 1, "remove_callback": 1, "point": [1, 2, 3, 4, 19, 26, 27, 28, 87, 88, 89, 90], "encourag": 1, "decor": 1, "add_nonlocal_callback": 1, "get_nonlocal_callback": 1, "dismis_nonlocal_callback": 1, "referenc": [1, 90], "perform": [1, 5, 6, 14, 16, 18, 19, 25, 26, 27, 28, 29, 31, 33, 37, 43, 49, 51, 52, 53, 56, 59, 65, 72, 73, 74, 85, 86, 87, 89, 90, 91, 92, 93], "idiom": 1, "consequ": [1, 2], "short": [1, 2, 84, 85], "check_assign": [1, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61], "system_nam": [1, 56], "revers": [1, 5, 18, 22, 42, 44, 47, 52, 56, 57, 59, 72], "recompil": 1, "ownership": 1, "segment": 1, "fault": [1, 5], "ping": [1, 85, 92], "pong": [1, 85, 92], "truth": [1, 84], "event_express": [1, 90], "__init__": [1, 22, 23, 24, 25, 26, 27, 28, 38, 39, 65, 71, 72, 73, 74, 84, 85, 86, 88, 89, 90, 93], "first_term": [1, 40, 84, 89, 90, 93], "firstterm": 1, "second_term": [1, 27, 40, 74, 84, 89, 90], "secondterm": 1, "kettool": [1, 51, 61, 66, 82, 92], "incomplet": 1, "doesn": [1, 3, 16, 23, 24, 27, 35, 39, 42, 44, 47, 52, 54, 57, 59, 62, 71], "nodea": 1, "rawkei": 1, "01010": 1, "recfidel": 1, "experiment": 1, "topic": [1, 7, 87], "callabl": [1, 8, 10, 13, 15, 23, 26, 27, 29, 30, 31, 32, 33, 39, 52, 62, 65, 91], "is_qubit_lost": 1, "prob_qubit_lost": 1, "compute_qubit_lost": 1, "is_number_st": [1, 55, 61], "presenc": [1, 26, 33, 55], "absenc": [1, 55], "photon": [1, 26, 27, 30, 33, 55, 74, 87], "maximum": [1, 2, 11, 17, 18, 22, 23, 24, 25, 26, 27, 28, 37, 39, 51, 63, 66, 74, 90], "later": [1, 4, 17, 18, 26, 37, 56, 73, 86, 88, 89, 90, 92], "fifo": [1, 8, 10, 12, 13, 15, 27, 74], "those": [1, 5, 18, 44, 84, 87], "down": 1, "slightli": [1, 93], "channeloutputerror": 1, "compute_loss": 1, "procces_input": 1, "associ": [1, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 34, 35, 36, 38, 39, 52, 59, 71, 91], "cartesiu": 1, "cluster": 1, "parallel_on_cluster_howto": 1, "herebi": [1, 5], "consider": [1, 5, 7], "caching_sparse_threshold": 1, "measure_ob": 1, "measure_gen": 1, "q1": [1, 14, 16, 18, 19, 22, 26, 27, 49, 56, 67, 72, 73, 74, 90, 91, 92, 93], "logfidel": 1, "logbook": 1, "wrongli": 1, "interpret": [1, 4, 5, 18, 19, 26, 27, 28, 33, 43, 49, 56, 58, 67, 68, 84], "logarithm": 1, "operationdelaymodel": 1, "capabl": [1, 5, 6, 8, 10, 13, 15, 16, 18, 20, 51, 84, 86], "qubit_bandwidth": 1, "qfibr": 1, "conjunct": 1, "concurr": [1, 8, 10, 13, 15], "conform": [1, 8, 10, 13, 15], "lengthen": 1, "necessari": [1, 2, 3, 5, 26, 28, 49, 51, 53, 56, 73, 86, 90, 92, 93], "last_rx_tim": [1, 8, 10, 13, 15, 61], "compute_lost": 1, "cancel_transmiss": 1, "r": [1, 4, 24, 25, 26, 49, 56, 72, 73, 92], "gaussiandelaymodel": [1, 30, 61, 78, 86], "output_empti": [1, 8, 10, 13, 15, 61], "expdelaymodel": 1, "qstore": 1, "expchannel": 1, "At": [1, 2, 26, 73, 80, 88], "save": [1, 51, 68], "dephas": [1, 28, 33, 56, 61, 82, 92, 93], "apply_dda_nois": [1, 56, 61, 82, 92], "depolar": [1, 26, 28, 33, 56, 61, 73, 82, 86, 90, 92, 93], "diagram": [1, 85, 90], "child": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 66, 88], "children": [1, 60], "qgate": 1, "noisi": [1, 5, 14, 86, 91, 92, 93], "plan": 1, "simplest": 1, "fixeddelaymodel": [1, 8, 10, 13, 15, 22, 24, 25, 30, 61, 72, 78, 86, 88, 93], "cfibr": 1, "exponenti": [1, 19, 26, 27, 28, 33, 56, 73], "distanc": [1, 26, 27, 28, 30, 73, 74, 85, 93], "qstore_a": 1, "qmemory_a": 1, "cours": [1, 23, 71], "qfibre_ab": 1, "qchannel_ab": 1, "schedule_transmiss": 1, "compute_delai": [1, 8, 10, 13, 15, 61], "Such": [1, 18, 19, 85, 89, 91], "characterist": [1, 7, 86, 91], "topographi": 1, "stochastic_oper": [1, 56, 61, 82, 92], "ancilla": [1, 56], "randomst": [1, 26, 30, 33, 42, 44, 47, 48, 52, 57, 59, 60, 68], "seed": [1, 16, 23, 27, 68, 71, 74, 86, 89, 90, 92], "set_random_st": [1, 16, 23, 27, 61, 68, 71, 74, 83, 86, 89, 90, 92], "mock": 1, "stabilizerst": 1, "create_rotation_op": [1, 49, 56, 61, 82, 92], "overload": [1, 49, 56], "h": [1, 14, 18, 49, 51, 56, 59, 61, 82, 86, 89, 90, 91, 92], "cnot": [1, 14, 18, 41, 49, 56, 59, 67, 86, 89, 90, 91, 92], "q2": [1, 16, 18, 19, 22, 26, 27, 49, 56, 67, 72, 73, 74, 90, 91, 92, 93], "thing": [1, 7, 88, 89], "hermitian": [1, 14, 17, 18, 42, 44, 47, 49, 52, 56, 57, 58, 59], "rotation_operator_mat": 1, "k1": 1, "k2": 1, "bx": 1, "bz": 1, "free": [2, 3, 5, 33, 85], "commerci": [2, 5], "open": [2, 4, 28, 75], "subsect": 2, "assum": [2, 5, 16, 23, 27, 49, 54, 56, 59, 74, 86], "host": 2, "page": [2, 5, 7, 69, 92], "forum": [2, 3, 4, 6, 7, 69, 85], "announc": [2, 11, 22, 23, 24, 25, 26, 27, 28, 38, 39, 69], "discuss": [2, 5, 6, 69, 86, 88, 92], "basecamp": 2, "chat": 2, "wiki": 2, "workflow": 2, "off": [2, 8, 10, 11, 13, 15, 20, 61, 69, 85, 86, 89, 92], "pattern": 2, "wildcard": [2, 18, 84], "kind": [2, 5, 27, 74, 93], "number": [2, 4, 7, 11, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 33, 35, 37, 38, 39, 42, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 63, 66, 68, 71, 72, 73, 74, 84, 85, 90, 92, 93], "tracker": 2, "titl": [2, 26, 73, 93], "alic": [2, 7, 22, 23, 24, 25, 26, 27, 28, 35, 39, 71, 72, 73, 74, 75, 86, 87, 88, 89, 90, 92, 93], "qubit": [2, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 33, 61, 66, 67, 69, 71, 72, 73, 74, 86, 87, 88, 89, 90, 91, 93], "she": [2, 86, 89, 90, 92], "12": [2, 19, 23, 71], "convent": [2, 5, 35, 36], "coupl": 2, "semant": [2, 5], "detmin": 2, "1": [2, 3, 4, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 33, 35, 37, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "2": [2, 7, 8, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 33, 41, 42, 44, 46, 47, 49, 51, 52, 56, 57, 58, 59, 60, 62, 65, 66, 67, 68, 71, 72, 73, 74, 84, 85, 86, 87, 88, 90, 91, 92, 93], "consid": [2, 18, 23, 44, 57, 60, 71, 80, 84, 86, 90, 91, 92], "5": [2, 3, 16, 18, 19, 22, 23, 26, 27, 35, 42, 43, 47, 49, 56, 57, 58, 59, 60, 62, 65, 68, 71, 72, 73, 74, 84, 85, 86, 88, 91, 92], "a19bbd50": 2, "late": [2, 84], "seriou": 2, "cherri": 2, "step": [2, 5, 26, 27, 73, 74, 85, 87, 90, 93], "identifi": [2, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 38, 39, 40, 49, 71, 74, 84], "eg": [2, 27, 74], "changelog": [2, 6, 7, 69], "date": [2, 5, 6], "audienc": 2, "entri": [2, 17, 18, 19, 26, 27, 28, 63], "summaris": [2, 40], "m": [2, 17, 18, 26, 35, 42, 47, 51, 57, 59, 73, 86, 87, 89, 90, 92], "push": 2, "origin": [2, 5, 8, 9, 18, 23, 27, 59, 71, 74], "upload": [2, 4], "symbol": 2, "post": [2, 17, 18, 27, 37, 74], "4": [2, 8, 10, 13, 15, 16, 18, 19, 20, 23, 25, 26, 27, 35, 49, 51, 56, 62, 71, 72, 73, 74, 85, 90, 91, 92, 93], "Then": 2, "rest": [2, 43, 58, 91], "runner": 2, "org": [2, 3, 4, 66], "british": 2, "english": [2, 5], "optimis": 2, "protocol": [2, 5, 12, 22, 23, 24, 25, 26, 27, 28, 61, 66, 69, 70, 73, 75, 87, 88, 90, 91, 92, 93], "emphasi": 2, "render": [2, 5], "text": [2, 49], "red": 2, "bracket": [2, 7], "distinguish": [2, 35, 36, 56], "could": [2, 3, 12, 16, 27, 56, 74, 85, 86, 88, 89, 90], "somemodul": 2, "bar": [2, 26, 73], "3": [2, 3, 4, 7, 8, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 44, 46, 56, 58, 59, 65, 66, 69, 71, 72, 73, 74, 75, 85, 86, 88, 90, 91, 92, 93], "__all__": 2, "def": [2, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 38, 39, 65, 71, 72, 73, 74, 84, 85, 86, 88, 89, 90, 91, 93], "10": [2, 3, 4, 16, 26, 27, 46, 51, 56, 60, 65, 68, 69, 73, 74, 84, 86, 87, 89, 90, 92, 93], "descript": [2, 40, 49, 56, 61, 84], "blank": 2, "close": [2, 27, 58, 74, 92], "tripl": 2, "quot": 2, "float": [2, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 37, 42, 43, 44, 47, 48, 49, 50, 52, 56, 57, 58, 59, 60, 68, 71, 72, 73, 74, 84, 93], "15": [2, 16, 51, 60, 88, 90, 91], "structur": [2, 57, 59, 60, 86], "parameter_nam": 2, "restructuredtext": 2, "meth": [2, 23, 27, 71, 74], "await": [2, 7, 27, 74], "good": [2, 5, 38, 92], "paragraph": 2, "readabl": 2, "mathemat": [2, 50], "latex": 2, "vert": [2, 17, 18, 42, 44, 46, 47, 50, 52, 56, 57, 59, 85, 86, 87, 90, 92], "rangl": [2, 17, 18, 42, 44, 46, 47, 50, 51, 52, 56, 57, 59, 85, 86, 87, 90, 92], "browser": 2, "mathjax": 2, "mention": [2, 3], "pep8": 2, "exampleclassa": 2, "exampleclassb": 2, "function_c": 2, "what": [2, 19, 33, 51], "path": [2, 4, 60, 70, 92], "wrong": [2, 45, 58], "autodoc": [2, 61], "appear": 2, "conf": 2, "outputcheck": 2, "normal": [2, 16, 23, 30, 49, 59, 71, 85, 86, 93], "But": 2, "42": [2, 23, 27, 62, 66, 68, 71, 74, 86, 89, 90, 92], "adher": [2, 5], "pep": 2, "8": [2, 4, 14, 18, 24, 25, 27, 49, 56, 72, 74, 85, 90, 92], "few": [2, 26, 57, 59, 73, 93], "width": 2, "mark": [2, 5], "flake8": 2, "next": [2, 6, 8, 10, 12, 13, 15, 16, 19, 25, 26, 27, 28, 51, 56, 59, 61, 72, 73], "minimis": 2, "vertic": [2, 44, 87], "condens": 2, "compli": [2, 5], "explain": [2, 25, 72, 85, 86, 89, 90, 92, 93], "wrapper": [2, 66], "pyflak": 2, "lint": 2, "common": [2, 12, 22, 23, 24, 25, 26, 27, 28, 37, 39, 46, 49, 59, 78, 86, 87], "pitfal": 2, "camelcas": 2, "snake_cas": 2, "underscor": [2, 90], "prerequisit": [3, 4], "linux": [3, 4], "64": [3, 4], "x86": 3, "virtual": [3, 4, 38, 81, 85, 88, 89], "virtualbox": 3, "window": [3, 7, 16, 27, 74], "bash": [3, 4], "ubuntu": 3, "subsystem": 3, "6": [3, 4, 16, 18, 23, 27, 66, 71, 74, 84, 92], "higher": [3, 4, 23, 27, 41, 65, 66, 71, 74], "19": [3, 4], "upgrad": [3, 4], "pip3": [3, 4], "login": [3, 4, 5], "credenti": [3, 7], "registr": [3, 90], "url": [3, 4], "http": [3, 4, 66], "usernam": [3, 4], "password": [3, 4, 5], "substitut": [3, 4, 5], "wide": [3, 4], "authent": 3, "counter": [3, 84], "websit": [3, 5], "satisfi": [3, 14, 17, 18, 56], "feel": [3, 85], "whl": [3, 4], "architectur": 3, "cp36m": 3, "linux_x86_64": 3, "proprietari": [4, 5], "distro": 4, "29": 4, "gcc": 4, "clang": 4, "11": [4, 16, 46, 51, 56, 87, 92], "essenti": [4, 13, 15, 86, 88, 89, 90, 91, 92, 93], "clone": [4, 87], "cd": 4, "useram": 4, "netsquidpypi_us": 4, "netsquidpypi_pwd": 4, "extra_index": 4, "howev": [4, 5, 8, 10, 13, 15, 18, 19, 23, 26, 27, 28, 51, 71, 84, 86, 87, 89, 91, 92], "unbuilt": 4, "modulenotfounderror": 4, "pythonpath": 4, "echo": 4, "uninstal": 4, "thread": 4, "less": [4, 37], "cpu": 4, "forc": [4, 16], "shell": 4, "bashrc": 4, "xcode": 4, "cflag": 4, "mmacosx": 4, "min": 4, "7": [4, 60, 85, 91, 93], "std": [4, 85], "stdlib": 4, "libc": 4, "homebrew": 4, "brew": 4, "cc": 4, "cxx": 4, "_build": 4, "succe": [4, 27, 74], "dist": 4, "zip": 4, "arch": 4, "account": [4, 5, 7, 17, 18, 85, 86], "ssh": 4, "netsquidci_us": 4, "copyright": 5, "2017": 5, "2020": 5, "constitut": 5, "legal": 5, "click": [5, 27, 74], "button": 5, "offer": [5, 92], "thereof": [5, 12, 18, 26, 29, 30, 31, 32, 33, 36, 60], "hereinaft": 5, "enter": [5, 16, 26, 33, 73], "nederlands": 5, "organisati": 5, "voor": 5, "toegepast": 5, "natuurwetenschappelijk": 5, "onderzoek": 5, "netherland": 5, "research": 5, "wet": [5, 84], "duli": 5, "organis": [5, 88], "under": [5, 6, 7, 69], "princip": 5, "anna": 5, "buerenplein": 5, "2595": 5, "da": 5, "gravenhag": 5, "arnaud": 5, "manag": [5, 6, 7, 26, 35, 36, 66, 67, 73, 88, 89, 90], "director": 5, "industri": 5, "capac": 5, "behalf": 5, "board": 5, "technisch": 5, "universiteit": 5, "delft": 5, "univers": [5, 42, 44, 47, 51, 52, 57, 59, 87, 92], "technologi": 5, "stevinweg": 5, "2628": 5, "cn": 5, "ronald": 5, "hanson": 5, "parti": 5, "license": 5, "wherea": [5, 27, 74, 86, 92], "jointli": 5, "institut": 5, "intellectu": 5, "acquir": [5, 68], "decai": [5, 33], "stochast": [5, 56, 92], "feedback": [5, 7], "loop": [5, 27, 74, 84], "predict": 5, "realist": 5, "known": [5, 51, 91], "net": [5, 69], "squid": 5, "desir": [5, 27, 42, 47, 56, 57, 59, 60, 74, 91, 92], "obtain": [5, 66], "sole": 5, "purpos": [5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 38, 39, 57, 71, 74, 86, 90], "willing": 5, "herein": 5, "forth": [5, 24, 72, 89], "therefor": [5, 23, 27, 59, 71, 74, 84, 86], "premis": 5, "agre": 5, "shall": 5, "exploit": 5, "regul": 5, "nation": 5, "trade": [5, 69, 92], "sanction": 5, "dutch": 5, "eu": 5, "legisl": 5, "impos": 5, "arm": 5, "embargo": 5, "relev": [5, 6, 7, 87], "econom": 5, "weapon": 5, "mass": 5, "militari": 5, "paramilitari": 5, "secur": 5, "equip": 5, "dual": 5, "civil": 5, "drug": 5, "chemic": 5, "transfer": [5, 86], "sublicens": 5, "educ": 5, "No": [5, 14, 51, 68, 84], "explicitli": [5, 7, 18, 27, 74, 84, 92], "embodi": 5, "therein": 5, "state": [5, 12, 14, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 33, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 68, 69, 71, 72, 73, 74, 75, 84, 85, 86, 87, 89, 90, 91, 93], "prior": [5, 7], "consent": 5, "subject": [5, 17, 18, 62], "far": [5, 86, 88], "destroi": [5, 85], "damag": 5, "disassembl": 5, "decompil": 5, "unlock": 5, "manner": [5, 7, 23, 27, 71, 74], "decod": [5, 8, 9, 10, 13, 15, 61], "ii": [5, 41], "translat": 5, "expressli": 5, "iii": 5, "sell": 5, "lend": 5, "rent": 5, "displai": [5, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 38, 39, 51, 66], "form": [5, 7, 8, 10, 12, 13, 17, 18, 19, 37, 60, 91], "procur": 5, "tu": 5, "trademark": 5, "advertis": 5, "promot": 5, "sale": 5, "literatur": 5, "unduli": 5, "whenev": [5, 17, 49], "wherev": 5, "domest": 5, "internation": 5, "pursuant": 5, "nor": 5, "affili": 5, "employe": 5, "contractor": 5, "compromis": 5, "indirectli": 5, "complianc": 5, "civilian": 5, "indemnifi": 5, "harmless": 5, "claim": 5, "fine": [5, 93], "cost": 5, "expens": [5, 42, 44, 47, 49, 52, 57, 58, 59], "attornei": 5, "profession": 5, "aris": [5, 91], "govern": 5, "bodi": 5, "prohibit": 5, "proce": [5, 86, 92], "suspend": [5, 89], "countri": 5, "deem": 5, "appropri": [5, 7, 9, 17, 58, 86], "mandatori": 5, "art": 5, "bundl": [5, 25, 72], "digit": 5, "assist": [5, 68], "rate": [5, 28, 33, 56, 86, 90, 93], "oblig": 5, "technic": [5, 51, 86], "unless": [5, 17, 18, 22, 23, 24, 25, 26, 27, 28, 38, 39, 51, 78, 91], "bugfix": 5, "enhanc": 5, "modif": 5, "substanti": 5, "matter": [5, 17, 56], "involv": [5, 7, 14, 86, 90, 92], "acknowledg": 5, "reproduct": 5, "duplic": 5, "possess": 5, "vest": 5, "thereaft": 5, "warrant": 5, "uninterrupt": 5, "defect": 5, "strict": 5, "lieu": 5, "impli": 5, "statutori": 5, "merchant": 5, "infring": 5, "fit": [5, 12], "furnish": 5, "whatsoev": 5, "gross": 5, "neglig": [5, 26, 73], "liabl": 5, "suffer": [5, 91], "manufactur": 5, "leas": 5, "disposit": 5, "demand": 5, "judgment": 5, "whatev": 5, "contract": 5, "contributori": 5, "defens": 5, "hereto": 5, "treat": [5, 8, 10, 15], "patent": 5, "analys": 5, "evalu": [5, 51], "materi": 5, "tangibl": 5, "disclos": 5, "intang": 5, "write": [5, 7, 39, 50, 58, 88, 89], "confirm": 5, "natur": [5, 86], "thirti": 5, "30": [5, 26, 73, 86, 89, 90], "dai": 5, "reason": [5, 84, 90], "maintain": [5, 86, 88], "moreov": 5, "neither": [5, 22, 23, 24, 25, 26, 27, 28, 38, 39], "hereund": 5, "who": [5, 27, 74, 85, 92], "consult": 5, "know": [5, 23, 51, 71, 86, 91], "carri": [5, 18, 19, 26, 27, 28, 85], "sign": 5, "suffici": [5, 23, 26, 71, 73], "year": 5, "extent": [5, 27, 74], "prove": 5, "rightfulli": 5, "had": [5, 17, 18, 93], "knowledg": [5, 7], "subsequ": 5, "defend": 5, "prosecut": 5, "litig": 5, "government": 5, "promptli": 5, "seek": 5, "compet": 5, "sooner": [5, 18], "commenc": 5, "indefinit": [5, 90], "period": [5, 11, 20, 27, 37, 61, 74, 90], "coven": 5, "remedi": 5, "taken": [5, 8, 10, 13, 15, 20, 42, 44, 47, 52, 59], "receipt": 5, "forthwith": 5, "compulsorili": 5, "voluntarili": 5, "compound": 5, "conven": 5, "meet": 5, "auditor": 5, "appoint": 5, "asset": 5, "debt": 5, "ceas": 5, "immedi": [5, 16, 17, 18, 84, 90], "outstand": 5, "payabl": 5, "provis": 5, "expiri": 5, "payment": 5, "accru": 5, "constru": 5, "incur": 5, "unforese": 5, "contractu": 5, "insuper": 5, "whilst": 5, "occurr": [5, 26, 38, 73], "therefrom": 5, "evid": 5, "forese": 5, "impact": 5, "person": 5, "deposit": 5, "postag": 5, "prepaid": 5, "airmail": 5, "certifi": 5, "mail": 5, "ip": [5, 36], "pobox": 5, "96800": 5, "2509": 5, "je": 5, "hagu": 5, "attent": [5, 7], "lorentzweg": 5, "cj": 5, "unenforc": 5, "conflict": 5, "jurisdict": 5, "remaind": 5, "fullest": 5, "negoti": 5, "faith": 5, "enforc": [5, 23, 27, 38, 71, 88], "greatest": 5, "duti": 5, "unreason": 5, "withheld": 5, "understand": [5, 28, 75], "hereof": 5, "supersed": 5, "arrang": 5, "thereto": 5, "retroact": 5, "charg": 5, "charact": 5, "notifi": 5, "email": 5, "lastli": 5, "licence": 5, "notif": 5, "influenc": 5, "substant": 5, "brought": 5, "court": 5, "platform": 6, "driven": 6, "particularli": 6, "node": [6, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 61, 66, 69, 70, 71, 73, 74, 75, 77, 81, 85, 86, 87, 89, 93], "hood": [6, 69], "fast": [6, 57, 58], "arxiv": 6, "awar": [6, 88], "perspect": 7, "prespecifi": 7, "rout": [7, 21], "dedic": [7, 91], "unknown": [7, 22, 23, 24, 25, 26, 27, 28, 38, 39, 72], "constrain": [7, 26, 29, 30, 31, 32, 33, 62], "union": 7, "streamlin": 7, "inconsist": 7, "variou": [7, 85, 88], "outperform": 7, "divers": 7, "hardwar": [7, 16, 36, 85, 86, 88, 89, 92], "devic": [7, 14, 16, 17, 92], "scheudl": 7, "intermedi": [7, 22, 23, 24, 25, 26, 27, 28, 38, 39], "grant": [7, 23, 71], "administr": 7, "agreement": 7, "finalis": [7, 67], "guid": [7, 85], "alpha": [7, 87], "walkthrough": 7, "constraintmap": 7, "view": [7, 62], "16": [7, 16, 85], "depenc": 7, "25": [7, 16, 33, 42, 43, 48, 49, 51, 56, 58, 92], "teleport": [7, 25, 26, 61, 69, 70, 72, 73, 79, 92, 93], "bob": [7, 22, 23, 24, 25, 26, 27, 28, 35, 71, 72, 73, 74, 75, 86, 87, 88, 89, 90, 92, 93], "manipul": [7, 38, 42, 43, 44, 45, 47, 48, 50, 51, 56, 57, 58, 59, 81, 85, 86, 87, 89, 92], "mostli": 7, "incorpor": 7, "veri": [7, 26, 27, 51, 73, 74, 84, 86, 88], "brief": [7, 69, 85], "expr": [7, 93], "await_eventexpress": 7, "timer": [7, 11, 23, 27, 71, 74, 89, 93], "unchang": 7, "callback": [7, 12, 18, 19, 23, 24, 26, 27, 28, 39, 65, 72, 84, 85, 86, 89, 90], "unneed": 7, "specialis": [7, 58, 91], "intermediari": [7, 25, 72], "asyncio": 7, "eventcondit": 7, "sleep": [7, 22, 23, 24, 25, 26, 27, 28, 38, 39, 89], "sleepcondit": 7, "portcondit": 7, "signalcondit": 7, "port_input": 7, "port_output": [7, 20], "inparticular": 7, "sublcass": 7, "timednodeprotocol": [7, 37, 61, 81], "cdata": [7, 36, 61], "lossmodel": 7, "cannot": [7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 37, 38, 39, 56, 84, 87, 91], "name_model": [7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36], "overwrit": [7, 11, 14, 20, 26, 37, 65, 73, 78], "redesign": 7, "interv": [7, 11, 27, 37, 74, 84], "inaccuraci": [7, 11], "seamless": 7, "inter": 7, "required_properti": [7, 26, 29, 30, 31, 32, 33, 61, 73, 85, 86], "uder": 7, "10x": 7, "featu": 7, "identif": [8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 38, 39, 49], "km": [8, 10, 13, 15, 26, 27, 28, 30, 33, 73, 74, 85, 86, 93], "Will": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 37, 38, 39, 59, 60, 67, 72, 74], "pair": [8, 10, 11, 12, 13, 15, 16, 17, 20, 21, 22, 24, 26, 27, 36, 37, 62, 72, 73, 74, 85, 87, 90], "prepocess": [8, 10, 13, 15], "classical_noise_model": [8, 13, 18, 61], "classical_loss_model": [8, 13], "use_classical_cod": [8, 13, 61], "preprocess": [8, 10, 13, 15, 16, 27, 74], "spend": [8, 13, 15], "value_constraint": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 62], "forward_input": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 34, 36, 61, 72, 73, 74, 88, 93], "forward_output": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 24, 25, 27, 28, 34, 36, 61, 72, 74, 88, 93], "parentcompon": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36], "Or": [8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 44, 84], "in_p": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36], "out_p": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36], "in_c": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36], "out_c": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36], "One": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 27, 28, 34, 36, 41, 68, 72, 84, 86], "deviat": [8, 10, 13, 15, 30, 85], "abid": [8, 10, 13, 15], "polici": [8, 10, 13, 15], "strictli": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36], "postprocess": [8, 10, 13, 15, 16, 27], "transit": [8, 10, 13, 15], "unintention": [8, 10, 13, 15], "alter": [8, 10, 13, 15, 21], "meaningless": [8, 10, 13, 15], "belong": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 35, 36, 63, 86], "spent": [8, 9, 10, 13, 15, 17, 18, 26, 29, 31, 33, 73], "disconnect": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 61], "That": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36, 90], "cancel": [8, 10, 13, 15, 26, 73], "progress": [8, 10, 13, 15, 85], "ever": [8, 10, 15], "model_typ": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 34, 36], "keyerror": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 38, 39, 62, 63], "uid": [8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 38, 39, 40, 61, 65, 84], "has_encod": [9, 61], "object_typ": [9, 61], "encoding_typ": [9, 61], "encoded_item": [9, 61], "simpli": [9, 20, 51, 54, 56, 66, 89], "instanti": [9, 32, 84, 88, 90, 91], "schemat": [10, 17, 20, 26, 40, 73, 77, 78, 85, 91], "travel": [10, 30, 86], "talk": 10, "got": [10, 23, 71, 85], "scoop": 10, "channelerror": [10, 61, 77], "with_traceback": [10, 12, 14, 16, 17, 18, 19, 21, 32, 39, 61], "tb": [10, 12, 14, 16, 17, 18, 19, 21, 32, 39], "__traceback__": [10, 12, 14, 16, 17, 18, 19, 21, 32, 39], "channeldelayerror": [10, 61, 77], "max_tick": [11, 20], "tick": [11, 20], "timing_model": [11, 20, 28, 75, 86, 88, 93], "hz": [11, 16, 20, 26, 28, 33, 56, 73, 86, 90, 93], "infin": 11, "obj": [11, 18, 23, 26, 27, 30, 35, 37, 39, 58, 73, 74], "is_run": [11, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61], "num_tick": [11, 61], "produc": [11, 20, 26, 27, 73, 74, 84], "get_period": [11, 61], "kick": [11, 85], "abil": [12, 25, 72], "packet": 12, "Its": [12, 86], "discard_qubit": [12, 14, 61], "abus": 12, "world": [12, 21, 22, 23, 24, 25, 26, 27, 28, 38, 39, 86, 89, 90], "vice": [12, 54, 56, 86], "versa": [12, 54, 56, 86], "easi": [12, 88], "crawl": 12, "bind_input_handl": [12, 26, 27, 35, 61, 73, 74, 86], "msg_handler": 12, "tag_meta": 12, "func": [12, 27, 52, 65, 74], "rx_port_nam": 12, "portbinderror": [12, 61, 77], "bind_output_handl": [12, 16, 20, 61, 86], "other_port": 12, "confin": 12, "portconnecterror": [12, 36, 61, 77], "symmetr": 12, "port1": 12, "port2": 12, "connected_port": [12, 61], "input_port": [12, 21], "asymmetr": 12, "portforwarderror": [12, 61, 77], "forwarded_port": [12, 61], "input_queu": [12, 61], "oldest": 12, "is_connect": [12, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 61], "notify_all_input": [12, 61, 86], "notify_all_output": [12, 61], "notify_next_input": [12, 61], "notify_next_output": [12, 61], "output_queu": [12, 61], "query_meta_input": [12, 61], "meta_filt": 12, "query_meta_output": [12, 61], "restart": [12, 89], "rx_input": [12, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 73, 74, 85, 86, 89, 93], "rx_output": [12, 21, 22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 86], "evtype_input": [12, 86], "attr": 12, "porterror": [12, 61, 77], "probabilist": [13, 15], "ie": 13, "never": [13, 68, 84, 89], "realiti": 13, "approxim": [13, 23, 51, 63, 71], "situat": [13, 51], "probabilisticli": 13, "join": [13, 55, 56, 65, 69], "low": [14, 91, 92], "agnost": [14, 19, 91, 92], "Their": [14, 21, 27, 74], "op": [14, 16, 42, 44, 47, 49, 56, 57, 59, 86, 91], "qapi": [14, 24, 25, 72, 89, 93], "my_op": 14, "instr_xi": [14, 91], "igat": [14, 61, 77, 91], "xy_gat": [14, 91], "myqmem": 14, "q0": [14, 56, 86, 90, 91], "instr_h": [14, 18, 19, 61, 77, 91, 93], "instr_cnot": [14, 18, 19, 61, 77, 91, 93], "deep": 14, "unrestrict": 14, "arg": [14, 27, 30, 32, 74, 84], "necessarili": [14, 15, 54], "check_standard_rot": 14, "angle_precis": 14, "decim": [14, 43, 53, 56], "degre": 14, "90": [14, 86, 89, 90, 92], "180": [14, 92], "270": 14, "radian": [14, 49], "icontrolleddirectiong": [14, 61, 77], "j": [14, 17, 18, 42, 43, 44, 46, 47, 48, 49, 51, 56, 58, 60, 85, 92], "m_i": [14, 17, 18, 56], "sum_i": [14, 17, 18, 56], "succeed": [14, 42, 44, 47, 52, 56, 57, 59, 89], "henc": [14, 32], "p0": [14, 17, 18, 92], "p1": [14, 17, 18, 92], "incorrectli": [14, 17, 18], "typeerror": [14, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 38, 39, 42, 44, 47, 51, 52, 53, 54, 56, 57, 59, 84], "kept": [14, 17, 18, 43, 58], "initialz": 14, "hadamard": [14, 41, 44, 56, 85, 86, 90, 91, 92], "among": [14, 19, 91], "isign": [14, 61, 77], "event_typ": [14, 17, 18, 22, 23, 24, 25, 26, 27, 28, 38, 39, 65, 72, 73, 84, 86, 90, 93], "auxiliari": 14, "word": [14, 49, 68, 84, 90], "initialization_op": 14, "instr_swap": [14, 18, 22, 61, 72, 77], "swap_gat": 14, "instr_unitari": [14, 61, 77], "unitary_g": 14, "instr_x": [14, 18, 19, 26, 27, 28, 61, 73, 77, 91, 93], "x_gate": 14, "instr_i": [14, 18, 61, 77, 91], "y_gate": 14, "instr_": [14, 18, 61, 77, 91, 93], "s_gate": 14, "instr_t": [14, 18, 61, 77], "t_gate": 14, "instr_z": [14, 18, 19, 26, 61, 73, 77, 91, 93], "z_gate": 14, "h_gate": 14, "i_gat": 14, "instr_cx": [14, 61, 77], "cx_gate": 14, "cnot_gat": 14, "NOT": 14, "instr_ccx": [14, 61, 77], "ccx_gate": 14, "instr_toffoli": [14, 61, 77], "toffoli_g": 14, "instr_c": [14, 61, 77], "cphase_g": 14, "instr_cz": [14, 18, 61, 77], "cz_gate": 14, "instr_cdir": [14, 61, 77], "c_direct": 14, "instr_cxdir": [14, 61, 77], "cx_direct": 14, "instr_cydir": [14, 61, 77], "cy_direct": 14, "instr_czdir": [14, 61, 77], "cz_direct": 14, "instr_rot": [14, 61, 77], "rotation_g": 14, "instr_rot_x": [14, 61, 77], "x_rot_gat": 14, "instr_rot_i": [14, 61, 77], "y_rot_gat": 14, "instr_rot_z": [14, 61, 77], "z_rot_gat": 14, "instr_crot": [14, 61, 77], "crot_gat": 14, "instr_crot_x": [14, 61, 77], "crotx_gat": 14, "instr_crot_i": [14, 61, 77], "croty_g": 14, "instr_crot_z": [14, 61, 77], "crotz_gat": 14, "instr_measur": [14, 18, 19, 61, 77, 91, 93], "measurement_op": 14, "instr_measure_x": [14, 18, 19, 61, 77, 91], "measure_x": 14, "measure_bellst": 14, "instr_emit": [14, 27, 61, 74, 77], "emit_ent_qubit": 14, "loos": [15, 92], "sens": 15, "detector": [16, 20, 27, 36, 74, 85], "num_input_port": [16, 27, 74], "num_output_port": [16, 27, 74], "system_delai": [16, 27, 74], "dead_tim": [16, 27, 74], "synchron": [16, 27, 74], "deadtim": 16, "everi": [16, 20, 26, 27, 35, 65, 73, 74, 86, 90, 92, 93], "povm": [16, 27], "pre": 16, "_delay_model": 16, "jitter": 16, "dark": 16, "simple_link": [16, 23, 61, 71, 74, 79], "create_meas_op": [16, 27, 74], "single_detector": 16, "cout0": [16, 27, 74], "lambda": [16, 20, 26, 35, 39, 62, 73, 84], "msg": [16, 27, 74], "qin0": [16, 22, 24, 25, 26, 27, 72, 73, 74, 86, 88, 93], "deadtime_detector": 16, "q3": [16, 19, 56, 91, 92], "thu": [16, 21, 27, 46, 51, 56, 59, 74, 86, 87, 90], "system_detector": 16, "q4": [16, 19, 92], "13": 16, "31": 16, "exactli": [16, 84, 90], "44": 16, "example_detector": 16, "qin1": [16, 25, 26, 27, 72, 73, 74, 86, 88, 93], "port_outcom": [16, 27, 74], "input_port_nam": [16, 27, 61], "quantumdetectorerror": [16, 27, 61, 77], "output_port_nam": [16, 27, 61], "elaps": [16, 33, 85, 90], "set_input_model": [16, 27, 61], "set_output_model": [16, 27, 61], "detection_window": 16, "obser": 16, "gate_trigg": 16, "test_detector": 16, "external_clock": 16, "1e8": 16, "q5": 16, "q6": 16, "greater": [16, 33, 63], "20": [16, 24, 25, 26, 27, 51, 72, 73, 74, 86, 89, 90, 92], "2e8": 16, "21": 16, "qubit_typ": 17, "thought": [17, 88], "undergo": 17, "qoutx": [17, 18], "absorb": [17, 18], "qm_posit": [17, 18], "qm_replac": [17, 18], "qm_ready_evtyp": [17, 18], "qm_check_posit": [17, 18], "qin_noise_model": [17, 18], "absorpt": [17, 18], "qout_noise_model": [17, 18], "check_posit": [17, 18], "metafield": [17, 18], "eigenst": [17, 18, 49, 56], "mempositionemptyerror": [17, 18, 61, 77], "perfect": [17, 18, 89], "frac": [17, 18, 41, 44, 46, 49, 51, 87, 92], "p": [17, 18, 42, 43, 47, 51, 56, 57, 59], "sum_j": [17, 18], "psi_i": [17, 18, 51], "langl": [17, 18, 51], "gotten": [17, 18, 23, 71], "noise_posit": [17, 18], "positional_qout": [17, 18], "mempositioninuseerror": [17, 18, 61, 77], "regardless": 17, "time_last_access": [17, 61], "lock": 18, "qproc": [18, 26, 73, 91], "testqpd": 18, "mem_noise_model": [18, 26, 73, 91], "500": [18, 27, 68, 74], "phys_instruct": [18, 26, 73, 91, 93], "t1": [18, 33, 61], "get_qubit_indic": [18, 19, 26, 27, 28, 61, 73, 74, 91, 93], "output_kei": [18, 19, 26, 27, 28, 73, 91, 93], "m1": [18, 19, 28, 86, 90, 91, 92, 93], "m2": [18, 19, 28, 91, 92, 93], "customqprogram": [18, 19], "default_num_qubit": [18, 19, 26, 27, 28, 61, 73, 91, 93], "paramprogram": [18, 19], "prog": [18, 19, 27, 74, 91], "intenum": [18, 46], "mem_pos_typ": 18, "add_instruct": [18, 61], "evtype_program_don": [18, 61], "succesfulli": 18, "evtype_program_fail": [18, 61], "permut": 18, "ins": 18, "add_physical_instruct": [18, 61], "q_noise_model": 18, "test_processor1": 18, "twice": [18, 90], "rel": [18, 59], "qproc2": 18, "test_processor2": 18, "c_noise_model": 18, "phys_instr": 18, "instr": [18, 91, 93], "check_qubit_map": 18, "instantli": [18, 19, 26, 27, 28, 86, 91], "caught": [18, 19, 26, 27, 28], "successfulli": [18, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 74, 90], "get_composite_instruction_decomposit": [18, 61], "decomposit": [18, 41, 49, 61], "get_composite_instruct": [18, 61], "get_instruction_dur": [18, 61], "get_physical_instruct": [18, 61], "get_program_dur": [18, 61], "unreli": 18, "program_map": [18, 61], "scenario": 18, "qproc1": 18, "vert1": 18, "apply_q_noise_aft": [18, 61, 91, 93], "realis": [18, 92], "apply_q_nois": [18, 61], "instr_param": [18, 61], "processorerror": [18, 61, 77], "programmappingerror": [18, 61, 77], "nv_super_instruct": [18, 61, 77], "nv": 18, "centr": 18, "controlledqprogram": [19, 91], "flip": [19, 91], "els": [19, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 74, 85, 89, 91, 92, 93], "m3": [19, 91, 92], "parallelqprogram": 19, "m4": 19, "cheatingqprogram": [19, 91], "loadingqprogram": [19, 91], "regular": [19, 35, 65, 89, 91], "firstprogram": 19, "secondprogram": 19, "runtime_param": [19, 26, 27, 28], "prepepend": [19, 26, 27, 28], "quantumprogramerror": [19, 26, 27, 28, 61, 77], "my_program_inst": [19, 26, 27, 28], "mycustomprogram": [19, 26, 27, 28], "small": [19, 26, 27, 28, 92], "chanc": [19, 26, 27, 28], "increas": [19, 26, 27, 28, 65, 85], "schedule_now": [19, 26, 27, 28], "schedule_aft": [19, 26, 27, 28], "lazili": [19, 26, 27, 28], "runparamet": [19, 26, 27, 28], "respond": [20, 23, 27, 39, 74, 84, 90], "100": [20, 22, 26, 27, 28, 62, 66, 72, 73, 74, 75, 86, 89, 90], "trigger_delai": 20, "num_port": [20, 22, 24, 25, 72, 86, 88, 93], "qubit_port_map": 20, "emission_delay_model": [20, 22, 24, 25, 72], "internal_clock": [20, 28, 75, 93], "qsourcetriggererror": 20, "store_output_from_port": 20, "storag": [20, 86], "print_source_output_messag": 20, "nano": [20, 85], "emission_tim": 20, "emission_delai": 20, "5e8": 20, "test_sourc": 20, "qout0": [20, 22, 24, 25, 72, 86, 88, 93], "assert": [20, 67, 92], "len": [20, 26, 27, 62, 73, 74], "1st": 20, "1e9": [20, 26, 27, 73, 74, 85, 88, 93], "2nd": 20, "3rd": 20, "divid": [20, 32], "ss_3_qubit": 20, "ey": [20, 49, 56], "qout1": [20, 22, 24, 25, 72, 86, 88, 93], "prep_delai": [20, 22, 61, 72], "intact": 20, "flow": [21, 88, 89], "quickli": [21, 42, 44, 47, 59], "broadcast": [21, 22, 23, 24, 25, 26, 27, 28, 38, 39], "_handle_input": 21, "routing_t": [21, 61], "destin": 21, "hello": [21, 39, 86], "switcherror": [21, 61, 77], "example_network_setup": [22, 24, 25, 28, 61, 72, 75, 79, 88, 89, 93], "qchannel_delai": [22, 72], "num_mem_posit": [22, 72], "entangle_nod": [22, 72], "node_a": [22, 24, 25, 28, 72, 75, 93], "node_b": [22, 24, 25, 28, 72, 75, 93], "add_nod": [22, 24, 25, 26, 27, 35, 61, 72, 73, 74, 93], "quantummemoryatest": [22, 72], "quantummemorybtest": [22, 72], "qsourcetest": [22, 72], "quantumchanneltest": [22, 72], "port_name_a": [22, 24, 25, 72], "port_name_b": [22, 24, 25, 72], "add_connect": [22, 24, 25, 26, 27, 35, 61, 72, 73, 74, 93], "channel_to": [22, 24, 25, 35, 72], "unclear": [22, 72], "cooper": [22, 72], "begin": [22, 25, 41, 49, 51, 56, 68, 72, 84, 90], "backlog": [22, 72], "seen": [22, 24, 72, 86, 90, 92], "start_express": [22, 24, 25, 72], "elif": [22, 27, 72, 74], "_is_sourc": [22, 72], "entangled_pair": [22, 25, 72], "_num_pair": [22, 72], "mem_po": [22, 72, 86, 89, 93], "_mem_posit": [22, 72], "input_mem_po": [22, 72], "_qsource_nam": [22, 72], "_qmem_input_port": [22, 72], "_input_mem_po": [22, 72], "__file__": [22, 24, 25, 26, 28, 70, 72, 73, 75, 93], "protocol_a": [22, 72], "role": [22, 24, 25, 72], "protocol_b": [22, 72], "99999": [22, 72], "num_pair": 22, "runtimeerror": [22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 42, 44, 47, 49, 52, 54, 55, 57, 59], "add_sign": [22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 74], "add_subprotocol": [22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 73, 74, 89], "can_signal_to": [22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 61], "constrainterror": [22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 62, 83], "cl": [22, 23, 24, 25, 26, 27, 28, 38, 39], "come": [22, 23, 24, 25, 26, 27, 28, 38, 39, 84], "listen": [22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 85, 89, 90, 93], "fetch": [22, 23, 24, 25, 26, 27, 28, 38, 39, 93], "myprotocol": [22, 23, 24, 25, 26, 27, 28, 38, 39], "msg_header": [22, 23, 24, 25, 26, 27, 28, 38, 39], "await_don": [22, 23, 24, 25, 26, 27, 28, 38, 39], "await_fail": [22, 23, 24, 25, 26, 27, 28, 38, 39], "sender": [22, 23, 24, 25, 26, 27, 28, 38, 39, 74, 87, 89], "signal_label": [22, 23, 24, 25, 26, 27, 28, 38, 39, 89], "get_signal_result": [22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 72, 74, 93], "bigger": [22, 23, 24, 25, 26, 27, 28, 38, 39], "queri": [22, 23, 24, 25, 26, 27, 28, 37, 39, 88], "input_typ": [22, 23, 24, 25, 26, 27, 28, 38, 39], "signalresult": [22, 23, 24, 25, 26, 27, 28, 38, 39, 61, 81], "co": [22, 23, 24, 25, 26, 27, 28, 38, 39, 49, 56], "someth": [22, 23, 24, 25, 26, 27, 28, 38, 39, 89], "hasn": [22, 23, 24, 25, 26, 27, 28, 38, 39], "max_nod": [22, 23, 24, 25, 26, 27, 28, 37, 39, 61], "earlier": [22, 23, 24, 25, 26, 27, 28, 38, 39, 86, 89, 91], "specify_nod": [22, 23, 24, 25, 26, 27, 28, 37, 39, 61], "exce": [22, 23, 24, 25, 26, 27, 28, 37, 39, 66], "complic": [23, 71, 88], "extrem": [23, 71], "long": [23, 32, 71, 84, 91, 93], "solv": [23, 71], "underli": [23, 71, 92], "think": [23, 71, 89], "black": [23, 71], "box": [23, 71], "cheat": [23, 71], "Of": [23, 71], "magicegprotocol": [23, 71], "req_creat": [23, 27, 71, 74], "namedtupl": [23, 27, 39, 71, 74], "res_ok": [23, 27, 39, 71, 74], "weight": [23, 42, 43, 44, 47, 50, 52, 54, 56, 57, 59, 71], "_sampler": [23, 71], "b01": [23, 24, 25, 26, 46, 61, 71, 72, 73, 82], "b11": [23, 26, 46, 61, 71, 73, 82], "_other_servic": [23, 71], "add_other_servic": [23, 71], "start_tim": [23, 25, 27, 37, 61, 71, 72, 74], "travel_tim": [23, 27, 71, 74], "10000": [23, 27, 66, 71, 74], "create_id": [23, 27, 71, 74], "_get_next_create_id": [23, 27, 71, 74], "ourselv": [23, 71, 90], "_new_req_sign": [23, 27, 71, 74], "purpose_id": [23, 27, 71, 74], "curpair": [23, 27, 71, 74], "1000000": [23, 63, 68, 71], "qpo": [23, 27, 71, 74], "send_respons": [23, 27, 39, 61, 71, 74], "setup_protocol": [23, 27, 71, 74], "alice_egp": [23, 27, 71, 74], "bob_egp": [23, 27, 71, 74], "networkprotocol": [23, 27, 71, 74], "simplelinkprotocol": [23, 27, 71, 74], "did": [23, 71, 86], "run_simul": [23, 26, 27, 61, 71, 73, 74, 79], "set_qstate_form": [23, 27, 51, 56, 61, 71, 74, 82, 86, 88, 89, 90, 91, 92], "create_example_network": [23, 27, 71, 74], "u": [23, 26, 27, 56, 71, 73, 74, 85, 86, 89, 90, 91, 92], "1010000": [23, 71], "2010000": [23, 71], "3010000": [23, 71], "4020000": [23, 71], "5020000": [23, 71], "6020000": [23, 71], "vastli": [23, 71], "smaller": [23, 71, 87], "lot": [23, 27, 51, 71], "get_nam": [23, 27, 39, 61, 74], "serviceerror": [23, 27, 39, 61, 81], "register_request": [23, 27, 39, 61, 74], "req_typ": [23, 27, 39], "register_respons": [23, 27, 39, 61, 74], "res_typ": [23, 27, 39], "alia": [23, 27, 38, 51], "linklayercr": [23, 27, 74], "request_handl": [23, 27, 39, 61, 74], "request_typ": [23, 27, 39, 61], "linklayerok": [23, 27, 74], "response_typ": [23, 27, 39, 61], "establish": [24, 72], "filteringexampl": [24, 61, 72, 79], "source_delai": [24, 25, 72], "1e5": [24, 25, 72], "source_fidelity_sq": [24, 25, 72], "1000": [24, 25, 51, 62, 68, 72, 85, 93], "node_dist": [24, 25, 26, 28, 72, 73, 75, 88, 93], "purify_network": [24, 72], "quantummemory_a": [24, 72], "s00": [24, 25, 72], "qsource_a": [24, 25, 72], "quantummemory_b": [24, 72], "conn_cchannel": [24, 72], "cchannelconn_ab": [24, 72], "cchannel_a": [24, 25, 72], "200e3": [24, 25, 72], "cchannel_b": [24, 25, 72], "qchannel_a": [24, 25, 27, 72, 74], "example_sim_setup": [24, 25, 28, 61, 72, 75, 79, 93], "num_run": [24, 25, 28, 72, 93], "epsilon": [24, 25, 72], "filt_exampl": [24, 72], "record_run": [24, 25, 72], "q_a": [24, 25, 72], "pos_a": [24, 25, 72], "q_b": [24, 25, 72], "pos_b": [24, 25, 72], "f2": [24, 25, 72], "dc": [24, 25, 26, 28, 65, 72, 73, 75, 93], "include_time_stamp": [24, 25, 65, 72], "include_entity_nam": [24, 25, 26, 65, 72, 73], "collect_on": [24, 25, 26, 61, 65, 72, 73, 93], "pd": [24, 25, 72], "get_nod": [24, 25, 28, 35, 61, 72, 75, 89, 93], "fire": 24, "meas_op": [24, 61], "dejmp": 24, "entangle_a": [24, 25, 72], "entangle_b": [24, 25, 72], "purify_a": [24, 25, 72], "purify_b": [24, 25, 72], "100000": [24, 25], "let": [25, 26, 27, 56, 72, 73, 74, 85, 86, 90, 91, 92], "bipartit": [25, 72], "four": [25, 46, 72, 85, 86, 87], "ideal": [25, 57, 72], "repeater_network": [25, 72], "node_r": [25, 72], "quantum_processor_a": [25, 72], "source_a": [25, 72], "quantum_processor_b": [25, 72], "source_b": [25, 72], "qsource_b": [25, 72], "midpoint": [25, 27, 28, 72, 74, 93], "quantum_processor_r": [25, 72], "conn_cfibre_ar": [25, 72], "cchannelconn_ar": [25, 72], "cchannel_r": [25, 72], "conn_cfibre_br": [25, 72], "cchannelconn_br": [25, 72], "qchannel_ar": [25, 72], "port_name_ra": [25, 72], "qchannel_br": [25, 72], "qchannel_b": [25, 27, 72, 74], "port_name_rb": [25, 72], "repeaterexampl": [25, 61, 72, 79], "entangle_ra": [25, 72], "entangle_rb": [25, 72], "purify_ra": [25, 72], "purify_rb": [25, 72], "repeater_r": [25, 72], "repeater_b": [25, 72], "endpoint": [25, 72], "_add_subprotocol": [25, 72], "start_expr_ent_a": [25, 72], "start_expr_ent_b": [25, 72], "_start_on_success": [25, 72], "start_expr_repeat": [25, 72], "success_subprotocol": [25, 72], "care": [25, 72, 84], "signal_a": [25, 72], "signal_b": [25, 72], "pairs_a": [25, 72], "pairs_b": [25, 72], "collector": [25, 26, 28, 65, 66, 67, 72, 73, 93], "repeater_exampl": [25, 72], "corrector": 25, "briegel": [26, 73], "et": [26, 27, 59, 73, 74], "al": [26, 27, 59, 73, 74], "background": [26, 73], "shown": [26, 27, 40, 59, 65, 66, 73, 74, 86, 87, 88, 91, 92], "sometim": [26, 51, 73], "scheme": [26, 27, 73, 74, 86, 88], "neighbour": [26, 44, 73], "illustr": [26, 56, 73, 85, 90, 92], "entanglingconnect": [26, 28, 61, 73, 79, 88, 93], "classicalconnect": [26, 28, 61, 73, 79, 88, 93], "create_qprocessor": [26, 61, 73, 79], "noise_r": [26, 73], "200": [26, 73, 93], "gate_dur": [26, 73], "gate_noise_model": [26, 73], "physical_instruct": [26, 73, 93], "setup_network": [26, 61, 73, 79, 86, 90], "num_nod": [26, 73], "source_frequ": [26, 28, 73, 88, 93], "f": [26, 27, 28, 35, 73, 74, 75, 85, 86, 88, 89, 90, 91, 92, 93], "repeater_chain_network": [26, 73], "num_zero": [26, 73], "log10": [26, 73], "node_": [26, 73], "qproc_": [26, 73], "node_right": [26, 73], "qconn": [26, 73], "qconn_": [26, 73], "channel_nam": [26, 73], "qchannel_c2a": [26, 73, 86, 88, 93], "qchannel_c2b": [26, 73, 86, 88, 93], "fibredepolarizemodel": [26, 61, 73, 79], "port_r_nam": [26, 73], "l": [26, 73, 87], "cconn": [26, 73], "cconn_": [26, 73], "port_name_node1": [26, 35, 73, 93], "ccon_r": [26, 73], "port_name_node2": [26, 35, 73, 93], "ccon_l": [26, 73], "_node": [26, 73], "exagger": [26, 73], "figur": [26, 73, 87, 92, 93], "p_depol_init": [26, 73], "009": [26, 73], "p_depol_length": [26, 73], "025": [26, 73], "Not": [26, 29, 30, 31, 32, 33, 41, 56, 73], "prob": [26, 43, 56, 60, 73, 85, 86, 89, 90, 92], "power": [26, 73, 86, 90], "setup_repeater_protocol": [26, 61, 73, 79], "swapprotocol": [26, 61, 73, 79], "swap_": [26, 73], "correctprotocol": [26, 61, 73, 79], "_qmem_input_port_l": [26, 73], "_qmem_input_port_r": [26, 73], "_program": [26, 73], "_x_corr": [26, 73], "_z_corr": [26, 73], "swapcorrectprogram": [26, 61, 73, 79], "_counter": [26, 73], "b10": [26, 46, 56, 61, 73, 82], "set_correct": [26, 73], "maxim": [26, 56, 73, 84, 87], "anti": [26, 73], "commut": [26, 73, 78], "zx": [26, 73], "xz": [26, 73], "xx": [26, 73], "x_corr": [26, 73], "z_corr": [26, 73], "correctionprotocol": [26, 28, 61, 73, 79, 89, 93], "setup_datacollector": [26, 61, 73, 79], "calc_fidel": [26, 73], "qubit_a": [26, 73], "qubit_b": [26, 73], "num_it": [26, 73], "est_runtim": [26, 73], "5e3": [26, 73], "create_plot": [26, 28, 61, 73, 79, 93], "2000": [26, 73], "matplotlib": [26, 73, 93], "pyplot": [26, 73, 93], "plt": [26, 73, 93], "fig": [26, 73], "ax": [26, 73], "subplot": [26, 73], "50": [26, 56, 73, 85, 86, 89, 90, 92], "errorbar": [26, 73], "sem": [26, 73, 93], "agg": [26, 73, 93], "yerr": [26, 73, 93], "xlabel": [26, 73], "ylabel": [26, 73], "total": [26, 73, 85, 90], "opportun": [26, 73], "grow": [26, 55, 73, 92], "concatenation_class": [26, 29, 30, 31, 32, 33, 61, 78], "is_concaten": [26, 29, 30, 31, 32, 33, 61], "qubit_index": [26, 33], "prob_loss": [26, 33], "get_random_st": [26, 30, 33, 42, 44, 47, 48, 52, 57, 59, 60, 61, 68, 83], "attach": [26, 29, 30, 31, 32, 33, 86, 89], "robust": [27, 74], "inspir": [27, 74, 90], "propos": [27, 74], "stack": [27, 61, 66, 74], "analogi": [27, 74], "osi": [27, 74], "bottom": [27, 69, 74], "explor": [27, 74], "simplifi": [27, 74, 86], "dive": [27, 74], "layout": [27, 74], "herald": [27, 74], "fallback": [27, 74], "nonphys": [27, 74], "simplelinknetwork": [27, 74], "qmem_": [27, 74], "conn": [27, 35, 74, 85], "heraldedconnect": [27, 74], "length_to_a": [27, 74], "length_to_b": [27, 74], "time_window": [27, 74], "200000": [27, 30, 74, 86], "three": [27, 51, 74, 86, 90, 91, 92], "queu": [27, 74], "9": [27, 53, 56, 60, 74, 85, 90, 92], "midpointheraldingprotocol": [27, 74], "mhp": [27, 74], "acronym": [27, 74], "egp": [27, 74], "heraldingconnect": [27, 74], "time_step": [27, 37, 61, 74], "denot": [27, 74, 86, 87, 88, 89, 90, 91, 92, 93], "q_port_nam": [27, 74], "heral": [27, 74], "trigger_label": [27, 74], "answer_label": [27, 74], "answer": [27, 63, 74], "rememb": [27, 74, 89], "_do_task_label": [27, 74], "do_task_label": [27, 74], "emitprogram": [27, 74], "simplic": [27, 74, 85, 86], "mulitpl": [27, 74], "wait_tim": [27, 74], "wait_sign": [27, 74], "photonoutcom": [27, 74], "do_task": [27, 74], "task": [27, 52, 74, 90], "metaclass": [27, 74], "abcmeta": [27, 74], "logical_qubit_id": [27, 74], "dequ": [27, 74], "_create_id": [27, 74], "handler_id": [27, 74], "popleft": [27, 74], "_asdict": [27, 74], "gen": [27, 74], "abstractmethod": [27, 74], "drain": [27, 74], "fulful": [27, 74], "c_port_nam": [27, 74], "_mh_name": [27, 74], "mh_protocol": [27, 74], "c_port": [27, 74], "_handle_msg": [27, 74], "add_phys_lay": [27, 74], "isinst": [27, 74], "sub_proto": [27, 74], "wait_trigg": [27, 74], "wait_answ": [27, 74], "_handle_ev": [27, 74], "01": [27, 46, 74, 87, 90, 91, 92], "didn": [27, 74], "delay_a": [27, 74], "delay_b": [27, 74], "channel_a": [27, 74], "channela": [27, 74], "channel_b": [27, 74], "channelb": [27, 74], "qchannela": [27, 74], "qchannelb": [27, 74], "bsmdetector": [27, 74], "cout1": [27, 74], "_sender_id": [27, 74], "captur": [27, 74], "qubit_list": [27, 74], "_qubits_per_port": [27, 74], "timeout": [27, 74], "_meta": [27, 74], "mockup": [27, 74], "entangle_protocol": [27, 74], "remote_entangle_protocol": [27, 74], "egp_alic": [27, 74], "egp_bob": [27, 74], "proto": [27, 74], "req_1": [27, 74], "show_result": [27, 74], "req_2": [27, 74], "req_3": [27, 74], "ok_sign": [27, 74], "0f": [27, 74], "q_port": [27, 74], "get_connected_port": [27, 35, 61, 74], "alice_mhp": [27, 74], "bob_mhp": [27, 74], "470": [27, 74], "2078020": [27, 74], "790": [27, 74], "791": [27, 74], "7506520": [27, 74], "2874": [27, 74], "2875": [27, 74], "18363520": [27, 74], "7042": [27, 74], "7043": [27, 74], "20400020": [27, 74], "7820": [27, 74], "7822": [27, 74], "22437010": [27, 74], "8604": [27, 74], "8602": [27, 74], "25828520": [27, 74], "9904": [27, 74], "9906": [27, 74], "reach": [27, 74, 92], "bright": [27, 74], "popul": [27, 74], "visibl": 27, "beamsplitt": 27, "physlay": 27, "port_a": [27, 28, 34, 61], "port_b": [27, 28, 34, 61], "demonstr": [28, 75, 86, 88, 90, 91], "4e": [28, 75, 86, 88, 93], "dephase_r": [28, 33, 56, 61, 75, 93], "protocol_alic": [28, 75, 93], "protocol_bob": [28, 75, 93], "q_conn": [28, 75, 88, 93], "get_connect": [28, 35, 61, 75, 93], "cycle_runtim": [28, 75, 93], "3f": [28, 75, 86, 88, 89, 90, 91, 92], "000": [28, 44, 75, 85, 90, 92], "initstateprogram": [28, 61, 79, 93], "transform": [28, 59, 85, 92, 93], "y0": [28, 46, 61, 82, 86, 89, 92, 93], "bellmeasurementprogram": [28, 61, 79, 93], "bellmeasurementprotocol": [28, 61, 79, 89, 93], "create_processor": [28, 61, 79, 93], "004": 28, "10000000": 28, "run_experi": [28, 61, 79, 93], "cycl": [28, 86, 88, 93], "veru": [28, 93], "generate_delai": [30, 32, 61, 85], "get_mean": [30, 61], "set_mean": [30, 61], "get_std": [30, 61], "__call__": [30, 65], "_concatenateddelaymodel": 30, "gaussian": [30, 59, 86], "modelcompositionexcept": [32, 61, 78], "t2": [33, 61], "commonli": 33, "phenomenolog": 33, "dictat": 33, "hahn": 33, "oppos": 33, "induct": 33, "apply_nois": [33, 61], "p_loss_init": [33, 61, 86], "p_loss_length": [33, 61, 86], "optic": [33, 86], "surviv": 33, "db": 33, "channel_atob": [34, 61, 85], "channel_btoa": [34, 61, 85], "unspecifi": [34, 54, 90], "test_network": 35, "huei": 35, "dewei": 35, "test_qproc": 35, "nodes2": 35, "carl": 35, "mem_carl": 35, "evan": 35, "mem_evan": 35, "node2": 35, "node3": 35, "node4": 35, "node5": 35, "my_connect": 35, "quantum_channel": 35, "channel_from": 35, "bidirect": 35, "label1": 35, "label2": 35, "across": 35, "port_2": 35, "port_c": 35, "node_2": 35, "node_c": 35, "handler_2": 35, "handler_c": 35, "hi": [35, 86, 87, 90, 92], "ch_delta_tim": [35, 86], "throw": [35, 91], "my_network": 35, "node0": 35, "node1": 35, "isn": 35, "connection_nam": [35, 61], "name1": 35, "name2": 35, "networkerror": [35, 61, 80], "seri": 36, "connection_port_nam": [36, 61], "remote_nod": [36, 85], "local_port_nam": [36, 85], "remote_port_nam": [36, 85], "unus": 36, "transmitt": 36, "tailor": 37, "process_data": [37, 61], "post_process_data": [37, 61], "post_process": 37, "offset": 37, "exec_protocol": [37, 61], "9223372036854775807": 38, "predefin": [39, 41, 56, 65, 66, 86, 89, 92], "submit": 39, "req_writ": 39, "req": 39, "differenti": 39, "_field": 39, "__main__": 39, "_schedule_aft": [40, 84, 90], "_schedule_at": [40, 84], "_schedule_now": [40, 65, 84, 90], "_wait_onc": [40, 84, 90], "atomic_id": [40, 84], "atomic_sourc": [40, 84, 90], "atomic_typ": [40, 84], "reprim": [40, 84], "triggered_tim": [40, 84, 90], "default_prior": [40, 84], "highest_prior": [40, 84], "lowest_prior": [40, 84], "current_tim": [40, 84], "get_diagnostic_info": [40, 84], "get_expression_handl": [40, 84], "num_ev": [40, 84], "num_handl": [40, 84], "num_inst": [40, 84], "24": 41, "localclifford": [41, 44, 61, 82], "cliff_i": [41, 44], "bmatrix": [41, 49, 56], "cliff_x": 41, "cliff_z": 41, "cliff_": 41, "sqrt": [41, 44, 46, 47, 49, 51, 56, 87, 92], "iz": 41, "cliff_sx": 41, "cliff_si": 41, "cliff_sz": 41, "cliff_h": [41, 44], "cliff_hx": 41, "cliff_hi": 41, "cliff_hz": 41, "cliff_k": 41, "cliff_kx": 41, "cliff_ki": 41, "ix": 41, "cliff_kz": 41, "cliff_hk": 41, "cliff_hkx": 41, "cliff_hki": 41, "cliff_hkz": 41, "cliff_kh": 41, "cliff_khx": 41, "cliff_khi": 41, "cliff_khz": 41, "local_clifford": [41, 44], "cliff_cz": 41, "cliff_swap": 41, "pars": 41, "dagger_phas": [41, 61], "cliffordki": 41, "cliffordsz": 41, "multiply_with_phas": [41, 61], "tool": [42, 44, 47, 50, 57, 59, 68, 90], "2d": [42, 47, 57, 59], "array_lik": [42, 47, 49, 57, 59], "cast": [42, 47, 57, 59], "mix": [42, 44, 47, 51, 52, 56, 57, 59, 92], "basis_indic": [42, 44, 47, 52, 57, 59], "basis_oper": [42, 44, 47, 52, 57, 59], "eigenket": [42, 44, 47, 49, 52, 57, 59, 61], "emtpi": [42, 44, 47, 52, 57, 59], "my": [42, 44, 47, 52, 57, 59], "is_valid": [42, 44, 47, 52, 57, 59, 61], "log_oper": [42, 44, 47, 52, 54, 57, 59, 61], "opnam": [42, 44, 47, 52, 54, 57, 59], "measure_discard": [42, 44, 47, 52, 57, 59, 61], "smart_tensor": [42, 44, 47, 52, 57, 59, 61], "force_append": [42, 44, 47, 52, 57, 59], "smart": [42, 52], "comparison": [42, 52, 84], "why": [42, 52], "dm1": [42, 57], "spcifi": [42, 57], "dm2": [42, 57], "represet": [42, 57], "math": [42, 47, 57, 64], "subtract": [42, 47, 57], "dm_epr": [42, 57], "dm_out": [42, 57], "unedit": [43, 49, 56, 58, 67, 68], "s0": [43, 46, 49, 56, 58, 61, 82, 91], "s1": [43, 46, 61, 82], "h0": [43, 46, 61, 82], "h1": [43, 46, 48, 49, 58, 61, 82, 90], "reorder": [43, 48, 58], "psi": [43, 48, 50, 51, 58, 59, 87], "rho_a": 43, "rho_b": 43, "calc_amplitude_dampen_op": [43, 61, 82], "gamma": [43, 56, 92], "krau": 43, "propabl": 43, "stationari": [43, 56], "wheter": 43, "lookkup": 43, "111": 44, "cliffordi": 44, "cliffordz": 44, "458": 44, "local_complement": [44, 61], "clifford_correct": 44, "complement": 44, "around": [44, 49, 55, 92], "vertex": [44, 51], "index_qubit": 44, "operate_cz": [44, 61], "py_ssize_t": [44, 58, 59], "target_index": [44, 59], "control_index": 44, "operate_qubit": [44, 54, 61], "swap_indic": [44, 61], "index1": 44, "index2": 44, "interest": [45, 58, 88, 90], "70710678": [46, 47, 49], "70710678j": [46, 49], "0_y": [46, 92], "y1": [46, 61, 82], "1_y": 46, "beta_": [46, 92], "00": [46, 49, 51, 52, 56, 85, 86, 87, 90, 92], "phi_plu": [46, 61], "psi_plu": [46, 61], "psi_minu": [46, 61], "phi_minu": [46, 61], "ket1": 47, "ket2": 47, "ket_epr": 47, "ket_out": [47, 50], "0000000e": 47, "00j": [47, 49], "2246468e": 47, "16j": 47, "other_ket": 48, "shield": 49, "arithmet": [49, 56, 57], "vari": 49, "caching_en": [49, 59, 61, 82], "cacheabl": [49, 59, 61], "linear": [49, 85, 87, 92], "spmatrix": [49, 58], "unavoid": 49, "advantag": [49, 51, 57], "theta": [49, 56], "pi": [49, 56, 92], "1j": [49, 56, 92], "sin": [49, 56], "92387": 49, "38268": 49, "4j": 49, "92": [49, 56], "38j": [49, 56], "easiest": 49, "499": [49, 56], "is_clifford": [49, 61], "is_unitari": [49, 61, 92], "is_hermitian": [49, 61, 92], "is_project": [49, 61], "is_real": [49, 61], "csr": [49, 57, 58, 61], "ct": [49, 56], "707": 49, "ry90inv": 49, "ry90": 49, "r_y": [49, 56], "allclos": 49, "rz90conj": 49, "rz90": 49, "r_z": 49, "descend": 49, "eigenv": [49, 61], "rotation_axi": [49, 92], "bloch": [49, 87, 92], "sphere": [49, 87, 92], "r_": 49, "hat": 49, "n_x": 49, "n_y": 49, "n_z": 49, "rx": [49, 85, 86], "r_x": [49, 92], "57": 49, "rad": 49, "71": [49, 56], "79": [49, 92], "92387953": 49, "27059805": 49, "27059805j": 49, "p_b00": 49, "p_b01": 49, "p_b11": 49, "p_b10": 49, "rho_out": 50, "interchang": 51, "broadli": 51, "disadvantag": [51, 57], "ye": 51, "ensembl": [51, 56, 60], "128": 51, "2n": [51, 59], "mathcal": 51, "nd": 51, "typic": 51, "max": [51, 56, 85, 90], "3n": 51, "scriptstyl": 51, "mea": [51, 85, 92], "exact": 51, "highli": 51, "deal": [51, 68], "accur": [51, 85, 92], "bet": 51, "choic": 51, "shine": 51, "go": [51, 87, 90], "pmatrix": 51, "compress": [51, 57, 58], "row": [51, 57, 59, 65], "limits_": 51, "p_i": [51, 56, 59], "psi_1": 51, "dot": [51, 92], "psi_m": 51, "p_1": [51, 56], "p_m": 51, "pa_1": 51, "otim": [51, 59], "a_n": 51, "a_i": 51, "leq": 51, "vmatrix": 51, "x_": 51, "1n": 51, "z_": 51, "vdot": 51, "ddot": 51, "n1": 51, "nn": 51, "p_n": 51, "p_j": 51, "ij": 51, "bigotim": 51, "nx": 51, "modulo": 51, "prod": [51, 59], "graphic": 51, "automaticali": 51, "register_convers": [51, 52, 61, 82], "versatil": [51, 69, 92], "scale": [51, 57, 92], "wors": 51, "thousand": [51, 92], "sparsedmtool": [51, 61, 66, 82], "myqrepr": 51, "myrepr": 51, "del": 51, "hasattr": 51, "get_qstate_form": [51, 61, 82, 92], "nonzero": 52, "qrepr_typ": 52, "deregist": 52, "deregister_convers": [52, 61, 82], "conversionerror": [52, 53, 61, 82], "input_qrepr_typ": 52, "output_qrepr_typ": 52, "quick": [52, 85, 86], "verif": 52, "assertionerror": 52, "signatur": 52, "gslc_repr": 53, "graphstat": 53, "stab_repr": [53, 56], "ket2stab": [53, 61, 82], "ket_repr": 53, "ket2gslc": [53, 61, 82], "qrepr2sparsedm": [53, 61, 82], "qrepr2dm": [53, 61, 82], "qrepr2ket": [53, 61, 82], "consitut": 54, "combine_qst": [54, 61], "qstatecombineerror": [54, 61, 82], "gain": 54, "other_qst": 54, "drop_qubit": [54, 61], "new_qrepr": 54, "shrink": 55, "principl": [55, 65, 86, 89], "hidden": 55, "persist": 55, "other_qubit": 55, "indeped": 56, "encount": [56, 85, 92], "randomli": [56, 86], "diag": 56, "85355339": 56, "35355339j": 56, "14644661": 56, "simpler": 56, "39": 56, "simultan": [56, 89, 90, 91], "7071": 56, "uniform": 56, "o_i": 56, "varepsilon": 56, "mimic": 56, "abitrari": 56, "w_i": 56, "peform": 56, "e0": 56, "e0_ad": 56, "e1": 56, "e1_ad": 56, "e2": 56, "e2_ad": 56, "e3": 56, "e3_ad": 56, "95": 56, "05": [56, 85], "shorthand": [56, 92], "suitabl": 56, "check_oper": 56, "operat": 56, "unlik": [56, 88, 92], "p_0": 56, "14": 56, "typl": 56, "75": [56, 92], "80": [56, 86, 89, 90], "e_i": 56, "align": 56, "e_0": 56, "e_1": 56, "e_2": 56, "e_3": 56, "unaffect": 56, "rho_": 56, "infti": 56, "depol": 56, "deph": 56, "ampl": 56, "depolaris": [56, 91, 93], "63": [56, 86], "exp": 56, "10e9": 56, "6321": 56, "procedur": 56, "slice": [57, 60], "csc": 57, "fact": 57, "sparsiti": 57, "dok": 57, "lil": 57, "coordin": 57, "coo": 57, "often": [57, 85], "sparse_dm": [57, 61], "0j": [57, 58], "sparse_allr": [58, 61, 82], "spmat": 58, "sparse_allclos": [58, 61, 82], "spmat1": 58, "spmat2": 58, "atol": 58, "1e": [58, 64], "08": 58, "csr_matrix_nocheck": [58, 61, 82], "arg1": 58, "shape": 58, "sparse_rho": 58, "sparse_trac": [58, 61, 82], "rho_target": 58, "rho_refer": 58, "sparse_dm_check": 58, "is_valid_sparse_dm": [58, 61, 82], "inde": [58, 90, 92], "csrmat": 58, "sparse_mul_dense_vector": [58, 61, 82], "densevec": 58, "_cs_matrix": 58, "_mul_vector": 58, "densemat": 58, "_mul_multivector": 58, "sparse_kron_identity_left": [58, 61, 82], "sparse_kron_identity_right": [58, 61, 82], "sparse_kron_identity_middl": [58, 61, 82], "insert_index": 58, "insert": [58, 86], "expon": 58, "check_matrix": [59, 61, 92], "destab_matrix": [59, 61], "g_i": 59, "phi": 59, "liter": 59, "addition": 59, "destabil": 59, "determinist": 59, "1d": 59, "pm": 59, "stab1": 59, "dtype": [59, 60, 92], "uint8": [59, 92], "int8": [59, 92], "stab2": 59, "stab_out": 59, "row_index": 59, "multiply_row": [59, 61], "mult_index": 59, "g_k": 59, "elimin": [59, 68, 84], "normalize_phas": 59, "izi": 59, "algorithm": 59, "garcia": 59, "pauli_indic": 59, "significantli": [59, 90], "state1": 60, "state2": 60, "succ_prob": 60, "exclude_non": 60, "succ_qrepr": 60, "succ_label": 60, "get_leav": [60, 61], "base_prob": 60, "base_label": 60, "num_stat": [60, 61], "probability_of_non": [60, 61], "qreprutil": [61, 82], "cchannel": [61, 66, 77, 86, 88], "cqchannel": [61, 77], "qdetector": [61, 77], "componentsmodel": [61, 78], "cerrormodel": [61, 78], "millisecond": [61, 68, 83], "microsecond": [61, 68, 83, 86], "picosecond": [61, 68, 83], "sim_stat": [61, 68, 83], "timeline_statu": [61, 67], "cycach": [61, 83], "size_limit": [61, 63], "correct_global_phas": [61, 64, 83], "isclos": [61, 64, 83], "get_typ": [61, 62], "get_mut": [61, 62], "get_global_constraint": [61, 62], "get_constraint": [61, 62], "internal_add": [61, 62], "internal_del": [61, 62], "constr_not": [61, 62], "constr_and": [61, 62], "positive_constr": [61, 62, 83], "negative_constr": [61, 62, 83], "nonnegative_constr": [61, 62, 83], "nonpositive_constr": [61, 62, 83], "not_none_constr": [61, 62, 83], "integer_constr": [61, 62, 83], "repeater_chain": [61, 73, 79], "magic_simple_link": [61, 71, 79], "global_constraint": 62, "hashabl": 62, "constrained_map": 62, "cm": 62, "map_view": 62, "34": 62, "constraint_funct": 62, "error_messag": 62, "error_typ": 62, "throw_error": 62, "thrown": [62, 68, 84], "negat": 62, "obsolet": 62, "rewrit": 62, "setitem": 63, "50mb": 63, "stackoverflow": 63, "rel_tol": 64, "09": 64, "abs_tol": 64, "time_stamp": 65, "entity_nam": 65, "raw": 65, "combine_rul": 65, "OR": [65, 84, 89, 90], "get_source_id": 65, "dummy_ent": 65, "get_source_equals_ent": 65, "addingcallableclass": 65, "var_1": 65, "var_2": 65, "dummy_entity_2": 65, "rain_ev": 65, "rain": [65, 84], "raini": [65, 84], "weather": [65, 84], "entity_10": 65, "highest": [65, 84], "lowest": [65, 84], "buffer": 65, "slower": [65, 90], "AND": [65, 84, 89, 90], "rule": 65, "test_ent": 65, "sun_ev": 65, "sun": 65, "sunni": 65, "evexpr_rain": [65, 84], "evexpr_sun": 65, "evexpr_rainbow": 65, "get_weather_condit": 65, "collecton": 65, "facil": 66, "notset": 66, "critic": 66, "stacklevel": 66, "filenam": 66, "linenumb": 66, "caller": 66, "max_memory_increas": 66, "include_default_filt": 66, "traceback": [66, 91], "memoryerror": 66, "tracemalloc": 66, "snapshot": 66, "wall": 67, "quantum_ops_tot": 67, "accumul": 67, "printabl": 67, "magnitud": 68, "1000000000": 68, "001": 68, "005": 68, "preced": 68, "resum": [68, 84, 89], "perman": [68, 84], "frozen": [68, 84], "invok": [68, 84], "dispos": [68, 84], "bring": [68, 84], "_random_st": 68, "test_typ": 68, "discover": 68, "welcom": [69, 85], "imul": 69, "qu": 69, "antum": 69, "nformat": 69, "iscret": 69, "menu": 69, "navig": 69, "panel": 69, "introduct": [69, 85, 87], "qia": 69, "minut": [69, 90, 92], "studi": 70, "dirnam": 70, "__add__": 78, "superclass": 78, "model1": 78, "model2": 78, "neq": 78, "freed": 84, "__cinit__": 84, "_cyentiti": 84, "heap": 84, "safe": 84, "__new__": 84, "event_id": [84, 90], "any_id": [84, 90], "instantan": 84, "declar": 84, "criteria": 84, "triffer": 84, "_waitonc": 84, "invoc": 84, "th": 84, "signific": 84, "_wrapped_": 84, "lookuperror": 84, "hopefulli": [84, 88], "__is_memory_alloc": 84, "lon": 84, "fromsourcea": 84, "fromsourceb": 84, "typec": 84, "any_sourc": 84, "any_typ": 84, "eventid": 84, "snow": 84, "weather_servic": 84, "gaia": 84, "evtype_rain": 84, "evtype_snow": 84, "snowi": 84, "evexpr_snow": 84, "evexpr_wetweath": 84, "warning_callback": 84, "triggered_expr": 84, "Be": 84, "warning_handl": 84, "okai": 84, "ventur": 84, "untrigg": 84, "_default_priority_level_eventhandl": 84, "wait_onc": 84, "callback_funct": 84, "safe_guard": 84, "guard": 84, "_closure_": 84, "bewar": 84, "_i": 84, "5_": 84, "_eventhandl": 84, "callbacka": 84, "callbackb": 84, "cb": 84, "callbackasmethod": 84, "handlera": 84, "handlerb": 84, "handlerc": 84, "ev": 84, "_expressionhandl": 84, "eventexpr": 84, "There": [84, 86, 89, 90, 93], "session": 84, "behavior": 84, "shot": 84, "sim_engin": 84, "outlin": 85, "question": 85, "ask": 85, "walk": 85, "plai": [85, 90], "game": [85, 86, 89, 90], "player": [85, 86], "cartoon": 85, "utilis": [85, 92], "piec": 85, "passag": [85, 90], "actor": 85, "decoher": [85, 86, 92], "ag": 85, "algebra": [85, 92], "measurement_result": 85, "1f": [85, 86, 89, 90], "yourself": 85, "evolut": 85, "nutshel": 85, "chronolog": 85, "react": [85, 88, 90], "hit": 85, "14n": 85, "he": [85, 87, 89, 90], "17n": 85, "characteris": 85, "node_p": [85, 89], "node_pong": [85, 89], "light": [85, 86, 89], "pingpongdelaymodel": 85, "speed_of_light_fract": 85, "standard_devi": 85, "300": 85, "3e5": 85, "avg_spe": 85, "74": 85, "meter": 85, "channel_1": 85, "channel_2": 85, "choos": [85, 86, 92], "goe": 85, "sake": 85, "pingpongprotocol": 85, "pretti": 85, "tx": [85, 86], "2f": [85, 86, 89, 90, 92], "infinitum": 85, "ping_protocol": [85, 89], "pong_protocol": [85, 89], "forev": 85, "run_stat": 85, "17": 85, "33": 85, "51": [85, 89], "69": 85, "87": 85, "104": 85, "122": 85, "140": [85, 89], "157": 85, "176": 85, "197": 85, "214": 85, "231": 85, "250": 85, "267": 85, "284": 85, "diagnos": 85, "00e": [85, 90], "02": [85, 90], "32": 85, "frequent": [85, 90], "conclud": 85, "elabor": 85, "asterix": [86, 88, 89, 90, 91, 92, 93], "learnt": 86, "mychannel": 86, "approach": 86, "delaychannel": 86, "fixed_delaymodel": 86, "gaussian_delaymodel": 86, "cabl": 86, "tutorialchannel": 86, "attenu": 86, "experienc": 86, "properi": 86, "83": 86, "myqchannel": 86, "mymemori": 86, "slot": 86, "proport": 86, "idli": [86, 89], "mhz": 86, "depolar_nois": 86, "depolarmemori": 86, "revisit": 86, "recap": 86, "transport": [86, 87], "modular": 86, "pingpong": 86, "qinx": 86, "pingent": [86, 90], "pongent": [86, 90], "tell": [86, 90, 92], "2e": 86, "pingmemori": 86, "pingchannel": 86, "_handle_input_qubit": 86, "wait_for_pong": [86, 90], "other_ent": 86, "labels_z": [86, 89, 90, 92], "pongmemori": 86, "wait_for_p": [86, 90], "labels_x": [86, 89, 90, 92], "clariti": 86, "91": [86, 89, 90], "40": [86, 89, 90], "60": [86, 89, 90], "70": [86, 89, 90], "saw": [86, 93], "exchang": [86, 90], "teleport_st": [86, 90], "cchannel_send_port": 86, "alicememori": [86, 88], "m0": [86, 90], "1e7": [86, 88, 90, 91, 92, 93], "cchannel_recv_port": 86, "bobmemori": [86, 88], "_handle_correct": 86, "charli": [86, 88, 90, 93], "her": [86, 87, 88, 89, 90, 92, 93], "b_": [86, 87, 90], "charlie_sourc": 86, "emul": 86, "ghz": 86, "909": [86, 89, 90, 92], "quit": 87, "unfamiliar": 87, "shortli": [87, 92], "theori": 87, "horizont": 87, "polaris": 87, "superposit": 87, "beta": 87, "mathbb": 87, "lie": 87, "surfac": 87, "orthogon": 87, "contrari": 87, "theorem": 87, "secondli": 87, "particl": 87, "electron": 87, "epr": 87, "blog": 87, "book": 87, "nielsen": 87, "chuang": 87, "2016": 87, "royaum": 87, "uni": 87, "cambridg": 87, "press": 87, "youtub": 87, "video": 87, "memory1": 88, "relationship": 88, "treatment": 88, "qin_charli": [88, 89, 93], "channel_a2b": [88, 93], "cconnect": 88, "ve": 88, "bi": 88, "furthermor": [88, 91], "encompass": 88, "machineri": [88, 90], "cout_bob": [88, 89, 93], "cin_alic": [88, 89, 93], "c_conn": [88, 93], "2e7": 88, "qa": 88, "qb": 88, "964": 88, "steer": 89, "asynchron": 89, "inlin": 89, "waitprotocol": 89, "notabl": 89, "pingprotocol": 89, "port_to_channel": 89, "pongprotocol": 89, "channel_lr": 89, "channel_rl": 89, "110": 89, "120": 89, "130": 89, "150": 89, "160": 89, "initstateprotocol": 89, "expression_and": 89, "expression1": 89, "expression2": 89, "expression_or": 89, "expression3": 89, "expression4": 89, "qubit_protocol": 89, "qprotocol": 89, "qubit_initialis": [89, 93], "entanglement_readi": [89, 93], "evexpr_sign": 89, "evexpr_port": 89, "port_alic": [89, 93], "port_charli": [89, 93], "meas_result": [89, 93], "evexpr_port_a": 89, "evexpr_port_c": 89, "random_state_protocol": 89, "bell_measure_protocol": 89, "correction_protocol": 89, "870": 89, "afterward": 89, "gather": 89, "evolv": 90, "fortun": 90, "pedagog": 90, "shorten": 90, "hand": 90, "fashion": 90, "reproduc": 90, "ping_evtyp": 90, "ping_ev": 90, "pong_ent": 90, "pong_handl": 90, "_handle_pong_ev": 90, "pong_evtyp": 90, "pong_ev": 90, "ping_ent": 90, "ping_handl": 90, "_handle_ping_ev": 90, "infinit": 90, "10e": 90, "took": 90, "qubits_readi": 90, "_generate_evtyp": 90, "entangled_qubit": 90, "_generate_handl": 90, "_entangle_qubit": 90, "ingredi": 90, "_teleport_evtyp": 90, "him": 90, "correction_readi": 90, "_teleport_handl": 90, "_handle_teleport": 90, "wait_for_charli": 90, "_qubit_handl": 90, "_handle_qubit": 90, "__": 90, "wait_for_teleport": 90, "charlie_ready_evexpr": 90, "alice_ready_evexpr": 90, "both_ready_evexpr": 90, "_apply_correct": 90, "my_sourc": 90, "my_event_typ": 90, "testtyp": 90, "my_id": 90, "event_handler_callback": 90, "expr_handler_callback": 90, "event_handl": 90, "expr_handl": 90, "atomic_express": 90, "myentiti": 90, "funtion": 90, "07": 90, "noisybob": 90, "alice_expr": 90, "charlie_expr": 90, "hungri": 90, "reinitialis": 90, "rerun": 90, "programmat": 91, "exampleqmem": 91, "exampleqpu": 91, "toi": 91, "noisy_qproc": 91, "noisyqpu": 91, "condition": 91, "ll": [91, 93], "entangleprogram": 91, "teleportationprogram": 91, "922": 91, "anatomi": 92, "conserv": 92, "superlinearli": 92, "although": 92, "rare": 92, "stateless": 92, "notat": 92, "anew": 92, "h01": 92, "a1": 92, "b1": 92, "a2": 92, "meaning": 92, "circ": 92, "purpl": 92, "arrow": 92, "blue": 92, "anim": 92, "5j": 92, "newop": 92, "41": 92, "newop2": 92, "cr": 92, "cr_x": 92, "upcom": 92, "bell_oper": 92, "labels_bel": 92, "recov": 92, "touch": 92, "highlight": 93, "qsource_": 93, "measure_noise_model": 93, "quantum_processor": 93, "funcion": 93, "teleportation_network": 93, "4e4": 93, "port_ac": 93, "port_bc": 93, "qubit_init_program": 93, "measure_program": 93, "bsm": 93, "notic": 93, "insid": 93, "collect_fidelity_data": 93, "fidelity_data": 93, "df": 93, "concat": 93, "plot_styl": 93, "scatter": 93, "grid": 93, "groupbi": 93, "reset_index": 93, "ineffici": 93, "decoh": 93}, "objects": {"netsquid.components": [[8, 0, 0, "-", "cchannel"], [9, 0, 0, "-", "ccoding"], [10, 0, 0, "-", "channel"], [11, 0, 0, "-", "clock"], [12, 0, 0, "-", "component"], [13, 0, 0, "-", "cqchannel"], [14, 0, 0, "-", "instructions"], [15, 0, 0, "-", "qchannel"], [16, 0, 0, "-", "qdetector"], [17, 0, 0, "-", "qmemory"], [18, 0, 0, "-", "qprocessor"], [19, 0, 0, "-", "qprogram"], [20, 0, 0, "-", "qsource"], [21, 0, 0, "-", "switch"]], "netsquid.components.cchannel": [[8, 1, 1, "", "ClassicalChannel"]], "netsquid.components.cchannel.ClassicalChannel": [[8, 2, 1, "", "add_ports"], [8, 2, 1, "", "add_property"], [8, 2, 1, "", "add_subcomponent"], [8, 3, 1, "", "classical_code"], [8, 2, 1, "", "compute_delay"], [8, 4, 1, "", "delay_mean"], [8, 4, 1, "", "delay_std"], [8, 2, 1, "", "has_subcomponent"], [8, 2, 1, "", "has_supercomponent"], [8, 4, 1, "", "last_rx_time"], [8, 4, 1, "", "models"], [8, 4, 1, "", "name"], [8, 4, 1, "", "output_empty"], [8, 2, 1, "", "peek"], [8, 4, 1, "", "ports"], [8, 2, 1, "", "postprocess_outputs"], [8, 2, 1, "", "preprocess_inputs"], [8, 4, 1, "", "properties"], [8, 2, 1, "", "receive"], [8, 2, 1, "", "rem_subcomponent"], [8, 2, 1, "", "remove"], [8, 2, 1, "", "reset"], [8, 2, 1, "", "send"], [8, 2, 1, "", "specify_model"], [8, 4, 1, "", "subcomponents"], [8, 4, 1, "", "supercomponent"], [8, 4, 1, "", "transmit_empty_items"], [8, 4, 1, "", "transmitting"], [8, 4, 1, "", "uid"], [8, 3, 1, "", "use_classical_code"]], "netsquid.components.ccoding": [[9, 1, 1, "", "ClassicalCodingFactory"], [9, 1, 1, "", "CodedItem"]], "netsquid.components.ccoding.ClassicalCodingFactory": [[9, 2, 1, "", "create_coded_item"]], "netsquid.components.ccoding.CodedItem": [[9, 2, 1, "", "apply_loss_model"], [9, 2, 1, "", "decode"], [9, 2, 1, "", "encode"], [9, 3, 1, "", "encoded_item"], [9, 3, 1, "", "encoding_type"], [9, 3, 1, "", "has_encoding"], [9, 3, 1, "", "item"], [9, 3, 1, "", "object_types"]], "netsquid.components.channel": [[10, 1, 1, "", "Channel"], [10, 5, 1, "", "ChannelDelayError"], [10, 5, 1, "", "ChannelError"]], "netsquid.components.channel.Channel": [[10, 2, 1, "", "add_ports"], [10, 2, 1, "", "add_property"], [10, 2, 1, "", "add_subcomponent"], [10, 2, 1, "", "compute_delay"], [10, 4, 1, "", "delay_mean"], [10, 4, 1, "", "delay_std"], [10, 2, 1, "", "has_subcomponent"], [10, 2, 1, "", "has_supercomponent"], [10, 4, 1, "", "last_rx_time"], [10, 4, 1, "", "models"], [10, 4, 1, "", "name"], [10, 4, 1, "", "output_empty"], [10, 2, 1, "", "peek"], [10, 4, 1, "", "ports"], [10, 2, 1, "", "postprocess_outputs"], [10, 2, 1, "", "preprocess_inputs"], [10, 4, 1, "", "properties"], [10, 2, 1, "", "receive"], [10, 2, 1, "", "rem_subcomponent"], [10, 2, 1, "", "remove"], [10, 2, 1, "", "reset"], [10, 2, 1, "", "send"], [10, 2, 1, "", "specify_model"], [10, 4, 1, "", "subcomponents"], [10, 4, 1, "", "supercomponent"], [10, 4, 1, "", "transmit_empty_items"], [10, 4, 1, "", "transmitting"], [10, 4, 1, "", "uid"]], "netsquid.components.channel.ChannelDelayError": [[10, 2, 1, "", "with_traceback"]], "netsquid.components.channel.ChannelError": [[10, 2, 1, "", "with_traceback"]], "netsquid.components.clock": [[11, 1, 1, "", "Clock"]], "netsquid.components.clock.Clock": [[11, 2, 1, "", "add_ports"], [11, 2, 1, "", "add_property"], [11, 2, 1, "", "add_subcomponent"], [11, 3, 1, "", "frequency"], [11, 2, 1, "", "get_period"], [11, 2, 1, "", "has_subcomponent"], [11, 2, 1, "", "has_supercomponent"], [11, 3, 1, "", "is_running"], [11, 4, 1, "", "models"], [11, 4, 1, "", "name"], [11, 3, 1, "", "num_ticks"], [11, 4, 1, "", "ports"], [11, 4, 1, "", "properties"], [11, 2, 1, "", "rem_subcomponent"], [11, 2, 1, "", "remove"], [11, 2, 1, "", "reset"], [11, 2, 1, "", "specify_model"], [11, 2, 1, "", "start"], [11, 2, 1, "", "stop"], [11, 4, 1, "", "subcomponents"], [11, 4, 1, "", "supercomponent"], [11, 4, 1, "", "uid"]], "netsquid.components.component": [[12, 1, 1, "", "Component"], [12, 5, 1, "", "ComponentError"], [12, 5, 1, "", "ComponentHierarchyError"], [12, 1, 1, "", "Message"], [12, 1, 1, "", "Port"], [12, 5, 1, "", "PortBindError"], [12, 5, 1, "", "PortConnectError"], [12, 5, 1, "", "PortError"], [12, 5, 1, "", "PortForwardError"]], "netsquid.components.component.Component": [[12, 2, 1, "", "add_ports"], [12, 2, 1, "", "add_property"], [12, 2, 1, "", "add_subcomponent"], [12, 2, 1, "", "has_subcomponent"], [12, 2, 1, "", "has_supercomponent"], [12, 4, 1, "", "models"], [12, 4, 1, "", "name"], [12, 4, 1, "", "ports"], [12, 4, 1, "", "properties"], [12, 2, 1, "", "rem_subcomponent"], [12, 2, 1, "", "remove"], [12, 2, 1, "", "reset"], [12, 2, 1, "", "specify_model"], [12, 4, 1, "", "subcomponents"], [12, 4, 1, "", "supercomponent"], [12, 4, 1, "", "uid"]], "netsquid.components.component.ComponentError": [[12, 2, 1, "", "with_traceback"]], "netsquid.components.component.ComponentHierarchyError": [[12, 2, 1, "", "with_traceback"]], "netsquid.components.component.Message": [[12, 2, 1, "", "discard_qubits"], [12, 4, 1, "", "items"], [12, 4, 1, "", "meta"]], "netsquid.components.component.Port": [[12, 2, 1, "", "bind_input_handler"], [12, 2, 1, "", "bind_output_handler"], [12, 4, 1, "", "component"], [12, 2, 1, "", "connect"], [12, 4, 1, "", "connected_port"], [12, 2, 1, "", "disconnect"], [12, 2, 1, "", "forward_input"], [12, 2, 1, "", "forward_output"], [12, 4, 1, "", "forwarded_ports"], [12, 4, 1, "", "input_queue"], [12, 4, 1, "", "is_connected"], [12, 4, 1, "", "name"], [12, 4, 1, "", "notify_all_input"], [12, 4, 1, "", "notify_all_output"], [12, 4, 1, "", "notify_next_input"], [12, 4, 1, "", "notify_next_output"], [12, 4, 1, "", "output_queue"], [12, 2, 1, "", "query_meta_input"], [12, 2, 1, "", "query_meta_output"], [12, 2, 1, "", "remove"], [12, 2, 1, "", "reset"], [12, 2, 1, "", "rx_input"], [12, 2, 1, "", "rx_output"], [12, 2, 1, "", "tx_input"], [12, 2, 1, "", "tx_output"], [12, 4, 1, "", "uid"]], "netsquid.components.component.PortBindError": [[12, 2, 1, "", "with_traceback"]], "netsquid.components.component.PortConnectError": [[12, 2, 1, "", "with_traceback"]], "netsquid.components.component.PortError": [[12, 2, 1, "", "with_traceback"]], "netsquid.components.component.PortForwardError": [[12, 2, 1, "", "with_traceback"]], "netsquid.components.cqchannel": [[13, 1, 1, "", "CombinedChannel"]], "netsquid.components.cqchannel.CombinedChannel": [[13, 2, 1, "", "add_ports"], [13, 2, 1, "", "add_property"], [13, 2, 1, "", "add_subcomponent"], [13, 3, 1, "", "classical_code"], [13, 2, 1, "", "compute_delay"], [13, 4, 1, "", "delay_mean"], [13, 4, 1, "", "delay_std"], [13, 2, 1, "", "has_subcomponent"], [13, 2, 1, "", "has_supercomponent"], [13, 4, 1, "", "last_rx_time"], [13, 4, 1, "", "models"], [13, 4, 1, "", "name"], [13, 4, 1, "", "output_empty"], [13, 2, 1, "", "peek"], [13, 4, 1, "", "ports"], [13, 2, 1, "", "postprocess_outputs"], [13, 2, 1, "", "preprocess_inputs"], [13, 4, 1, "", "properties"], [13, 2, 1, "", "receive"], [13, 2, 1, "", "rem_subcomponent"], [13, 2, 1, "", "remove"], [13, 2, 1, "", "reset"], [13, 2, 1, "", "send"], [13, 2, 1, "", "specify_model"], [13, 4, 1, "", "subcomponents"], [13, 4, 1, "", "supercomponent"], [13, 4, 1, "", "transmit_empty_items"], [13, 4, 1, "", "transmitting"], [13, 4, 1, "", "uid"], [13, 3, 1, "", "use_classical_code"]], "netsquid.components.instructions": [[14, 1, 1, "", "IControlledDirectionGate"], [14, 1, 1, "", "IEmit"], [14, 1, 1, "", "IGate"], [14, 1, 1, "", "IInit"], [14, 1, 1, "", "IMeasure"], [14, 1, 1, "", "IMeasureBell"], [14, 1, 1, "", "IMeasureFaulty"], [14, 6, 1, "", "INSTR_CCX"], [14, 6, 1, "", "INSTR_CDIR"], [14, 6, 1, "", "INSTR_CNOT"], [14, 6, 1, "", "INSTR_CROT"], [14, 6, 1, "", "INSTR_CROT_X"], [14, 6, 1, "", "INSTR_CROT_Y"], [14, 6, 1, "", "INSTR_CROT_Z"], [14, 6, 1, "", "INSTR_CS"], [14, 6, 1, "", "INSTR_CX"], [14, 6, 1, "", "INSTR_CXDIR"], [14, 6, 1, "", "INSTR_CYDIR"], [14, 6, 1, "", "INSTR_CZ"], [14, 6, 1, "", "INSTR_CZDIR"], [14, 6, 1, "", "INSTR_DISCARD"], [14, 6, 1, "", "INSTR_EMIT"], [14, 6, 1, "", "INSTR_H"], [14, 6, 1, "", "INSTR_I"], [14, 6, 1, "", "INSTR_INIT"], [14, 6, 1, "", "INSTR_MEASURE"], [14, 6, 1, "", "INSTR_MEASURE_BELL"], [14, 6, 1, "", "INSTR_MEASURE_X"], [14, 6, 1, "", "INSTR_ROT"], [14, 6, 1, "", "INSTR_ROT_X"], [14, 6, 1, "", "INSTR_ROT_Y"], [14, 6, 1, "", "INSTR_ROT_Z"], [14, 6, 1, "", "INSTR_S"], [14, 6, 1, "", "INSTR_SIGNAL"], [14, 6, 1, "", "INSTR_SWAP"], [14, 6, 1, "", "INSTR_T"], [14, 6, 1, "", "INSTR_TOFFOLI"], [14, 6, 1, "", "INSTR_UNITARY"], [14, 6, 1, "", "INSTR_X"], [14, 6, 1, "", "INSTR_Y"], [14, 6, 1, "", "INSTR_Z"], [14, 1, 1, "", "IRotationGate"], [14, 1, 1, "", "ISignal"], [14, 1, 1, "", "ISwap"], [14, 1, 1, "", "Instruction"], [14, 5, 1, "", "InstructionError"]], "netsquid.components.instructions.IControlledDirectionGate": [[14, 2, 1, "", "execute"], [14, 3, 1, "", "name"], [14, 3, 1, "", "num_positions"]], "netsquid.components.instructions.IEmit": [[14, 2, 1, "", "execute"], [14, 3, 1, "", "name"], [14, 3, 1, "", "num_positions"]], "netsquid.components.instructions.IGate": [[14, 2, 1, "", "execute"], [14, 3, 1, "", "name"], [14, 3, 1, "", "num_positions"]], "netsquid.components.instructions.IInit": [[14, 2, 1, "", "execute"], [14, 3, 1, "", "name"], [14, 3, 1, "", "num_positions"]], "netsquid.components.instructions.IMeasure": [[14, 2, 1, "", "execute"], [14, 3, 1, "", "name"], [14, 3, 1, "", "num_positions"]], "netsquid.components.instructions.IMeasureBell": [[14, 2, 1, "", "execute"], [14, 3, 1, "", "name"], [14, 3, 1, "", "num_positions"]], "netsquid.components.instructions.IMeasureFaulty": [[14, 2, 1, "", "execute"], [14, 3, 1, "", "name"], [14, 3, 1, "", "num_positions"]], "netsquid.components.instructions.IRotationGate": [[14, 2, 1, "", "execute"], [14, 3, 1, "", "name"], [14, 3, 1, "", "num_positions"]], "netsquid.components.instructions.ISignal": [[14, 2, 1, "", "execute"], [14, 3, 1, "", "name"], [14, 3, 1, "", "num_positions"]], "netsquid.components.instructions.ISwap": [[14, 2, 1, "", "execute"], [14, 3, 1, "", "name"], [14, 3, 1, "", "num_positions"]], "netsquid.components.instructions.Instruction": [[14, 2, 1, "", "execute"], [14, 3, 1, "", "name"], [14, 3, 1, "", "num_positions"]], "netsquid.components.instructions.InstructionError": [[14, 2, 1, "", "with_traceback"]], "netsquid.components.models": [[29, 0, 0, "-", "cerrormodels"], [30, 0, 0, "-", "delaymodels"], [31, 0, 0, "-", "errormodels"], [32, 0, 0, "-", "model"], [33, 0, 0, "-", "qerrormodels"]], "netsquid.components.models.cerrormodels": [[29, 1, 1, "", "ClassicalErrorModel"]], "netsquid.components.models.cerrormodels.ClassicalErrorModel": [[29, 2, 1, "", "add_property"], [29, 2, 1, "", "compute_model"], [29, 2, 1, "", "concatenation_class"], [29, 2, 1, "", "error_operation"], [29, 3, 1, "", "is_concatenated"], [29, 3, 1, "", "properties"], [29, 3, 1, "", "required_properties"], [29, 2, 1, "", "validate"]], "netsquid.components.models.delaymodels": [[30, 1, 1, "", "DelayModel"], [30, 1, 1, "", "FibreDelayModel"], [30, 1, 1, "", "FixedDelayModel"], [30, 1, 1, "", "GaussianDelayModel"]], "netsquid.components.models.delaymodels.DelayModel": [[30, 2, 1, "", "add_property"], [30, 2, 1, "", "compute_model"], [30, 2, 1, "", "concatenation_class"], [30, 2, 1, "", "generate_delay"], [30, 2, 1, "", "get_mean"], [30, 2, 1, "", "get_std"], [30, 3, 1, "", "is_concatenated"], [30, 3, 1, "", "properties"], [30, 3, 1, "", "required_properties"], [30, 3, 1, "", "rng"], [30, 2, 1, "", "set_mean"], [30, 2, 1, "", "validate"]], "netsquid.components.models.delaymodels.FibreDelayModel": [[30, 2, 1, "", "add_property"], [30, 3, 1, "", "c"], [30, 2, 1, "", "compute_model"], [30, 2, 1, "", "concatenation_class"], [30, 2, 1, "", "generate_delay"], [30, 2, 1, "", "get_mean"], [30, 2, 1, "", "get_std"], [30, 3, 1, "", "is_concatenated"], [30, 3, 1, "", "properties"], [30, 3, 1, "", "required_properties"], [30, 3, 1, "", "rng"], [30, 2, 1, "", "set_mean"], [30, 2, 1, "", "validate"]], "netsquid.components.models.delaymodels.FixedDelayModel": [[30, 2, 1, "", "add_property"], [30, 2, 1, "", "compute_model"], [30, 2, 1, "", "concatenation_class"], [30, 3, 1, "", "delay"], [30, 2, 1, "", "generate_delay"], [30, 2, 1, "", "get_mean"], [30, 2, 1, "", "get_std"], [30, 3, 1, "", "is_concatenated"], [30, 3, 1, "", "properties"], [30, 3, 1, "", "required_properties"], [30, 3, 1, "", "rng"], [30, 2, 1, "", "set_mean"], [30, 2, 1, "", "validate"]], "netsquid.components.models.delaymodels.GaussianDelayModel": [[30, 2, 1, "", "add_property"], [30, 2, 1, "", "compute_model"], [30, 2, 1, "", "concatenation_class"], [30, 3, 1, "", "delay_mean"], [30, 3, 1, "", "delay_std"], [30, 2, 1, "", "generate_delay"], [30, 2, 1, "", "get_mean"], [30, 2, 1, "", "get_std"], [30, 3, 1, "", "is_concatenated"], [30, 3, 1, "", "properties"], [30, 3, 1, "", "required_properties"], [30, 3, 1, "", "rng"], [30, 2, 1, "", "set_mean"], [30, 2, 1, "", "validate"]], "netsquid.components.models.errormodels": [[31, 1, 1, "", "ErrorModel"]], "netsquid.components.models.errormodels.ErrorModel": [[31, 2, 1, "", "add_property"], [31, 2, 1, "", "compute_model"], [31, 2, 1, "", "concatenation_class"], [31, 2, 1, "", "error_operation"], [31, 3, 1, "", "is_concatenated"], [31, 3, 1, "", "properties"], [31, 3, 1, "", "required_properties"], [31, 2, 1, "", "validate"]], "netsquid.components.models.model": [[32, 1, 1, "", "Model"], [32, 5, 1, "", "ModelCompositionException"]], "netsquid.components.models.model.Model": [[32, 2, 1, "", "add_property"], [32, 2, 1, "", "compute_model"], [32, 2, 1, "", "concatenation_class"], [32, 3, 1, "", "is_concatenated"], [32, 3, 1, "", "properties"], [32, 3, 1, "", "required_properties"], [32, 2, 1, "", "validate"]], "netsquid.components.models.model.ModelCompositionException": [[32, 2, 1, "", "with_traceback"]], "netsquid.components.models.qerrormodels": [[33, 1, 1, "", "DephaseNoiseModel"], [33, 1, 1, "", "DepolarNoiseModel"], [33, 1, 1, "", "FibreLossModel"], [33, 1, 1, "", "QuantumErrorModel"], [33, 1, 1, "", "T1T2NoiseModel"]], "netsquid.components.models.qerrormodels.DephaseNoiseModel": [[33, 2, 1, "", "add_property"], [33, 2, 1, "", "compute_model"], [33, 2, 1, "", "concatenation_class"], [33, 3, 1, "", "dephase_rate"], [33, 2, 1, "", "error_operation"], [33, 3, 1, "", "is_concatenated"], [33, 2, 1, "", "lose_qubit"], [33, 3, 1, "", "properties"], [33, 3, 1, "", "required_properties"], [33, 3, 1, "", "time_independent"], [33, 2, 1, "", "validate"]], "netsquid.components.models.qerrormodels.DepolarNoiseModel": [[33, 2, 1, "", "add_property"], [33, 2, 1, "", "compute_model"], [33, 2, 1, "", "concatenation_class"], [33, 3, 1, "", "depolar_rate"], [33, 2, 1, "", "error_operation"], [33, 3, 1, "", "is_concatenated"], [33, 2, 1, "", "lose_qubit"], [33, 3, 1, "", "properties"], [33, 3, 1, "", "required_properties"], [33, 3, 1, "", "time_independent"], [33, 2, 1, "", "validate"]], "netsquid.components.models.qerrormodels.FibreLossModel": [[33, 2, 1, "", "add_property"], [33, 2, 1, "", "compute_model"], [33, 2, 1, "", "concatenation_class"], [33, 2, 1, "", "error_operation"], [33, 3, 1, "", "is_concatenated"], [33, 2, 1, "", "lose_qubit"], [33, 3, 1, "", "p_loss_init"], [33, 3, 1, "", "p_loss_length"], [33, 3, 1, "", "properties"], [33, 3, 1, "", "required_properties"], [33, 3, 1, "", "rng"], [33, 2, 1, "", "validate"]], "netsquid.components.models.qerrormodels.QuantumErrorModel": [[33, 2, 1, "", "add_property"], [33, 2, 1, "", "compute_model"], [33, 2, 1, "", "concatenation_class"], [33, 2, 1, "", "error_operation"], [33, 3, 1, "", "is_concatenated"], [33, 2, 1, "", "lose_qubit"], [33, 3, 1, "", "properties"], [33, 3, 1, "", "required_properties"], [33, 2, 1, "", "validate"]], "netsquid.components.models.qerrormodels.T1T2NoiseModel": [[33, 3, 1, "", "T1"], [33, 3, 1, "", "T2"], [33, 2, 1, "", "add_property"], [33, 2, 1, "", "apply_noise"], [33, 2, 1, "", "compute_model"], [33, 2, 1, "", "concatenation_class"], [33, 2, 1, "", "error_operation"], [33, 3, 1, "", "is_concatenated"], [33, 2, 1, "", "lose_qubit"], [33, 3, 1, "", "properties"], [33, 3, 1, "", "required_properties"], [33, 2, 1, "", "validate"]], "netsquid.components.qchannel": [[15, 1, 1, "", "QuantumChannel"]], "netsquid.components.qchannel.QuantumChannel": [[15, 2, 1, "", "add_ports"], [15, 2, 1, "", "add_property"], [15, 2, 1, "", "add_subcomponent"], [15, 2, 1, "", "compute_delay"], [15, 4, 1, "", "delay_mean"], [15, 4, 1, "", "delay_std"], [15, 2, 1, "", "has_subcomponent"], [15, 2, 1, "", "has_supercomponent"], [15, 4, 1, "", "last_rx_time"], [15, 4, 1, "", "models"], [15, 4, 1, "", "name"], [15, 4, 1, "", "output_empty"], [15, 2, 1, "", "peek"], [15, 4, 1, "", "ports"], [15, 2, 1, "", "postprocess_outputs"], [15, 2, 1, "", "preprocess_inputs"], [15, 4, 1, "", "properties"], [15, 2, 1, "", "receive"], [15, 2, 1, "", "rem_subcomponent"], [15, 2, 1, "", "remove"], [15, 2, 1, "", "reset"], [15, 2, 1, "", "send"], [15, 2, 1, "", "specify_model"], [15, 4, 1, "", "subcomponents"], [15, 4, 1, "", "supercomponent"], [15, 4, 1, "", "transmit_empty_items"], [15, 4, 1, "", "transmitting"], [15, 4, 1, "", "uid"]], "netsquid.components.qdetector": [[16, 1, 1, "", "GatedQuantumDetector"], [16, 1, 1, "", "QuantumDetector"], [16, 5, 1, "", "QuantumDetectorError"]], "netsquid.components.qdetector.GatedQuantumDetector": [[16, 2, 1, "", "add_ports"], [16, 2, 1, "", "add_property"], [16, 2, 1, "", "add_subcomponent"], [16, 2, 1, "", "finish"], [16, 2, 1, "", "has_subcomponent"], [16, 2, 1, "", "has_supercomponent"], [16, 4, 1, "", "in_dead_time"], [16, 2, 1, "", "inform"], [16, 4, 1, "", "input_port_names"], [16, 4, 1, "", "is_triggered"], [16, 2, 1, "", "measure"], [16, 4, 1, "", "models"], [16, 4, 1, "", "name"], [16, 4, 1, "", "output_port_names"], [16, 4, 1, "", "ports"], [16, 2, 1, "", "postprocess_outputs"], [16, 2, 1, "", "preprocess_inputs"], [16, 4, 1, "", "properties"], [16, 2, 1, "", "rem_subcomponent"], [16, 2, 1, "", "remove"], [16, 2, 1, "", "reset"], [16, 2, 1, "", "set_input_models"], [16, 2, 1, "", "set_output_models"], [16, 2, 1, "", "specify_model"], [16, 4, 1, "", "subcomponents"], [16, 4, 1, "", "supercomponent"], [16, 2, 1, "", "trigger"], [16, 4, 1, "", "uid"]], "netsquid.components.qdetector.QuantumDetector": [[16, 2, 1, "", "add_ports"], [16, 2, 1, "", "add_property"], [16, 2, 1, "", "add_subcomponent"], [16, 2, 1, "", "finish"], [16, 2, 1, "", "has_subcomponent"], [16, 2, 1, "", "has_supercomponent"], [16, 4, 1, "", "in_dead_time"], [16, 2, 1, "", "inform"], [16, 4, 1, "", "input_port_names"], [16, 4, 1, "", "is_triggered"], [16, 2, 1, "", "measure"], [16, 4, 1, "", "models"], [16, 4, 1, "", "name"], [16, 4, 1, "", "output_port_names"], [16, 4, 1, "", "ports"], [16, 2, 1, "", "postprocess_outputs"], [16, 2, 1, "", "preprocess_inputs"], [16, 4, 1, "", "properties"], [16, 2, 1, "", "rem_subcomponent"], [16, 2, 1, "", "remove"], [16, 2, 1, "", "reset"], [16, 2, 1, "", "set_input_models"], [16, 2, 1, "", "set_output_models"], [16, 2, 1, "", "specify_model"], [16, 4, 1, "", "subcomponents"], [16, 4, 1, "", "supercomponent"], [16, 2, 1, "", "trigger"], [16, 4, 1, "", "uid"]], "netsquid.components.qdetector.QuantumDetectorError": [[16, 2, 1, "", "with_traceback"]], "netsquid.components.qmemory": [[17, 5, 1, "", "MemPositionBusyError"], [17, 5, 1, "", "MemPositionEmptyError"], [17, 5, 1, "", "MemPositionInUseError"], [17, 1, 1, "", "MemoryPosition"], [17, 1, 1, "", "QuantumMemory"], [17, 5, 1, "", "QuantumMemoryError"]], "netsquid.components.qmemory.MemPositionBusyError": [[17, 2, 1, "", "with_traceback"]], "netsquid.components.qmemory.MemPositionEmptyError": [[17, 2, 1, "", "with_traceback"]], "netsquid.components.qmemory.MemPositionInUseError": [[17, 2, 1, "", "with_traceback"]], "netsquid.components.qmemory.MemoryPosition": [[17, 2, 1, "", "add_ports"], [17, 2, 1, "", "add_property"], [17, 2, 1, "", "add_subcomponent"], [17, 4, 1, "", "busy"], [17, 4, 1, "", "busy_event_enabled"], [17, 4, 1, "", "evtype_busy_toggled"], [17, 4, 1, "", "evtype_in_use_toggled"], [17, 2, 1, "", "get_qubit"], [17, 2, 1, "", "has_subcomponent"], [17, 2, 1, "", "has_supercomponent"], [17, 4, 1, "", "in_use"], [17, 4, 1, "", "in_use_event_enabled"], [17, 4, 1, "", "is_empty"], [17, 4, 1, "", "meta"], [17, 4, 1, "", "models"], [17, 4, 1, "", "name"], [17, 4, 1, "", "ports"], [17, 4, 1, "", "properties"], [17, 2, 1, "", "rem_subcomponent"], [17, 2, 1, "", "remove"], [17, 2, 1, "", "reset"], [17, 2, 1, "", "set_qubit"], [17, 2, 1, "", "specify_model"], [17, 4, 1, "", "subcomponents"], [17, 4, 1, "", "supercomponent"], [17, 4, 1, "", "time_last_access"], [17, 4, 1, "", "uid"]], "netsquid.components.qmemory.QuantumMemory": [[17, 2, 1, "", "add_ports"], [17, 2, 1, "", "add_property"], [17, 2, 1, "", "add_subcomponent"], [17, 2, 1, "", "delta_time"], [17, 2, 1, "", "discard"], [17, 2, 1, "", "get_matching_positions"], [17, 2, 1, "", "get_matching_qubits"], [17, 2, 1, "", "get_position_empty"], [17, 2, 1, "", "get_position_used"], [17, 2, 1, "", "has_subcomponent"], [17, 2, 1, "", "has_supercomponent"], [17, 2, 1, "", "measure"], [17, 2, 1, "", "measure_faulty"], [17, 4, 1, "", "mem_positions"], [17, 4, 1, "", "models"], [17, 4, 1, "", "name"], [17, 4, 1, "", "num_positions"], [17, 2, 1, "", "operate"], [17, 2, 1, "", "peek"], [17, 2, 1, "", "pop"], [17, 4, 1, "", "ports"], [17, 4, 1, "", "properties"], [17, 2, 1, "", "put"], [17, 2, 1, "", "rem_subcomponent"], [17, 2, 1, "", "remove"], [17, 2, 1, "", "reset"], [17, 2, 1, "", "send_signal"], [17, 2, 1, "", "set_position_used"], [17, 2, 1, "", "signal"], [17, 2, 1, "", "specify_model"], [17, 4, 1, "", "subcomponents"], [17, 4, 1, "", "supercomponent"], [17, 4, 1, "", "uid"], [17, 4, 1, "", "unused_positions"], [17, 4, 1, "", "used_positions"]], "netsquid.components.qmemory.QuantumMemoryError": [[17, 2, 1, "", "with_traceback"]], "netsquid.components.qprocessor": [[18, 5, 1, "", "MissingInstructionError"], [18, 1, 1, "", "PhysicalIndex"], [18, 1, 1, "", "PhysicalInstruction"], [18, 5, 1, "", "ProcessorBusyError"], [18, 5, 1, "", "ProcessorError"], [18, 1, 1, "", "ProcessorStatus"], [18, 5, 1, "", "ProgramMappingError"], [18, 1, 1, "", "QuantumProcessor"]], "netsquid.components.qprocessor.MissingInstructionError": [[18, 2, 1, "", "with_traceback"]], "netsquid.components.qprocessor.PhysicalInstruction": [[18, 2, 1, "", "apply_q_noise"], [18, 4, 1, "", "apply_q_noise_after"], [18, 4, 1, "", "classical_noise_model"], [18, 4, 1, "", "duration"], [18, 4, 1, "", "instr_params"], [18, 4, 1, "", "instruction"], [18, 4, 1, "", "parallel"], [18, 4, 1, "", "quantum_noise_model"], [18, 4, 1, "", "topology"]], "netsquid.components.qprocessor.ProcessorBusyError": [[18, 2, 1, "", "with_traceback"]], "netsquid.components.qprocessor.ProcessorError": [[18, 2, 1, "", "with_traceback"]], "netsquid.components.qprocessor.ProcessorStatus": [[18, 4, 1, "", "FAILED"], [18, 4, 1, "", "IDLE"], [18, 4, 1, "", "PAUSED"], [18, 4, 1, "", "RUNNING"]], "netsquid.components.qprocessor.ProgramMappingError": [[18, 2, 1, "", "with_traceback"]], "netsquid.components.qprocessor.QuantumProcessor": [[18, 2, 1, "", "active_instructions"], [18, 2, 1, "", "add_composite_instruction"], [18, 2, 1, "", "add_instruction"], [18, 2, 1, "", "add_physical_instruction"], [18, 2, 1, "", "add_ports"], [18, 2, 1, "", "add_property"], [18, 2, 1, "", "add_subcomponent"], [18, 4, 1, "", "busy"], [18, 2, 1, "", "delta_time"], [18, 2, 1, "", "discard"], [18, 4, 1, "", "evtype_program_done"], [18, 4, 1, "", "evtype_program_fail"], [18, 2, 1, "", "execute_instruction"], [18, 2, 1, "", "execute_program"], [18, 4, 1, "", "fail_exception"], [18, 4, 1, "", "fallback_to_nonphysical"], [18, 2, 1, "", "get_composite_instruction_decomposition"], [18, 2, 1, "", "get_composite_instructions"], [18, 2, 1, "", "get_finished_instrs"], [18, 2, 1, "", "get_instruction_duration"], [18, 2, 1, "", "get_matching_positions"], [18, 2, 1, "", "get_matching_qubits"], [18, 2, 1, "", "get_physical_instructions"], [18, 2, 1, "", "get_position_empty"], [18, 2, 1, "", "get_position_used"], [18, 2, 1, "", "get_program_duration"], [18, 2, 1, "", "has_subcomponent"], [18, 2, 1, "", "has_supercomponent"], [18, 2, 1, "", "measure"], [18, 2, 1, "", "measure_faulty"], [18, 4, 1, "", "mem_positions"], [18, 4, 1, "", "models"], [18, 4, 1, "", "name"], [18, 4, 1, "", "num_positions"], [18, 2, 1, "", "operate"], [18, 2, 1, "", "peek"], [18, 2, 1, "", "pop"], [18, 4, 1, "", "ports"], [18, 2, 1, "", "program_mapping"], [18, 4, 1, "", "properties"], [18, 2, 1, "", "put"], [18, 2, 1, "", "rem_subcomponent"], [18, 2, 1, "", "remove"], [18, 2, 1, "", "reset"], [18, 2, 1, "", "send_signal"], [18, 4, 1, "", "sequence_end_time"], [18, 2, 1, "", "set_position_used"], [18, 2, 1, "", "set_program_done_callback"], [18, 2, 1, "", "set_program_fail_callback"], [18, 2, 1, "", "signal"], [18, 2, 1, "", "specify_model"], [18, 4, 1, "", "status"], [18, 2, 1, "", "stop_program"], [18, 4, 1, "", "subcomponents"], [18, 4, 1, "", "supercomponent"], [18, 4, 1, "", "uid"], [18, 4, 1, "", "unused_positions"], [18, 4, 1, "", "used_positions"]], "netsquid.components.qprocessor.netsquid.components.qprocessor": [[18, 4, 1, "", "error_on_program_fail"], [18, 4, 1, "", "nv_super_instructions"]], "netsquid.components.qprogram": [[19, 1, 1, "", "QuantumProgram"], [19, 5, 1, "", "QuantumProgramError"]], "netsquid.components.qprogram.QuantumProgram": [[19, 2, 1, "", "apply"], [19, 4, 1, "", "default_num_qubits"], [19, 2, 1, "", "get_qubit_indices"], [19, 2, 1, "", "load"], [19, 3, 1, "", "num_qubits"], [19, 4, 1, "", "output"], [19, 4, 1, "", "parallel"], [19, 2, 1, "", "program"], [19, 2, 1, "", "reset"], [19, 2, 1, "", "run"]], "netsquid.components.qprogram.QuantumProgramError": [[19, 2, 1, "", "with_traceback"]], "netsquid.components.qsource": [[20, 1, 1, "", "QSource"], [20, 1, 1, "", "SourceStatus"]], "netsquid.components.qsource.QSource": [[20, 2, 1, "", "add_ports"], [20, 2, 1, "", "add_property"], [20, 2, 1, "", "add_subcomponent"], [20, 4, 1, "", "frequency"], [20, 2, 1, "", "has_subcomponent"], [20, 2, 1, "", "has_supercomponent"], [20, 4, 1, "", "models"], [20, 4, 1, "", "name"], [20, 4, 1, "", "output_meta"], [20, 4, 1, "", "period"], [20, 4, 1, "", "ports"], [20, 4, 1, "", "prep_delay"], [20, 4, 1, "", "properties"], [20, 2, 1, "", "rem_subcomponent"], [20, 2, 1, "", "remove"], [20, 2, 1, "", "reset"], [20, 2, 1, "", "specify_model"], [20, 4, 1, "", "state_sampler"], [20, 4, 1, "", "status"], [20, 4, 1, "", "subcomponents"], [20, 4, 1, "", "supercomponent"], [20, 2, 1, "", "trigger"], [20, 4, 1, "", "uid"]], "netsquid.components.qsource.SourceStatus": [[20, 4, 1, "", "EXTERNAL"], [20, 4, 1, "", "INTERNAL"], [20, 4, 1, "", "OFF"]], "netsquid.components.switch": [[21, 1, 1, "", "SimpleSwitch"], [21, 1, 1, "", "Switch"], [21, 5, 1, "", "SwitchError"]], "netsquid.components.switch.SimpleSwitch": [[21, 2, 1, "", "add_ports"], [21, 2, 1, "", "add_property"], [21, 2, 1, "", "add_subcomponent"], [21, 2, 1, "", "has_subcomponent"], [21, 2, 1, "", "has_supercomponent"], [21, 4, 1, "", "models"], [21, 4, 1, "", "name"], [21, 4, 1, "", "ports"], [21, 4, 1, "", "properties"], [21, 2, 1, "", "rem_subcomponent"], [21, 2, 1, "", "remove"], [21, 2, 1, "", "reset"], [21, 2, 1, "", "routing_table"], [21, 2, 1, "", "specify_model"], [21, 4, 1, "", "subcomponents"], [21, 4, 1, "", "supercomponent"], [21, 3, 1, "", "topology"], [21, 4, 1, "", "uid"]], "netsquid.components.switch.Switch": [[21, 2, 1, "", "add_ports"], [21, 2, 1, "", "add_property"], [21, 2, 1, "", "add_subcomponent"], [21, 2, 1, "", "has_subcomponent"], [21, 2, 1, "", "has_supercomponent"], [21, 4, 1, "", "models"], [21, 4, 1, "", "name"], [21, 4, 1, "", "ports"], [21, 4, 1, "", "properties"], [21, 2, 1, "", "rem_subcomponent"], [21, 2, 1, "", "remove"], [21, 2, 1, "", "reset"], [21, 2, 1, "", "routing_table"], [21, 2, 1, "", "specify_model"], [21, 4, 1, "", "subcomponents"], [21, 4, 1, "", "supercomponent"], [21, 4, 1, "", "uid"]], "netsquid.components.switch.SwitchError": [[21, 2, 1, "", "with_traceback"]], "netsquid.examples": [[22, 0, 0, "-", "entanglenodes"], [24, 0, 0, "-", "purify"], [25, 0, 0, "-", "repeater"], [26, 0, 0, "-", "repeater_chain"], [28, 0, 0, "-", "teleportation"]], "netsquid.examples.entanglenodes": [[22, 1, 1, "", "EntangleNodes"], [22, 7, 1, "", "example_network_setup"]], "netsquid.examples.entanglenodes.EntangleNodes": [[22, 2, 1, "", "add_signal"], [22, 2, 1, "", "add_subprotocol"], [22, 2, 1, "", "await_mempos_busy_toggle"], [22, 2, 1, "", "await_mempos_in_use_toggle"], [22, 2, 1, "", "await_port_input"], [22, 2, 1, "", "await_port_output"], [22, 2, 1, "", "await_program"], [22, 2, 1, "", "await_signal"], [22, 2, 1, "", "await_timer"], [22, 2, 1, "", "can_signal_to"], [22, 2, 1, "", "check_assigned"], [22, 2, 1, "", "get_signal_by_event"], [22, 2, 1, "", "get_signal_result"], [22, 3, 1, "", "is_connected"], [22, 4, 1, "", "is_running"], [22, 3, 1, "", "max_nodes"], [22, 4, 1, "", "name"], [22, 3, 1, "", "node"], [22, 3, 1, "", "nodes"], [22, 2, 1, "", "remove"], [22, 2, 1, "", "reset"], [22, 2, 1, "", "run"], [22, 2, 1, "", "send_signal"], [22, 4, 1, "", "signals"], [22, 2, 1, "", "specify_node"], [22, 2, 1, "", "start"], [22, 2, 1, "", "start_subprotocols"], [22, 2, 1, "", "stop"], [22, 4, 1, "", "subprotocols"], [22, 4, 1, "", "uid"]], "netsquid.examples.purify": [[24, 1, 1, "", "Distil"], [24, 1, 1, "", "Filter"], [24, 1, 1, "", "FilteringExample"], [24, 7, 1, "", "example_network_setup"], [24, 7, 1, "", "example_sim_setup"]], "netsquid.examples.purify.Distil": [[24, 2, 1, "", "add_signal"], [24, 2, 1, "", "add_subprotocol"], [24, 2, 1, "", "await_mempos_busy_toggle"], [24, 2, 1, "", "await_mempos_in_use_toggle"], [24, 2, 1, "", "await_port_input"], [24, 2, 1, "", "await_port_output"], [24, 2, 1, "", "await_program"], [24, 2, 1, "", "await_signal"], [24, 2, 1, "", "await_timer"], [24, 2, 1, "", "can_signal_to"], [24, 2, 1, "", "check_assigned"], [24, 2, 1, "", "get_signal_by_event"], [24, 2, 1, "", "get_signal_result"], [24, 3, 1, "", "is_connected"], [24, 4, 1, "", "is_running"], [24, 3, 1, "", "max_nodes"], [24, 4, 1, "", "name"], [24, 3, 1, "", "node"], [24, 3, 1, "", "nodes"], [24, 2, 1, "", "remove"], [24, 2, 1, "", "reset"], [24, 2, 1, "", "run"], [24, 2, 1, "", "send_signal"], [24, 4, 1, "", "signals"], [24, 2, 1, "", "specify_node"], [24, 2, 1, "", "start"], [24, 2, 1, "", "start_subprotocols"], [24, 2, 1, "", "stop"], [24, 4, 1, "", "subprotocols"], [24, 4, 1, "", "uid"]], "netsquid.examples.purify.Filter": [[24, 2, 1, "", "add_signal"], [24, 2, 1, "", "add_subprotocol"], [24, 2, 1, "", "await_mempos_busy_toggle"], [24, 2, 1, "", "await_mempos_in_use_toggle"], [24, 2, 1, "", "await_port_input"], [24, 2, 1, "", "await_port_output"], [24, 2, 1, "", "await_program"], [24, 2, 1, "", "await_signal"], [24, 2, 1, "", "await_timer"], [24, 2, 1, "", "can_signal_to"], [24, 2, 1, "", "check_assigned"], [24, 2, 1, "", "get_signal_by_event"], [24, 2, 1, "", "get_signal_result"], [24, 3, 1, "", "is_connected"], [24, 4, 1, "", "is_running"], [24, 3, 1, "", "max_nodes"], [24, 4, 1, "", "meas_ops"], [24, 4, 1, "", "name"], [24, 3, 1, "", "node"], [24, 3, 1, "", "nodes"], [24, 2, 1, "", "remove"], [24, 2, 1, "", "reset"], [24, 2, 1, "", "run"], [24, 2, 1, "", "send_signal"], [24, 4, 1, "", "signals"], [24, 2, 1, "", "specify_node"], [24, 2, 1, "", "start"], [24, 2, 1, "", "start_subprotocols"], [24, 2, 1, "", "stop"], [24, 4, 1, "", "subprotocols"], [24, 4, 1, "", "uid"]], "netsquid.examples.purify.FilteringExample": [[24, 2, 1, "", "add_signal"], [24, 2, 1, "", "add_subprotocol"], [24, 2, 1, "", "await_mempos_busy_toggle"], [24, 2, 1, "", "await_mempos_in_use_toggle"], [24, 2, 1, "", "await_port_input"], [24, 2, 1, "", "await_port_output"], [24, 2, 1, "", "await_program"], [24, 2, 1, "", "await_signal"], [24, 2, 1, "", "await_timer"], [24, 2, 1, "", "can_signal_to"], [24, 2, 1, "", "check_assigned"], [24, 2, 1, "", "get_signal_by_event"], [24, 2, 1, "", "get_signal_result"], [24, 3, 1, "", "is_connected"], [24, 4, 1, "", "is_running"], [24, 3, 1, "", "max_nodes"], [24, 4, 1, "", "name"], [24, 3, 1, "", "nodes"], [24, 2, 1, "", "remove"], [24, 2, 1, "", "reset"], [24, 4, 1, "", "results"], [24, 2, 1, "", "run"], [24, 2, 1, "", "send_signal"], [24, 4, 1, "", "signals"], [24, 2, 1, "", "specify_node"], [24, 2, 1, "", "start"], [24, 2, 1, "", "start_subprotocols"], [24, 2, 1, "", "stop"], [24, 4, 1, "", "subprotocols"], [24, 4, 1, "", "uid"]], "netsquid.examples.repeater": [[25, 1, 1, "", "Repeater"], [25, 1, 1, "", "RepeaterExample"], [25, 7, 1, "", "example_network_setup"], [25, 7, 1, "", "example_sim_setup"]], "netsquid.examples.repeater.Repeater": [[25, 2, 1, "", "add_signal"], [25, 2, 1, "", "add_subprotocol"], [25, 2, 1, "", "await_mempos_busy_toggle"], [25, 2, 1, "", "await_mempos_in_use_toggle"], [25, 2, 1, "", "await_port_input"], [25, 2, 1, "", "await_port_output"], [25, 2, 1, "", "await_program"], [25, 2, 1, "", "await_signal"], [25, 2, 1, "", "await_timer"], [25, 2, 1, "", "can_signal_to"], [25, 2, 1, "", "check_assigned"], [25, 2, 1, "", "get_signal_by_event"], [25, 2, 1, "", "get_signal_result"], [25, 3, 1, "", "is_connected"], [25, 4, 1, "", "is_running"], [25, 3, 1, "", "max_nodes"], [25, 4, 1, "", "name"], [25, 3, 1, "", "node"], [25, 3, 1, "", "nodes"], [25, 2, 1, "", "remove"], [25, 2, 1, "", "reset"], [25, 2, 1, "", "run"], [25, 2, 1, "", "send_signal"], [25, 4, 1, "", "signals"], [25, 2, 1, "", "specify_node"], [25, 2, 1, "", "start"], [25, 2, 1, "", "start_subprotocols"], [25, 2, 1, "", "stop"], [25, 4, 1, "", "subprotocols"], [25, 4, 1, "", "uid"]], "netsquid.examples.repeater.RepeaterExample": [[25, 2, 1, "", "add_signal"], [25, 2, 1, "", "add_subprotocol"], [25, 2, 1, "", "await_mempos_busy_toggle"], [25, 2, 1, "", "await_mempos_in_use_toggle"], [25, 2, 1, "", "await_port_input"], [25, 2, 1, "", "await_port_output"], [25, 2, 1, "", "await_program"], [25, 2, 1, "", "await_signal"], [25, 2, 1, "", "await_timer"], [25, 2, 1, "", "can_signal_to"], [25, 2, 1, "", "check_assigned"], [25, 2, 1, "", "get_signal_by_event"], [25, 2, 1, "", "get_signal_result"], [25, 3, 1, "", "is_connected"], [25, 4, 1, "", "is_running"], [25, 3, 1, "", "max_nodes"], [25, 4, 1, "", "name"], [25, 3, 1, "", "nodes"], [25, 2, 1, "", "remove"], [25, 2, 1, "", "reset"], [25, 2, 1, "", "run"], [25, 2, 1, "", "send_signal"], [25, 4, 1, "", "signals"], [25, 2, 1, "", "specify_node"], [25, 2, 1, "", "start"], [25, 2, 1, "", "start_subprotocols"], [25, 2, 1, "", "stop"], [25, 4, 1, "", "subprotocols"], [25, 4, 1, "", "uid"]], "netsquid.examples.repeater_chain": [[26, 1, 1, "", "CorrectProtocol"], [26, 1, 1, "", "FibreDepolarizeModel"], [26, 1, 1, "", "SwapCorrectProgram"], [26, 1, 1, "", "SwapProtocol"], [26, 7, 1, "", "create_plot"], [26, 7, 1, "", "create_qprocessor"], [26, 7, 1, "", "run_simulation"], [26, 7, 1, "", "setup_datacollector"], [26, 7, 1, "", "setup_network"], [26, 7, 1, "", "setup_repeater_protocol"]], "netsquid.examples.repeater_chain.CorrectProtocol": [[26, 2, 1, "", "add_signal"], [26, 2, 1, "", "add_subprotocol"], [26, 2, 1, "", "await_mempos_busy_toggle"], [26, 2, 1, "", "await_mempos_in_use_toggle"], [26, 2, 1, "", "await_port_input"], [26, 2, 1, "", "await_port_output"], [26, 2, 1, "", "await_program"], [26, 2, 1, "", "await_signal"], [26, 2, 1, "", "await_timer"], [26, 2, 1, "", "can_signal_to"], [26, 2, 1, "", "check_assigned"], [26, 2, 1, "", "get_signal_by_event"], [26, 2, 1, "", "get_signal_result"], [26, 3, 1, "", "is_connected"], [26, 4, 1, "", "is_running"], [26, 3, 1, "", "max_nodes"], [26, 4, 1, "", "name"], [26, 3, 1, "", "node"], [26, 3, 1, "", "nodes"], [26, 2, 1, "", "remove"], [26, 2, 1, "", "reset"], [26, 2, 1, "", "run"], [26, 2, 1, "", "send_signal"], [26, 4, 1, "", "signals"], [26, 2, 1, "", "specify_node"], [26, 2, 1, "", "start"], [26, 2, 1, "", "start_subprotocols"], [26, 2, 1, "", "stop"], [26, 4, 1, "", "subprotocols"], [26, 4, 1, "", "uid"]], "netsquid.examples.repeater_chain.FibreDepolarizeModel": [[26, 2, 1, "", "add_property"], [26, 2, 1, "", "compute_model"], [26, 2, 1, "", "concatenation_class"], [26, 2, 1, "", "error_operation"], [26, 3, 1, "", "is_concatenated"], [26, 2, 1, "", "lose_qubit"], [26, 3, 1, "", "properties"], [26, 3, 1, "", "required_properties"], [26, 2, 1, "", "validate"]], "netsquid.examples.repeater_chain.SwapCorrectProgram": [[26, 2, 1, "", "apply"], [26, 4, 1, "", "default_num_qubits"], [26, 2, 1, "", "get_qubit_indices"], [26, 2, 1, "", "load"], [26, 3, 1, "", "num_qubits"], [26, 2, 1, "", "program"], [26, 2, 1, "", "reset"], [26, 2, 1, "", "run"]], "netsquid.examples.repeater_chain.SwapProtocol": [[26, 2, 1, "", "add_signal"], [26, 2, 1, "", "add_subprotocol"], [26, 2, 1, "", "await_mempos_busy_toggle"], [26, 2, 1, "", "await_mempos_in_use_toggle"], [26, 2, 1, "", "await_port_input"], [26, 2, 1, "", "await_port_output"], [26, 2, 1, "", "await_program"], [26, 2, 1, "", "await_signal"], [26, 2, 1, "", "await_timer"], [26, 2, 1, "", "can_signal_to"], [26, 2, 1, "", "check_assigned"], [26, 2, 1, "", "get_signal_by_event"], [26, 2, 1, "", "get_signal_result"], [26, 3, 1, "", "is_connected"], [26, 4, 1, "", "is_running"], [26, 3, 1, "", "max_nodes"], [26, 4, 1, "", "name"], [26, 3, 1, "", "node"], [26, 3, 1, "", "nodes"], [26, 2, 1, "", "remove"], [26, 2, 1, "", "reset"], [26, 2, 1, "", "run"], [26, 2, 1, "", "send_signal"], [26, 4, 1, "", "signals"], [26, 2, 1, "", "specify_node"], [26, 2, 1, "", "start"], [26, 2, 1, "", "start_subprotocols"], [26, 2, 1, "", "stop"], [26, 4, 1, "", "subprotocols"], [26, 4, 1, "", "uid"]], "netsquid.examples.teleportation": [[28, 1, 1, "", "BellMeasurementProgram"], [28, 1, 1, "", "BellMeasurementProtocol"], [28, 1, 1, "", "ClassicalConnection"], [28, 1, 1, "", "CorrectionProtocol"], [28, 1, 1, "", "EntanglingConnection"], [28, 1, 1, "", "InitStateProgram"], [28, 7, 1, "", "create_plot"], [28, 7, 1, "", "create_processor"], [28, 7, 1, "", "example_network_setup"], [28, 7, 1, "", "example_sim_setup"], [28, 7, 1, "", "run_experiment"]], "netsquid.examples.teleportation.BellMeasurementProgram": [[28, 2, 1, "", "apply"], [28, 4, 1, "", "default_num_qubits"], [28, 2, 1, "", "get_qubit_indices"], [28, 2, 1, "", "load"], [28, 3, 1, "", "num_qubits"], [28, 2, 1, "", "program"], [28, 2, 1, "", "reset"], [28, 2, 1, "", "run"]], "netsquid.examples.teleportation.BellMeasurementProtocol": [[28, 2, 1, "", "add_signal"], [28, 2, 1, "", "add_subprotocol"], [28, 2, 1, "", "await_mempos_busy_toggle"], [28, 2, 1, "", "await_mempos_in_use_toggle"], [28, 2, 1, "", "await_port_input"], [28, 2, 1, "", "await_port_output"], [28, 2, 1, "", "await_program"], [28, 2, 1, "", "await_signal"], [28, 2, 1, "", "await_timer"], [28, 2, 1, "", "can_signal_to"], [28, 2, 1, "", "check_assigned"], [28, 2, 1, "", "get_signal_by_event"], [28, 2, 1, "", "get_signal_result"], [28, 3, 1, "", "is_connected"], [28, 4, 1, "", "is_running"], [28, 3, 1, "", "max_nodes"], [28, 4, 1, "", "name"], [28, 3, 1, "", "node"], [28, 3, 1, "", "nodes"], [28, 2, 1, "", "remove"], [28, 2, 1, "", "reset"], [28, 2, 1, "", "run"], [28, 2, 1, "", "send_signal"], [28, 4, 1, "", "signals"], [28, 2, 1, "", "specify_node"], [28, 2, 1, "", "start"], [28, 2, 1, "", "start_subprotocols"], [28, 2, 1, "", "stop"], [28, 4, 1, "", "subprotocols"], [28, 4, 1, "", "uid"]], "netsquid.examples.teleportation.ClassicalConnection": [[28, 2, 1, "", "add_ports"], [28, 2, 1, "", "add_property"], [28, 2, 1, "", "add_subcomponent"], [28, 2, 1, "", "has_subcomponent"], [28, 2, 1, "", "has_supercomponent"], [28, 4, 1, "", "models"], [28, 4, 1, "", "name"], [28, 3, 1, "", "port_A"], [28, 3, 1, "", "port_B"], [28, 4, 1, "", "ports"], [28, 4, 1, "", "properties"], [28, 2, 1, "", "rem_subcomponent"], [28, 2, 1, "", "remove"], [28, 2, 1, "", "reset"], [28, 2, 1, "", "specify_model"], [28, 4, 1, "", "subcomponents"], [28, 4, 1, "", "supercomponent"], [28, 4, 1, "", "uid"]], "netsquid.examples.teleportation.CorrectionProtocol": [[28, 2, 1, "", "add_signal"], [28, 2, 1, "", "add_subprotocol"], [28, 2, 1, "", "await_mempos_busy_toggle"], [28, 2, 1, "", "await_mempos_in_use_toggle"], [28, 2, 1, "", "await_port_input"], [28, 2, 1, "", "await_port_output"], [28, 2, 1, "", "await_program"], [28, 2, 1, "", "await_signal"], [28, 2, 1, "", "await_timer"], [28, 2, 1, "", "can_signal_to"], [28, 2, 1, "", "check_assigned"], [28, 2, 1, "", "get_signal_by_event"], [28, 2, 1, "", "get_signal_result"], [28, 3, 1, "", "is_connected"], [28, 4, 1, "", "is_running"], [28, 3, 1, "", "max_nodes"], [28, 4, 1, "", "name"], [28, 3, 1, "", "node"], [28, 3, 1, "", "nodes"], [28, 2, 1, "", "remove"], [28, 2, 1, "", "reset"], [28, 2, 1, "", "run"], [28, 2, 1, "", "send_signal"], [28, 4, 1, "", "signals"], [28, 2, 1, "", "specify_node"], [28, 2, 1, "", "start"], [28, 2, 1, "", "start_subprotocols"], [28, 2, 1, "", "stop"], [28, 4, 1, "", "subprotocols"], [28, 4, 1, "", "uid"]], "netsquid.examples.teleportation.EntanglingConnection": [[28, 2, 1, "", "add_ports"], [28, 2, 1, "", "add_property"], [28, 2, 1, "", "add_subcomponent"], [28, 2, 1, "", "has_subcomponent"], [28, 2, 1, "", "has_supercomponent"], [28, 4, 1, "", "models"], [28, 4, 1, "", "name"], [28, 3, 1, "", "port_A"], [28, 3, 1, "", "port_B"], [28, 4, 1, "", "ports"], [28, 4, 1, "", "properties"], [28, 2, 1, "", "rem_subcomponent"], [28, 2, 1, "", "remove"], [28, 2, 1, "", "reset"], [28, 2, 1, "", "specify_model"], [28, 4, 1, "", "subcomponents"], [28, 4, 1, "", "supercomponent"], [28, 4, 1, "", "uid"]], "netsquid.examples.teleportation.InitStateProgram": [[28, 2, 1, "", "apply"], [28, 4, 1, "", "default_num_qubits"], [28, 2, 1, "", "get_qubit_indices"], [28, 2, 1, "", "load"], [28, 3, 1, "", "num_qubits"], [28, 2, 1, "", "program"], [28, 2, 1, "", "reset"], [28, 2, 1, "", "run"]], "netsquid.nodes": [[34, 0, 0, "-", "connections"], [35, 0, 0, "-", "network"], [36, 0, 0, "-", "node"]], "netsquid.nodes.connections": [[34, 1, 1, "", "Connection"], [34, 1, 1, "", "DirectConnection"]], "netsquid.nodes.connections.Connection": [[34, 2, 1, "", "add_ports"], [34, 2, 1, "", "add_property"], [34, 2, 1, "", "add_subcomponent"], [34, 2, 1, "", "has_subcomponent"], [34, 2, 1, "", "has_supercomponent"], [34, 4, 1, "", "models"], [34, 4, 1, "", "name"], [34, 3, 1, "", "port_A"], [34, 3, 1, "", "port_B"], [34, 4, 1, "", "ports"], [34, 4, 1, "", "properties"], [34, 2, 1, "", "rem_subcomponent"], [34, 2, 1, "", "remove"], [34, 2, 1, "", "reset"], [34, 2, 1, "", "specify_model"], [34, 4, 1, "", "subcomponents"], [34, 4, 1, "", "supercomponent"], [34, 4, 1, "", "uid"]], "netsquid.nodes.connections.DirectConnection": [[34, 2, 1, "", "add_ports"], [34, 2, 1, "", "add_property"], [34, 2, 1, "", "add_subcomponent"], [34, 3, 1, "", "channel_AtoB"], [34, 3, 1, "", "channel_BtoA"], [34, 2, 1, "", "has_subcomponent"], [34, 2, 1, "", "has_supercomponent"], [34, 4, 1, "", "models"], [34, 4, 1, "", "name"], [34, 3, 1, "", "port_A"], [34, 3, 1, "", "port_B"], [34, 4, 1, "", "ports"], [34, 4, 1, "", "properties"], [34, 2, 1, "", "rem_subcomponent"], [34, 2, 1, "", "remove"], [34, 2, 1, "", "reset"], [34, 2, 1, "", "specify_model"], [34, 4, 1, "", "subcomponents"], [34, 4, 1, "", "supercomponent"], [34, 4, 1, "", "uid"]], "netsquid.nodes.network": [[35, 1, 1, "", "Network"], [35, 5, 1, "", "NetworkError"]], "netsquid.nodes.network.Network": [[35, 2, 1, "", "add_connection"], [35, 2, 1, "", "add_node"], [35, 2, 1, "", "add_nodes"], [35, 2, 1, "", "combine"], [35, 2, 1, "", "connection_name"], [35, 3, 1, "", "connections"], [35, 2, 1, "", "get_connected_ports"], [35, 2, 1, "", "get_connection"], [35, 2, 1, "", "get_node"], [35, 3, 1, "", "nodes"], [35, 2, 1, "", "remove_connection"], [35, 2, 1, "", "remove_node"]], "netsquid.nodes.node": [[36, 1, 1, "", "Node"]], "netsquid.nodes.node.Node": [[36, 3, 1, "", "ID"], [36, 2, 1, "", "add_ports"], [36, 2, 1, "", "add_property"], [36, 2, 1, "", "add_subcomponent"], [36, 3, 1, "", "cdata"], [36, 2, 1, "", "connect_to"], [36, 2, 1, "", "connection_port_name"], [36, 2, 1, "", "get_conn_port"], [36, 2, 1, "", "has_subcomponent"], [36, 2, 1, "", "has_supercomponent"], [36, 4, 1, "", "models"], [36, 4, 1, "", "name"], [36, 4, 1, "", "ports"], [36, 4, 1, "", "properties"], [36, 3, 1, "", "qmemory"], [36, 2, 1, "", "rem_subcomponent"], [36, 2, 1, "", "remove"], [36, 2, 1, "", "reset"], [36, 2, 1, "", "specify_model"], [36, 4, 1, "", "subcomponents"], [36, 4, 1, "", "supercomponent"], [36, 4, 1, "", "uid"]], "netsquid.protocols": [[37, 0, 0, "-", "nodeprotocols"], [38, 0, 0, "-", "protocol"], [39, 0, 0, "-", "serviceprotocol"]], "netsquid.protocols.nodeprotocols": [[37, 1, 1, "", "DataNodeProtocol"], [37, 1, 1, "", "LocalProtocol"], [37, 1, 1, "", "NodeProtocol"], [37, 1, 1, "", "TimedNodeProtocol"]], "netsquid.protocols.nodeprotocols.DataNodeProtocol": [[37, 3, 1, "", "port_name"], [37, 2, 1, "", "post_process_data"], [37, 2, 1, "", "process_data"], [37, 2, 1, "", "run"]], "netsquid.protocols.nodeprotocols.LocalProtocol": [[37, 2, 1, "", "can_signal_to"], [37, 3, 1, "", "is_connected"], [37, 3, 1, "", "max_nodes"], [37, 3, 1, "", "nodes"], [37, 2, 1, "", "specify_node"]], "netsquid.protocols.nodeprotocols.NodeProtocol": [[37, 3, 1, "", "node"]], "netsquid.protocols.nodeprotocols.TimedNodeProtocol": [[37, 2, 1, "", "exec_protocol"], [37, 2, 1, "", "run"], [37, 3, 1, "", "start_time"], [37, 3, 1, "", "time_step"]], "netsquid.protocols.protocol": [[38, 1, 1, "", "Protocol"], [38, 1, 1, "", "SignalResult"], [38, 1, 1, "", "Signals"]], "netsquid.protocols.protocol.Protocol": [[38, 2, 1, "", "add_signal"], [38, 2, 1, "", "add_subprotocol"], [38, 2, 1, "", "await_mempos_busy_toggle"], [38, 2, 1, "", "await_mempos_in_use_toggle"], [38, 2, 1, "", "await_port_input"], [38, 2, 1, "", "await_port_output"], [38, 2, 1, "", "await_program"], [38, 2, 1, "", "await_signal"], [38, 2, 1, "", "await_timer"], [38, 2, 1, "", "can_signal_to"], [38, 2, 1, "", "check_assigned"], [38, 2, 1, "", "get_signal_by_event"], [38, 2, 1, "", "get_signal_result"], [38, 4, 1, "", "is_connected"], [38, 4, 1, "", "is_running"], [38, 4, 1, "", "name"], [38, 2, 1, "", "remove"], [38, 2, 1, "", "reset"], [38, 2, 1, "", "run"], [38, 2, 1, "", "send_signal"], [38, 4, 1, "", "signals"], [38, 2, 1, "", "start"], [38, 2, 1, "", "start_subprotocols"], [38, 2, 1, "", "stop"], [38, 4, 1, "", "subprotocols"], [38, 4, 1, "", "uid"]], "netsquid.protocols.protocol.SignalResult": [[38, 2, 1, "", "count"], [38, 2, 1, "", "index"], [38, 4, 1, "", "label"], [38, 4, 1, "", "result"]], "netsquid.protocols.serviceprotocol": [[39, 5, 1, "", "ServiceError"], [39, 1, 1, "", "ServiceProtocol"]], "netsquid.protocols.serviceprotocol.ServiceError": [[39, 2, 1, "", "with_traceback"]], "netsquid.protocols.serviceprotocol.ServiceProtocol": [[39, 2, 1, "", "add_signal"], [39, 2, 1, "", "add_subprotocol"], [39, 2, 1, "", "await_mempos_busy_toggle"], [39, 2, 1, "", "await_mempos_in_use_toggle"], [39, 2, 1, "", "await_port_input"], [39, 2, 1, "", "await_port_output"], [39, 2, 1, "", "await_program"], [39, 2, 1, "", "await_signal"], [39, 2, 1, "", "await_timer"], [39, 2, 1, "", "can_signal_to"], [39, 2, 1, "", "check_assigned"], [39, 2, 1, "", "get_name"], [39, 2, 1, "", "get_signal_by_event"], [39, 2, 1, "", "get_signal_result"], [39, 2, 1, "", "handle_request"], [39, 3, 1, "", "is_connected"], [39, 4, 1, "", "is_running"], [39, 3, 1, "", "max_nodes"], [39, 4, 1, "", "name"], [39, 3, 1, "", "node"], [39, 3, 1, "", "nodes"], [39, 2, 1, "", "put"], [39, 2, 1, "", "register_request"], [39, 2, 1, "", "register_response"], [39, 2, 1, "", "remove"], [39, 3, 1, "", "request_handlers"], [39, 3, 1, "", "request_types"], [39, 2, 1, "", "reset"], [39, 3, 1, "", "response_types"], [39, 2, 1, "", "run"], [39, 2, 1, "", "send_response"], [39, 2, 1, "", "send_signal"], [39, 4, 1, "", "signals"], [39, 2, 1, "", "specify_node"], [39, 2, 1, "", "start"], [39, 2, 1, "", "start_subprotocols"], [39, 2, 1, "", "stop"], [39, 4, 1, "", "subprotocols"], [39, 4, 1, "", "uid"]], "netsquid.qubits": [[41, 0, 0, "-", "cliffords"], [42, 0, 0, "-", "dmtools"], [43, 0, 0, "-", "dmutil"], [44, 0, 0, "-", "gslctools"], [45, 0, 0, "-", "gslcutil"], [46, 0, 0, "-", "ketstates"], [47, 0, 0, "-", "kettools"], [48, 0, 0, "-", "ketutil"], [49, 0, 0, "-", "operators"], [50, 0, 0, "-", "opmath"], [51, 0, 0, "-", "qformalism"], [52, 0, 0, "-", "qrepr"], [53, 0, 0, "-", "qreprutil"], [54, 0, 0, "-", "qstate"], [55, 0, 0, "-", "qubit"], [56, 0, 0, "-", "qubitapi"], [57, 0, 0, "-", "sparsedmtools"], [58, 0, 0, "-", "sparseutil"], [59, 0, 0, "-", "stabtools"], [60, 0, 0, "-", "state_sampler"]], "netsquid.qubits.cliffords": [[41, 1, 1, "", "Clifford"], [41, 1, 1, "", "LocalClifford"]], "netsquid.qubits.cliffords.Clifford": [[41, 4, 1, "", "dagger"]], "netsquid.qubits.cliffords.LocalClifford": [[41, 4, 1, "", "dagger"], [41, 4, 1, "", "dagger_phase"], [41, 4, 1, "", "decomposition"], [41, 2, 1, "", "multiply_with_phase"]], "netsquid.qubits.dmtools": [[42, 1, 1, "", "DMRepr"], [42, 1, 1, "", "DenseDMRepr"]], "netsquid.qubits.dmtools.DMRepr": [[42, 2, 1, "", "create_in_basis"], [42, 2, 1, "", "discard"], [42, 2, 1, "", "fidelity"], [42, 2, 1, "", "gmeasure"], [42, 4, 1, "", "is_valid"], [42, 2, 1, "", "log_operation"], [42, 2, 1, "", "measure"], [42, 2, 1, "", "measure_discard"], [42, 2, 1, "", "multi_operate"], [42, 4, 1, "", "num_qubits"], [42, 2, 1, "", "operate"], [42, 2, 1, "", "reduced_dm"], [42, 2, 1, "", "smart_tensor"], [42, 4, 1, "", "supports_mixed_states"], [42, 4, 1, "", "supports_universal"], [42, 2, 1, "", "tensor"]], "netsquid.qubits.dmtools.DenseDMRepr": [[42, 2, 1, "", "create_in_basis"], [42, 2, 1, "", "discard"], [42, 4, 1, "", "dm"], [42, 2, 1, "", "fidelity"], [42, 2, 1, "", "gmeasure"], [42, 4, 1, "", "is_valid"], [42, 2, 1, "", "log_operation"], [42, 2, 1, "", "measure"], [42, 2, 1, "", "measure_discard"], [42, 2, 1, "", "multi_operate"], [42, 4, 1, "", "num_qubits"], [42, 2, 1, "", "operate"], [42, 2, 1, "", "reduced_dm"], [42, 2, 1, "", "smart_tensor"], [42, 4, 1, "", "supports_mixed_states"], [42, 4, 1, "", "supports_universal"], [42, 2, 1, "", "tensor"]], "netsquid.qubits.dmutil": [[43, 7, 1, "", "calc_amplitude_dampen_ops"], [43, 7, 1, "", "dm_fidelity"], [43, 7, 1, "", "is_valid_dm"], [43, 7, 1, "", "partialtrace"], [43, 7, 1, "", "reduced_dm"], [43, 7, 1, "", "reorder_dm"]], "netsquid.qubits.gslctools": [[44, 1, 1, "", "GSLCRepr"]], "netsquid.qubits.gslctools.GSLCRepr": [[44, 4, 1, "", "cliffords"], [44, 2, 1, "", "create_in_basis"], [44, 2, 1, "", "discard"], [44, 4, 1, "", "edges"], [44, 2, 1, "", "fidelity"], [44, 2, 1, "", "gmeasure"], [44, 4, 1, "", "is_valid"], [44, 2, 1, "", "local_complementation"], [44, 2, 1, "", "log_operation"], [44, 2, 1, "", "measure"], [44, 2, 1, "", "measure_discard"], [44, 2, 1, "", "measure_qubit"], [44, 2, 1, "", "multi_operate"], [44, 4, 1, "", "num_qubits"], [44, 2, 1, "", "operate"], [44, 2, 1, "", "operate_CZ"], [44, 2, 1, "", "operate_qubits"], [44, 2, 1, "", "reduced_dm"], [44, 2, 1, "", "smart_tensor"], [44, 4, 1, "", "supports_mixed_states"], [44, 4, 1, "", "supports_universal"], [44, 2, 1, "", "swap_indices"], [44, 2, 1, "", "tensor"]], "netsquid.qubits.gslcutil": [[45, 7, 1, "", "gslc2dm"], [45, 7, 1, "", "gslc2ket"]], "netsquid.qubits.ketstates": [[46, 1, 1, "", "BellIndex"], [46, 6, 1, "", "b00"], [46, 6, 1, "", "b01"], [46, 6, 1, "", "b10"], [46, 6, 1, "", "b11"], [46, 6, 1, "", "bell_states"], [46, 6, 1, "", "h0"], [46, 6, 1, "", "h1"], [46, 6, 1, "", "s0"], [46, 6, 1, "", "s1"], [46, 6, 1, "", "y0"], [46, 6, 1, "", "y1"]], "netsquid.qubits.ketstates.BellIndex": [[46, 4, 1, "", "B00"], [46, 4, 1, "", "B01"], [46, 4, 1, "", "B10"], [46, 4, 1, "", "B11"], [46, 4, 1, "", "PHI_MINUS"], [46, 4, 1, "", "PHI_PLUS"], [46, 4, 1, "", "PSI_MINUS"], [46, 4, 1, "", "PSI_PLUS"]], "netsquid.qubits.kettools": [[47, 1, 1, "", "KetRepr"]], "netsquid.qubits.kettools.KetRepr": [[47, 2, 1, "", "create_in_basis"], [47, 2, 1, "", "discard"], [47, 2, 1, "", "fidelity"], [47, 2, 1, "", "gmeasure"], [47, 4, 1, "", "is_valid"], [47, 4, 1, "", "ket"], [47, 2, 1, "", "log_operation"], [47, 2, 1, "", "measure"], [47, 2, 1, "", "measure_discard"], [47, 2, 1, "", "multi_operate"], [47, 4, 1, "", "num_qubits"], [47, 2, 1, "", "operate"], [47, 2, 1, "", "reduced_dm"], [47, 2, 1, "", "smart_tensor"], [47, 4, 1, "", "supports_mixed_states"], [47, 4, 1, "", "supports_universal"], [47, 2, 1, "", "tensor"]], "netsquid.qubits.ketutil": [[48, 7, 1, "", "dagger"], [48, 7, 1, "", "innerprod"], [48, 7, 1, "", "ket2dm"], [48, 7, 1, "", "ket2sparsedm"], [48, 7, 1, "", "ket_fidelity"], [48, 7, 1, "", "outerprod"], [48, 7, 1, "", "partialtrace"], [48, 7, 1, "", "reduced_dm"], [48, 7, 1, "", "reorder_ket"], [48, 7, 1, "", "sample_ket_from_dm"]], "netsquid.qubits.operators": [[49, 6, 1, "", "BELL_PROJECTORS"], [49, 6, 1, "", "CCX"], [49, 6, 1, "", "CS"], [49, 6, 1, "", "CX"], [49, 6, 1, "", "CZ"], [49, 6, 1, "", "H"], [49, 6, 1, "", "I"], [49, 6, 1, "", "K"], [49, 1, 1, "", "Operator"], [49, 6, 1, "", "S"], [49, 6, 1, "", "SWAP"], [49, 6, 1, "", "T"], [49, 6, 1, "", "X"], [49, 6, 1, "", "Y"], [49, 6, 1, "", "Z"], [49, 6, 1, "", "caching_enabled"], [49, 7, 1, "", "create_rotation_op"], [50, 4, 1, "", "sparse_padding_threshold"]], "netsquid.qubits.operators.Operator": [[49, 3, 1, "", "arr"], [49, 4, 1, "", "cacheable"], [49, 3, 1, "", "clifford"], [49, 3, 1, "", "conj"], [49, 3, 1, "", "csr"], [49, 3, 1, "", "ctrl"], [49, 3, 1, "", "description"], [49, 3, 1, "", "eigenkets"], [49, 3, 1, "", "eigenvals"], [49, 2, 1, "", "get_cache"], [49, 3, 1, "", "inv"], [49, 3, 1, "", "is_clifford"], [49, 3, 1, "", "is_hermitian"], [49, 3, 1, "", "is_projective"], [49, 3, 1, "", "is_real"], [49, 3, 1, "", "is_unitary"], [49, 3, 1, "", "name"], [49, 3, 1, "", "num_qubits"], [49, 3, 1, "", "projectors"], [49, 3, 1, "", "use_sparse"]], "netsquid.qubits.opmath": [[50, 7, 1, "", "multi_operate_dm"], [50, 7, 1, "", "multi_operate_sparse_dm"], [50, 7, 1, "", "operate_dm"], [50, 7, 1, "", "operate_ket"], [50, 7, 1, "", "operate_sparse_dm"]], "netsquid.qubits.qformalism": [[51, 1, 1, "", "QFormalism"], [51, 7, 1, "", "convert_qrepr"], [51, 7, 1, "", "convert_qstate"], [51, 7, 1, "", "get_qstate_formalism"], [51, 7, 1, "", "set_qstate_formalism"]], "netsquid.qubits.qformalism.QFormalism": [[51, 4, 1, "id1", "DM"], [51, 4, 1, "id4", "GSLC"], [51, 4, 1, "id0", "KET"], [51, 4, 1, "id2", "SPARSEDM"], [51, 4, 1, "id3", "STAB"], [51, 4, 1, "", "ensemble_formalisms"], [51, 4, 1, "", "purestate_formalisms"], [51, 4, 1, "", "universal_formalisms"]], "netsquid.qubits.qrepr": [[52, 5, 1, "", "ConversionError"], [52, 1, 1, "", "QRepr"], [52, 7, 1, "", "convert_to"], [52, 7, 1, "", "deregister_conversion"], [52, 7, 1, "", "register_conversion"]], "netsquid.qubits.qrepr.QRepr": [[52, 2, 1, "", "create_in_basis"], [52, 2, 1, "", "discard"], [52, 2, 1, "", "fidelity"], [52, 2, 1, "", "gmeasure"], [52, 4, 1, "", "is_valid"], [52, 2, 1, "", "log_operation"], [52, 2, 1, "", "measure"], [52, 2, 1, "", "measure_discard"], [52, 2, 1, "", "multi_operate"], [52, 4, 1, "", "num_qubits"], [52, 2, 1, "", "operate"], [52, 2, 1, "", "reduced_dm"], [52, 2, 1, "", "smart_tensor"], [52, 4, 1, "", "supports_mixed_states"], [52, 4, 1, "", "supports_universal"], [52, 2, 1, "", "tensor"]], "netsquid.qubits.qreprutil": [[53, 7, 1, "", "gslc2ket"], [53, 7, 1, "", "gslc2stab"], [53, 7, 1, "", "ket2gslc"], [53, 7, 1, "", "ket2stab"], [53, 7, 1, "", "qrepr2dm"], [53, 7, 1, "", "qrepr2ket"], [53, 7, 1, "", "qrepr2sparsedm"], [53, 7, 1, "", "stab2gslc"]], "netsquid.qubits.qstate": [[54, 1, 1, "", "QState"], [54, 5, 1, "", "QStateCombineError"]], "netsquid.qubits.qstate.QState": [[54, 2, 1, "", "combine_qstate"], [54, 2, 1, "", "compare"], [54, 2, 1, "", "drop_qubit"], [54, 2, 1, "", "fidelity"], [54, 4, 1, "", "indices"], [54, 2, 1, "", "indices_of"], [54, 2, 1, "", "log_operation"], [54, 2, 1, "", "measure_qubit"], [54, 2, 1, "", "multi_operate_qubits"], [54, 4, 1, "", "num_qubits"], [54, 2, 1, "", "operate_qubits"], [54, 4, 1, "", "qrepr"], [54, 4, 1, "", "qubits"], [54, 2, 1, "", "reduced_dm"], [54, 2, 1, "", "stoch_operate_qubits"]], "netsquid.qubits.qubit": [[55, 1, 1, "", "Qubit"]], "netsquid.qubits.qubit.Qubit": [[55, 2, 1, "", "combine"], [55, 4, 1, "", "is_number_state"], [55, 3, 1, "", "name"], [55, 3, 1, "", "qstate"]], "netsquid.qubits.qubitapi": [[56, 7, 1, "", "amplitude_dampen"], [56, 7, 1, "", "apply_dda_noise"], [56, 7, 1, "", "apply_pauli_noise"], [56, 7, 1, "", "assign_qstate"], [56, 7, 1, "", "combine_qubits"], [56, 7, 1, "", "create_qubits"], [56, 7, 1, "", "delay_dephase"], [56, 7, 1, "", "delay_depolarize"], [56, 7, 1, "", "dephase"], [56, 7, 1, "", "depolarize"], [56, 7, 1, "", "discard"], [56, 7, 1, "", "exp_value"], [56, 7, 1, "", "fidelity"], [56, 7, 1, "", "gmeasure"], [56, 7, 1, "", "measure"], [56, 7, 1, "", "multi_operate"], [56, 7, 1, "", "operate"], [56, 7, 1, "", "reduced_dm"], [56, 7, 1, "", "stochastic_operate"]], "netsquid.qubits.sparsedmtools": [[57, 1, 1, "", "SparseDMRepr"]], "netsquid.qubits.sparsedmtools.SparseDMRepr": [[57, 2, 1, "", "create_in_basis"], [57, 2, 1, "", "discard"], [57, 2, 1, "", "fidelity"], [57, 2, 1, "", "gmeasure"], [57, 4, 1, "", "is_valid"], [57, 2, 1, "", "log_operation"], [57, 2, 1, "", "measure"], [57, 2, 1, "", "measure_discard"], [57, 2, 1, "", "multi_operate"], [57, 4, 1, "", "num_qubits"], [57, 2, 1, "", "operate"], [57, 2, 1, "", "reduced_dm"], [57, 2, 1, "", "smart_tensor"], [57, 4, 1, "", "sparse_dm"], [57, 4, 1, "", "supports_mixed_states"], [57, 4, 1, "", "supports_universal"], [57, 2, 1, "", "tensor"]], "netsquid.qubits.sparseutil": [[58, 1, 1, "", "csr_matrix_nocheck"], [58, 7, 1, "", "dm2sparsedm"], [58, 7, 1, "", "is_pure_sparse_dm"], [58, 7, 1, "", "is_valid_sparse_dm"], [58, 7, 1, "", "reduced_sparse_dm"], [58, 7, 1, "", "reorder_sparse_dm"], [58, 7, 1, "", "sparse_allclose"], [58, 7, 1, "", "sparse_allreal"], [58, 7, 1, "", "sparse_dm_fidelity"], [58, 7, 1, "", "sparse_fast_conj"], [58, 7, 1, "", "sparse_kron_identity_left"], [58, 7, 1, "", "sparse_kron_identity_middle"], [58, 7, 1, "", "sparse_kron_identity_right"], [58, 7, 1, "", "sparse_mul_dense_matrix"], [58, 7, 1, "", "sparse_mul_dense_vector"], [58, 7, 1, "", "sparse_partialtrace"], [58, 7, 1, "", "sparse_trace"]], "netsquid.qubits.stabtools": [[59, 1, 1, "", "StabRepr"], [59, 7, 1, "", "clifford_transform"]], "netsquid.qubits.stabtools.StabRepr": [[59, 4, 1, "", "check_matrix"], [59, 2, 1, "", "create_in_basis"], [59, 4, 1, "", "destab_matrix"], [59, 2, 1, "", "discard"], [59, 2, 1, "", "fidelity"], [59, 2, 1, "", "generator_to_matrix"], [59, 2, 1, "", "gmeasure"], [59, 4, 1, "", "is_valid"], [59, 2, 1, "", "log_operation"], [59, 2, 1, "", "measure"], [59, 2, 1, "", "measure_discard"], [59, 2, 1, "", "multi_operate"], [59, 2, 1, "", "multiply_rows"], [59, 4, 1, "", "num_qubits"], [59, 2, 1, "", "operate"], [59, 4, 1, "", "phases"], [59, 2, 1, "", "reduced_dm"], [59, 2, 1, "", "row_reduce"], [59, 2, 1, "", "smart_tensor"], [59, 4, 1, "", "supports_mixed_states"], [59, 4, 1, "", "supports_universal"], [59, 2, 1, "", "tensor"], [59, 2, 1, "", "to_basis_state"]], "netsquid.qubits.state_sampler": [[60, 1, 1, "", "Sample"], [60, 1, 1, "", "StateSampler"]], "netsquid.qubits.state_sampler.Sample": [[60, 4, 1, "", "label"], [60, 4, 1, "", "probability"], [60, 4, 1, "", "qrepr"]], "netsquid.qubits.state_sampler.StateSampler": [[60, 2, 1, "", "convert_states"], [60, 2, 1, "", "get_leaves"], [60, 4, 1, "", "labels"], [60, 4, 1, "", "num_qubits"], [60, 4, 1, "", "num_states"], [60, 4, 1, "", "probabilities"], [60, 4, 1, "", "probability_of_none"], [60, 2, 1, "", "reduce_states"], [60, 2, 1, "", "sample"], [60, 4, 1, "", "states"]], "netsquid.util": [[62, 0, 0, "-", "constrainedmap"], [63, 0, 0, "-", "cycache"], [64, 0, 0, "-", "cymath"], [65, 0, 0, "-", "datacollector"], [66, 0, 0, "-", "simlog"], [67, 0, 0, "-", "simstats"], [68, 0, 0, "-", "simtools"]], "netsquid.util.constrainedmap": [[62, 1, 1, "", "ConstrainedMap"], [62, 1, 1, "", "ConstrainedMapView"], [62, 5, 1, "", "ConstraintError"], [62, 5, 1, "", "ImmutabilityError"], [62, 1, 1, "", "ValueConstraint"], [62, 6, 1, "", "integer_constr"], [62, 6, 1, "", "negative_constr"], [62, 6, 1, "", "nonnegative_constr"], [62, 6, 1, "", "nonpositive_constr"], [62, 6, 1, "", "not_none_constr"], [62, 6, 1, "", "positive_constr"]], "netsquid.util.constrainedmap.ConstrainedMap": [[62, 2, 1, "", "filter_by_type"], [62, 2, 1, "", "get_constraints"], [62, 2, 1, "", "get_global_constraints"], [62, 2, 1, "", "get_mutable"], [62, 2, 1, "", "get_type"], [62, 2, 1, "", "internal_add"], [62, 2, 1, "", "internal_del"]], "netsquid.util.constrainedmap.ConstrainedMapView": [[62, 3, 1, "", "map"]], "netsquid.util.constrainedmap.ValueConstraint": [[62, 2, 1, "", "check"], [62, 2, 1, "", "constr_and"], [62, 2, 1, "", "constr_not"]], "netsquid.util.cycache": [[63, 1, 1, "", "LruCache"]], "netsquid.util.cycache.LruCache": [[63, 2, 1, "", "clear"], [63, 2, 1, "", "get"], [63, 2, 1, "", "keys"], [63, 4, 1, "", "size_limit"]], "netsquid.util.cymath": [[64, 7, 1, "", "correct_global_phase"], [64, 7, 1, "", "isclose"]], "netsquid.util.datacollector": [[65, 1, 1, "", "DataCollector"]], "netsquid.util.datacollector.DataCollector": [[65, 2, 1, "", "collect_on"], [65, 3, 1, "", "databuffer"], [65, 3, 1, "", "dataframe"], [65, 3, 1, "", "get_data_function"], [65, 3, 1, "", "priority"], [65, 2, 1, "", "reset"]], "netsquid.util.simlog": [[66, 7, 1, "", "check_memory_usage"], [66, 7, 1, "", "get_loggers"], [66, 6, 1, "", "logger"], [66, 7, 1, "", "warn_deprecated"]], "netsquid.util.simstats": [[67, 1, 1, "", "SimStats"]], "netsquid.util.simstats.SimStats": [[67, 3, 1, "", "data"], [67, 2, 1, "", "end"], [67, 3, 1, "", "ended"], [67, 2, 1, "", "record"], [67, 2, 1, "", "start"], [67, 2, 1, "", "summary"], [67, 2, 1, "", "timeline_status"]], "netsquid.util.simtools": [[68, 6, 1, "", "MICROSECOND"], [68, 6, 1, "", "MILLISECOND"], [68, 6, 1, "", "NANOSECOND"], [68, 6, 1, "", "PICOSECOND"], [68, 6, 1, "", "SECOND"], [68, 7, 1, "", "get_random_state"], [68, 7, 1, "", "set_random_state"], [68, 7, 1, "", "sim_count_events"], [68, 7, 1, "", "sim_count_handlers"], [68, 7, 1, "", "sim_count_instants"], [68, 7, 1, "", "sim_count_resets"], [68, 7, 1, "", "sim_reset"], [68, 7, 1, "", "sim_run"], [68, 7, 1, "", "sim_state"], [68, 7, 1, "", "sim_stop"], [68, 7, 1, "", "sim_time"], [68, 7, 1, "", "test"]], "pydynaa.core": [[84, 1, 1, "", "Entity"], [84, 1, 1, "", "Event"], [84, 1, 1, "", "EventExpression"], [84, 1, 1, "", "EventHandler"], [84, 1, 1, "", "EventType"], [84, 1, 1, "", "ExpressionHandler"], [84, 1, 1, "", "SimulationEngine"]], "pydynaa.core.Entity": [[84, 2, 1, "", "_dismiss"], [84, 2, 1, "", "_schedule_after"], [84, 2, 1, "", "_schedule_at"], [84, 2, 1, "", "_schedule_now"], [84, 2, 1, "", "_wait"], [84, 2, 1, "", "_wait_once"], [84, 2, 1, "", "remove"], [84, 4, 1, "", "uid"]], "pydynaa.core.Event": [[84, 4, 1, "", "id"], [84, 4, 1, "", "source"], [84, 4, 1, "", "type"], [84, 2, 1, "", "unschedule"]], "pydynaa.core.EventExpression": [[84, 4, 1, "", "atomic_id"], [84, 4, 1, "", "atomic_source"], [84, 4, 1, "", "atomic_type"], [84, 2, 1, "", "copy"], [84, 4, 1, "", "first_term"], [84, 2, 1, "", "reprime"], [84, 4, 1, "", "second_term"], [84, 4, 1, "", "triggered_events"], [84, 4, 1, "", "triggered_time"], [84, 4, 1, "", "type"], [84, 4, 1, "", "value"], [84, 2, 1, "", "wait"]], "pydynaa.core.EventHandler": [[84, 4, 1, "", "default_priority"], [84, 2, 1, "", "handle"], [84, 4, 1, "", "highest_priority"], [84, 4, 1, "", "identifier"], [84, 4, 1, "", "lowest_priority"], [84, 4, 1, "", "priority"]], "pydynaa.core.EventType": [[84, 4, 1, "", "description"], [84, 4, 1, "", "id"], [84, 4, 1, "", "name"]], "pydynaa.core.ExpressionHandler": [[84, 4, 1, "", "default_priority"], [84, 2, 1, "", "handle"], [84, 4, 1, "", "highest_priority"], [84, 4, 1, "", "identifier"], [84, 4, 1, "", "lowest_priority"], [84, 4, 1, "", "priority"]], "pydynaa.core.SimulationEngine": [[84, 4, 1, "", "current_time"], [84, 2, 1, "", "get_diagnostic_info"], [84, 2, 1, "", "get_expression_handlers"], [84, 4, 1, "", "num_events"], [84, 4, 1, "", "num_handlers"], [84, 4, 1, "", "num_instants"], [84, 2, 1, "", "reset"], [84, 2, 1, "", "run"], [84, 4, 1, "", "state"], [84, 2, 1, "", "stop"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:exception", "6": "py:data", "7": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "exception", "Python exception"], "6": ["py", "data", "Python data"], "7": ["py", "function", "Python function"]}, "titleterms": {"netsquid": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 77, 78, 79, 80, 81, 82, 83, 85], "author": 0, "changelog": 1, "2021": 1, "12": 1, "09": 1, "rob": 1, "11": 1, "15": 1, "06": 1, "30": 1, "17": 1, "16": 1, "05": 1, "07": 1, "04": 1, "18": 1, "martijn": 1, "03": 1, "26": 1, "chri": 1, "25": 1, "2020": 1, "23": 1, "02": 1, "08": 1, "01": 1, "27": 1, "10": [1, 7, 85], "20": 1, "13": 1, "29": 1, "loek": 1, "19": 1, "31": 1, "leon": 1, "28": 1, "22": 1, "14": 1, "guu": 1, "axel": 1, "24": 1, "2019": 1, "5": [1, 5, 7], "4": [1, 5], "2": [1, 5], "1": [1, 5, 7], "21": 1, "ariana": 1, "david": 1, "m": 1, "6": [1, 5, 7], "3": [1, 5], "8": [1, 5, 7], "2018": 1, "9": [1, 5, 7], "tim": 1, "julio": 1, "7": [1, 5, 7], "mathij": 1, "callback": 1, "manag": 1, "node": [1, 7, 34, 35, 36, 72, 80, 88], "protocol": [1, 7, 37, 38, 39, 71, 72, 74, 81, 85, 89], "roeland": 1, "lossmodel": 1, "qubit": [1, 7, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 82, 85, 92], "number": 1, "state": [1, 7, 51, 92], "2017": 1, "kenneth": 1, "contribut": 2, "resourc": 2, "link": [2, 71, 74], "git": 2, "gitlab": 2, "version": [2, 7], "releas": [2, 7], "continu": 2, "integr": 2, "style": 2, "guid": 2, "languag": 2, "document": [2, 4, 5, 7], "code": 2, "referenc": 2, "math": 2, "modul": [2, 77, 78, 79, 80, 81, 82, 83], "doctest": 2, "name": [2, 5], "instal": [3, 4, 5], "packag": [3, 4, 7, 40, 61], "us": [3, 5, 6, 7, 71, 86, 89, 91], "server": [3, 7], "wheel": 3, "file": 3, "verifi": 3, "build": 4, "from": 4, "sourc": 4, "maco": 4, "binari": 4, "download": 4, "deploi": 4, "softwar": 5, "end": 5, "user": 5, "licens": 5, "condit": 5, "articl": 5, "definit": 5, "grant": 5, "AND": 5, "OF": 5, "licensor": 5, "restrict": 5, "registr": 5, "fee": 5, "support": [5, 7], "updat": 5, "upgrad": 5, "deliveri": 5, "accept": 5, "warranti": 5, "liabil": 5, "indemn": 5, "titl": 5, "disclaim": 5, "confidenti": 5, "inform": [5, 6, 87], "disclosur": 5, "except": 5, "compulsori": 5, "return": 5, "destruct": 5, "durat": 5, "termin": 5, "breach": 5, "liquid": 5, "consequ": 5, "surviv": 5, "term": 5, "miscellan": 5, "forc": 5, "majeur": 5, "notic": 5, "If": 5, "tno": 5, "tud": 5, "sever": 5, "waiver": 5, "assign": 5, "entir": 5, "agreement": 5, "amend": 5, "head": 5, "applic": 5, "law": 5, "disput": 5, "resolut": 5, "network": [6, 7, 35, 86, 93], "simul": [6, 85, 90, 93], "quantum": [6, 7, 86, 87, 90, 91, 92], "discret": [6, 90], "event": [6, 7, 84, 90], "note": 7, "new": [7, 51], "featur": [7, 91], "improv": 7, "0": 7, "represent": 7, "sampler": 7, "stabilis": 7, "formal": [7, 51, 92], "qsourc": [7, 20], "memori": [7, 86, 91], "processor": [7, 91], "misc": 7, "major": 7, "two": 7, "A": [7, 74, 90, 93], "quantumdetector": 7, "compon": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 29, 30, 31, 32, 77, 78, 85, 86], "composit": 7, "instruct": [7, 14, 91], "minor": 7, "quantumprocessor": 7, "quantumprogram": 7, "other": 7, "chang": 7, "authent": 7, "access": 7, "onlin": 7, "pypi": 7, "ad": [7, 51], "subclass": 7, "program": [7, 91], "argument": 7, "concaten": 7, "depend": 7, "minimum": 7, "python": 7, "complet": [7, 93], "tutori": [7, 87], "run": [7, 85, 90, 93], "method": 7, "now": 7, "yield": 7, "directli": 7, "express": [7, 90], "bell": 7, "measur": [7, 92], "port": [7, 86], "sequenti": 7, "flow": 7, "re": 7, "design": 7, "how": 7, "ar": 7, "handl": [7, 90], "restructur": 7, "model": [7, 29, 30, 31, 32, 78, 86], "subpackag": [7, 61], "exampl": [7, 22, 23, 24, 25, 26, 27, 28, 70, 79, 89, 90, 91], "oper": [7, 49, 92], "can": 7, "repres": 7, "spars": 7, "matric": 7, "gener": [7, 92], "util": [7, 62, 63, 64, 65, 66, 67, 68, 83], "remov": 7, "function": 7, "deprec": 7, "protectedmap": 7, "statesampl": 7, "clock": [7, 11], "log": 7, "sub": 7, "super": 7, "quantummemori": 7, "api": [7, 69], "multi": 7, "stabil": [7, 51], "convert": 7, "pydynaa": [7, 40, 84, 90], "bug": 7, "fix": 7, "modular": 7, "connect": [7, 34, 88], "properti": 7, "data": 7, "collect": 7, "perform": 7, "increas": 7, "adapt": 7, "numpi": 7, "channel": [7, 10, 86], "cchannel": 8, "ccode": 9, "cqchannel": 13, "qchannel": 15, "qdetector": 16, "qmemori": 17, "qprocessor": 18, "qprogram": 19, "switch": 21, "entanglenod": 22, "magic_simple_link": 23, "purifi": 24, "repeat": [25, 72, 73], "repeater_chain": 26, "simple_link": 27, "teleport": [28, 75, 86, 87, 88, 89, 90, 91], "cerrormodel": 29, "delaymodel": 30, "errormodel": 31, "componentsmodel": 33, "qerrormodel": 33, "nodeprotocol": 37, "serviceprotocol": 39, "class": 40, "clifford": [41, 51], "dmtool": 42, "dmutil": 43, "gslctool": 44, "gslcutil": 45, "ketstat": 46, "kettool": 47, "ketutil": 48, "opmath": 50, "qformal": 51, "overview": 51, "ket": 51, "vector": 51, "densiti": 51, "matrix": 51, "tableau": 51, "graph": 51, "local": [51, 91], "qrepr": 52, "qreprutil": 53, "qstate": 54, "qubitapi": 56, "sparsedmtool": 57, "sparseutil": 58, "stabtool": 59, "state_sampl": 60, "constrainedmap": 62, "cycach": 63, "cymath": 64, "datacollector": 65, "simlog": 66, "simstat": 67, "simtool": 68, "about": 69, "learn": 69, "refer": 69, "For": 69, "develop": 69, "faster": 71, "layer": [71, 74], "abstract": 71, "purif": 72, "entangl": [72, 88], "chain": 73, "simpl": 74, "entiti": 84, "eventtyp": 84, "eventexpress": 84, "eventhandl": 84, "expressionhandl": 84, "simulationengin": 84, "minut": 85, "engin": [85, 90], "tabl": [86, 88, 89, 90, 91, 92, 93], "content": [86, 88, 89, 90, 91, 92, 93], "ping": [86, 89, 90], "pong": [86, 89, 90], "what": [86, 87, 88, 89, 90, 91, 92], "i": [86, 87, 88, 89, 90, 91, 92], "next": [86, 87, 88, 89, 90, 91, 92], "see": [87, 89, 92], "also": [87, 89, 92], "an": 88, "The": [89, 90, 91], "schedul": 90, "wait": 90, "devic": 91, "physic": 91, "addit": 91, "comput": 92, "appli": 92, "nois": 92, "full": 93, "set": 93, "up": 93}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"NetSquid Authors": [[0, "netsquid-authors"]], "CHANGELOG": [[1, "changelog"]], "2021-12-09 Rob": [[1, "rob"]], "2021-11-15 Rob": [[1, "id1"]], "2021-06-30 Rob": [[1, "id2"]], "2021-06-17 Rob": [[1, "id3"]], "2021-06-16 Rob": [[1, "id4"]], "2021-05-07 Rob": [[1, "id5"]], "2021-05-05 Rob": [[1, "id6"]], "2021-04-18 Martijn, Rob": [[1, "martijn-rob"]], "2021-03-30 Martijn": [[1, "martijn"]], "2021-03-26 Chris": [[1, "chris"]], "2021-03-25 Martijn": [[1, "id7"]], "2020-03-23 Martijn": [[1, "id8"]], "2021-03-17 Rob, Martijn": [[1, "rob-martijn"]], "2021-03-05 Rob": [[1, "id9"]], "2021-03-04 Chris": [[1, "id10"]], "2021-02-18 Chris": [[1, "id11"]], "2020-12-18 Martijn": [[1, "id12"]], "2020-12-08 Martijn": [[1, "id13"]], "2020-12-04 Rob, Martijn": [[1, "id14"]], "2020-12-03 Martijn": [[1, "id15"]], "2020-12-02": [[1, "id16"]], "Martijn": [[1, "id17"], [1, "id37"], [1, "id52"], [1, "id79"], [1, "id90"]], "Rob": [[1, "id18"], [1, "id78"], [1, "id94"], [1, "id104"], [1, "id107"], [1, "id123"], [1, "id133"], [1, "id172"]], "2020-12-01 Chris": [[1, "id19"]], "2020-11-30 Martijn": [[1, "id20"]], "2020-11-27 Martijn, Rob": [[1, "id21"]], "2020-11-18 Martijn": [[1, "id22"]], "2020-11-02 Martijn, Rob": [[1, "id23"]], "2020-10-26 Martijn": [[1, "id24"]], "2020-10-20 Martijn": [[1, "id25"]], "2020-10-13 Martijn": [[1, "id26"]], "2020-09-29 Martijn": [[1, "id27"]], "2020-08-27 Loek": [[1, "loek"]], "2020-08-19 Martijn": [[1, "id28"]], "2020-08-12 Martijn": [[1, "id29"]], "2020-08-06 Loek": [[1, "id30"]], "2020-08-03 Rob": [[1, "id31"]], "2020-07-31 Chris, Loek, Leon, Martijn": [[1, "chris-loek-leon-martijn"]], "2020-07-30": [[1, "id32"]], "Martijn, Loek": [[1, "martijn-loek"], [1, "id34"]], "Leon": [[1, "leon"], [1, "id35"], [1, "id53"], [1, "id74"], [1, "id77"], [1, "id93"], [1, "id103"]], "2020-07-28": [[1, "id33"]], "Martijn, Leon": [[1, "martijn-leon"]], "2020-07-27": [[1, "id36"]], "Martijn, Rob": [[1, "id38"], [1, "id73"]], "2020-07-22 Rob": [[1, "id39"]], "2020-07-14 Guus": [[1, "guus"]], "2020-07-13 Martijn": [[1, "id40"]], "2020-07-10 Leon": [[1, "id41"]], "2020-07-05 Rob": [[1, "id42"]], "2020-06-30 Leon": [[1, "id43"]], "2020-06-29 Martijn": [[1, "id44"]], "2020-06-26 Leon": [[1, "id45"]], "2020-06-25 Rob": [[1, "id46"]], "2020-06-18 Martijn": [[1, "id47"]], "2020-06-15 Leon": [[1, "id48"]], "2020-06-12 Leon": [[1, "id49"]], "2020-06-10 Martijn": [[1, "id50"]], "2020-06-04": [[1, "id51"]], "2020-05-18 Martijn": [[1, "id54"]], "2020-05-13 Martijn": [[1, "id55"]], "2020-05-11 Martijn, Rob": [[1, "id56"]], "2020-04-23 Rob": [[1, "id57"]], "2020-04-17 Axel": [[1, "axel"]], "2020-04-16 Martijn, Rob": [[1, "id58"]], "2020-04-14 Leon": [[1, "id59"]], "2020-04-08 Leon": [[1, "id60"]], "2020-04-07 Leon": [[1, "id61"]], "2020-04-03 Loek, Rob": [[1, "loek-rob"]], "2020-03-31 Rob": [[1, "id62"]], "2020-03-30 Leon, Loek, Rob": [[1, "leon-loek-rob"]], "2020-03-27 Leon": [[1, "id63"], [1, "id64"]], "2020-03-26 Martijn, Rob": [[1, "id65"]], "2020-03-23 Leon": [[1, "id66"]], "2020-03-14 Rob": [[1, "id67"]], "2020-03-10 Rob": [[1, "id68"]], "2020-02-25 Rob": [[1, "id69"]], "2020-02-24 Rob": [[1, "id70"]], "2020-02-20 Rob": [[1, "id71"]], "2020-02-18": [[1, "id72"]], "2020-02-11 Loek": [[1, "id75"]], "2020-02-06": [[1, "id76"]], "2020-02-03 Rob": [[1, "id80"]], "2020-01-28 Martijn": [[1, "id81"]], "2020-01-27 Martijn": [[1, "id82"]], "2020-01-23 Rob": [[1, "id83"]], "2020-01-22 Rob": [[1, "id84"]], "2020-01-20 Martijn": [[1, "id85"]], "2020-01-17 Rob": [[1, "id86"]], "2020-01-16 Leon": [[1, "id87"]], "2020-01-15 Martijn": [[1, "id88"]], "2020-01-14": [[1, "id89"]], "Loek": [[1, "id91"], [1, "id106"], [1, "id122"], [1, "id171"]], "2020-01-13": [[1, "id92"]], "2020-01-10 Leon": [[1, "id95"]], "2019-12-24 Leon, Rob": [[1, "leon-rob"]], "2019-12-20 Leon": [[1, "id96"]], "2019-12-19 Leon": [[1, "id97"]], "2019-12-17 Leon": [[1, "id98"]], "2019-12-16 Loek": [[1, "id99"]], "2019-12-14 Rob": [[1, "id100"]], "2019-12-12 Leon": [[1, "id101"]], "2019-12-09": [[1, "id102"]], "2019-12-06": [[1, "id105"]], "2019-11-18 Rob": [[1, "id108"]], "2019-11-5 Rob": [[1, "id109"]], "2019-11-4 Rob": [[1, "id110"]], "2019-11-2 Loek": [[1, "id111"]], "2019-11-1 Rob": [[1, "id112"]], "2019-10-29 Loek": [[1, "id113"]], "2019-10-28 Rob": [[1, "id114"]], "2019-10-21 Leon": [[1, "id115"]], "2019-10-17 Rob": [[1, "id116"]], "2019-10-10 Leon": [[1, "id117"]], "2019-10-08 Loek": [[1, "id118"]], "2019-10-07 Guus, Loek": [[1, "guus-loek"]], "2019-09-30 Rob": [[1, "id119"]], "2019-09-18 Loek": [[1, "id120"]], "2019-09-16": [[1, "id121"]], "2019-09-10 Rob": [[1, "id124"]], "2019-09-09 Ariana, Rob": [[1, "ariana-rob"]], "2019-09-06 Rob": [[1, "id125"]], "2019-08-30 Rob": [[1, "id126"]], "2019-08-26 Rob": [[1, "id127"]], "2019-08-16 Rob": [[1, "id128"]], "2019-08-14 Rob": [[1, "id129"]], "2019-07-12 Rob": [[1, "id130"]], "2019-07-10 Rob": [[1, "id131"]], "2019-07-09 Axel, Rob": [[1, "axel-rob"]], "2019-07-05": [[1, "id132"]], "David M": [[1, "david-m"]], "2019-07-04 Rob": [[1, "id134"]], "2019-07-02 Rob": [[1, "id135"]], "2019-07-01 Rob": [[1, "id136"]], "2019-06-28 Rob": [[1, "id137"]], "2019-06-21 Rob": [[1, "id138"]], "2019-06-17 Loek, Rob": [[1, "id139"]], "2019-06-05 Rob": [[1, "id140"]], "2019-05-31 Rob": [[1, "id141"]], "2019-05-24 Rob": [[1, "id142"]], "2019-05-23 Rob": [[1, "id143"]], "2019-05-21 Rob": [[1, "id144"]], "2019-05-11 Loek": [[1, "id145"]], "2019-05-09 Rob": [[1, "id146"]], "2019-05-07": [[1, "id147"]], "Ariana": [[1, "ariana"]], "Loek, Rob": [[1, "id148"], [1, "id158"]], "2019-5-6 Rob": [[1, "id149"]], "2019-4-23 Rob": [[1, "id150"]], "2019-4-19 Rob": [[1, "id151"]], "2019-4-5 Leon": [[1, "id152"]], "2019-3-25 Loek": [[1, "id153"]], "2019-3-12 Rob": [[1, "id154"]], "2019-3-8 Loek": [[1, "id155"]], "2019-2-19 Rob": [[1, "id156"]], "2019-2-13": [[1, "id157"]], "Leon, Rob": [[1, "id159"]], "2019-2-12 Rob": [[1, "id160"]], "2019-2-11 Rob": [[1, "id161"]], "2019-1-29 Rob": [[1, "id162"]], "2019-1-28 Loek": [[1, "id163"]], "2019-1-17 Rob": [[1, "id164"]], "2018-12-14 Rob": [[1, "id165"]], "2018-12-12 Rob": [[1, "id166"]], "2018-12-10 Rob": [[1, "id167"]], "2018-12-9 Rob": [[1, "id168"]], "2018-12-8 Tim": [[1, "tim"]], "2018-12-4 Rob": [[1, "id169"]], "2018-11-23": [[1, "id170"]], "2018-11-22 Rob": [[1, "id173"]], "2018-11-16 Leon": [[1, "id174"]], "2018-11-13 Rob": [[1, "id175"]], "2018-11-8 Rob": [[1, "id176"]], "2018-11-1 Rob": [[1, "id177"]], "2018-10-29 Rob": [[1, "id178"]], "2018-10-23 Rob": [[1, "id179"]], "2018-10-20 Rob": [[1, "id180"]], "2018-10-19 Loek, Rob": [[1, "id181"]], "2018-10-3 Rob": [[1, "id182"]], "2018-9-25 Axel": [[1, "id183"]], "2018-9-6 Rob": [[1, "id184"]], "2018-8-30 Rob, Julio": [[1, "rob-julio"]], "2018-8-26 Rob": [[1, "id185"]], "2018-8-10 Rob": [[1, "id186"]], "2018-8-9 Rob": [[1, "id187"]], "2018-8-6 Rob": [[1, "id188"]], "2018-8-2 Rob": [[1, "id189"]], "2018-7-30 Rob": [[1, "id190"]], "2018-7-24 Rob": [[1, "id191"]], "2018-7-19 Rob": [[1, "id192"]], "2018-7-16 Rob": [[1, "id193"]], "2018-7-13 Rob": [[1, "id194"]], "2018-7-12 Julio": [[1, "julio"]], "2018-7-10 Rob": [[1, "id195"]], "2018-6-28 Rob": [[1, "id196"]], "2018-6-21 Mathijs, Rob": [[1, "mathijs-rob"]], "2018-6-9 Rob": [[1, "id197"]], "2018-5-30 Rob": [[1, "id198"]], "2018-5-29 Rob": [[1, "id199"]], "2018-5-17": [[1, "id200"]], "2018-5-10 Rob": [[1, "id201"]], "2018-5-1 Rob": [[1, "id202"]], "2018-4-23/24 Rob": [[1, "id203"]], "Callback management in Node and Protocol": [[1, "callback-management-in-node-and-protocol"]], "2018-4-10 Rob": [[1, "id204"]], "2018-4-6 Rob": [[1, "id205"]], "2018-4-4 Rob": [[1, "id206"]], "2018-4-3 Roeland, Rob": [[1, "roeland-rob"]], "2018-3-29 Rob": [[1, "id207"]], "Nodes": [[1, "nodes"], [88, "nodes"]], "LossModel and qubit number states": [[1, "lossmodel-and-qubit-number-states"]], "2018-2-25 Rob": [[1, "id208"]], "2018-2-15 Rob": [[1, "id209"]], "2018-2-7 Rob": [[1, "id210"]], "2018-1-28 Rob": [[1, "id211"]], "2018-1-25 Rob": [[1, "id212"]], "2018-1-4 Rob": [[1, "id213"]], "2018-1-2 Rob": [[1, "id214"]], "2017-12-21 Kenneth, Rob": [[1, "kenneth-rob"]], "2017-12-17 Rob": [[1, "id215"]], "2017-12-15 Rob": [[1, "id216"]], "2017-12-08 Rob": [[1, "id217"]], "2017-12-04 Rob": [[1, "id218"]], "2017-12-02 Rob": [[1, "id219"]], "2017-10-19 Rob": [[1, "id220"]], "Contributing": [[2, "contributing"]], "Resources and links": [[2, "resources-and-links"]], "Git and GitLab": [[2, "git-and-gitlab"]], "Versioning and releases": [[2, "versioning-and-releases"]], "GitLab continuous integration": [[2, "gitlab-continuous-integration"]], "Style guide": [[2, "style-guide"]], "Language": [[2, "language"]], "Documentation": [[2, "documentation"]], "Code documentation": [[2, "code-documentation"]], "Referencing": [[2, "referencing"]], "Maths": [[2, "maths"]], "Modules": [[2, "modules"], [77, null], [78, null], [79, null], [80, null], [81, null], [82, null], [83, null]], "Doctests": [[2, "doctests"]], "Code style": [[2, "code-style"]], "Naming": [[2, "naming"]], "Installing the NetSquid package": [[3, "installing-the-netsquid-package"]], "Installing using the NetSquid server": [[3, "installing-using-the-netsquid-server"]], "Installing using a wheel file": [[3, "installing-using-a-wheel-file"]], "Verifying the installation": [[3, "verifying-the-installation"]], "Building and installing NetSquid from source": [[4, "building-and-installing-netsquid-from-source"]], "Building and installing the NetSquid package": [[4, "building-and-installing-the-netsquid-package"]], "Installing from source on MacOS": [[4, "installing-from-source-on-macos"]], "Building the documentation": [[4, "building-the-documentation"]], "Building the binary package": [[4, "building-the-binary-package"]], "Download binary packages": [[4, "download-binary-packages"]], "Deploying the binary package and documentation": [[4, "deploying-the-binary-package-and-documentation"]], "NETSQUID SOFTWARE END USER LICENSE CONDITIONS": [[5, "netsquid-software-end-user-license-conditions"]], "ARTICLE 1 - DEFINITIONS": [[5, "article-1-definitions"]], "ARTICLE 2 - GRANT AND CONDITIONS OF USE": [[5, "article-2-grant-and-conditions-of-use"]], "2.1 License grant": [[5, "license-grant"]], "2.2 Conditions of use": [[5, "conditions-of-use"]], "2.3 Use of LICENSORS name": [[5, "use-of-licensors-name"]], "2.4 Restrictions": [[5, "restrictions"]], "2.5 Registration of License": [[5, "registration-of-license"]], "ARTICLE 3 - FEES": [[5, "article-3-fees"]], "3.1 License fees": [[5, "license-fees"]], "ARTICLE 4 - INSTALLATION, SUPPORT, UPDATES AND UPGRADES": [[5, "article-4-installation-support-updates-and-upgrades"]], "4.1 Delivery and acceptance": [[5, "delivery-and-acceptance"]], "4.2 Documentation": [[5, "documentation"]], "4.3 Installation": [[5, "installation"]], "4.4 Support": [[5, "support"]], "4.5 Updates": [[5, "updates"]], "4.6 Upgrades": [[5, "upgrades"]], "ARTICLE 5 - WARRANTIES, LIABILITY, INDEMNITY": [[5, "article-5-warranties-liability-indemnity"]], "5.1 Title": [[5, "title"]], "5.2 Disclaimer of Warranty": [[5, "disclaimer-of-warranty"]], "5.3 Liability": [[5, "liability"]], "5.4 Indemnity": [[5, "indemnity"]], "ARTICLE 6 - CONFIDENTIALITY": [[5, "article-6-confidentiality"]], "6.1 Confidential Information": [[5, "confidential-information"]], "6.2 Restrictions on disclosure": [[5, "restrictions-on-disclosure"]], "6.3 Exceptions": [[5, "exceptions"]], "6.4 Compulsory disclosure": [[5, "compulsory-disclosure"]], "6.5 Return and/or destruction of Confidential Information": [[5, "return-and-or-destruction-of-confidential-information"]], "ARTICLE 7 - DURATION AND TERMINATION": [[5, "article-7-duration-and-termination"]], "7.1 Duration": [[5, "duration"]], "7.2 Termination for breach": [[5, "termination-for-breach"]], "7.3 Liquidation": [[5, "liquidation"]], "7.4 Consequences of termination": [[5, "consequences-of-termination"]], "7.5 Survival of terms": [[5, "survival-of-terms"]], "ARTICLE 8 - MISCELLANEOUS": [[5, "article-8-miscellaneous"]], "8.1 Force majeure": [[5, "force-majeure"]], "8.2 Notices": [[5, "notices"]], "If to TNO:": [[5, "if-to-tno"]], "If to TUD:": [[5, "if-to-tud"]], "8.3 Severability": [[5, "severability"]], "8.4 Waiver": [[5, "waiver"]], "8.5 Assignment": [[5, "assignment"]], "8.6 Entire agreement and amendments": [[5, "entire-agreement-and-amendments"]], "8.7 Headings": [[5, "headings"]], "8.8 Applicable law": [[5, "applicable-law"]], "8.9 Dispute resolution": [[5, "dispute-resolution"]], "NetSquid: the Network Simulator for Quantum Information using Discrete events": [[6, "netsquid-the-network-simulator-for-quantum-information-using-discrete-events"]], "RELEASE NOTES": [[7, "release-notes"]], "Release 1.1": [[7, "release-1-1"]], "New features": [[7, "new-features"]], "Improvements": [[7, "improvements"], [7, "id9"], [7, "id11"]], "Release 1.0": [[7, "release-1-0"]], "Quantum states and representations": [[7, "quantum-states-and-representations"]], "State sampler": [[7, "state-sampler"]], "Stabiliser formalism": [[7, "stabiliser-formalism"]], "Protocols": [[7, "protocols"], [7, "id3"], [85, "protocols"], [89, "protocols"]], "QSource": [[7, "qsource"], [7, "id8"]], "Quantum memory": [[7, "quantum-memory"], [7, "id4"], [86, "quantum-memory"]], "Quantum processor": [[7, "quantum-processor"]], "Misc": [[7, "misc"]], "Release 0.10": [[7, "release-0-10"]], "Major new features": [[7, "major-new-features"], [7, "id7"], [7, "id10"]], "Two new formalisms": [[7, "two-new-formalisms"]], "A QuantumDetector component": [[7, "a-quantumdetector-component"]], "Composite instructions for quantum processors": [[7, "composite-instructions-for-quantum-processors"]], "Minor new features and improvements": [[7, "minor-new-features-and-improvements"]], "QuantumProcessor and QuantumPrograms": [[7, "quantumprocessor-and-quantumprograms"]], "Networking": [[7, "networking"]], "Others": [[7, "others"]], "Release 0.9": [[7, "release-0-9"]], "Change to authenticated access for online documentation and pypi server": [[7, "change-to-authenticated-access-for-online-documentation-and-pypi-server"]], "Major new features and improvements": [[7, "major-new-features-and-improvements"], [7, "id1"], [7, "id5"]], "Added a Network component": [[7, "added-a-network-component"]], "New protocol subclasses": [[7, "new-protocol-subclasses"]], "Quantum program arguments and concatenation": [[7, "quantum-program-arguments-and-concatenation"]], "Improved documentation": [[7, "improved-documentation"]], "Minor features and improvements": [[7, "minor-features-and-improvements"], [7, "id2"]], "New package version dependencies": [[7, "new-package-version-dependencies"]], "Release 0.8": [[7, "release-0-8"]], "New minimum python dependency": [[7, "new-minimum-python-dependency"]], "Added a complete tutorial": [[7, "added-a-complete-tutorial"]], "Protocols run method now yields directly on event expressions": [[7, "protocols-run-method-now-yields-directly-on-event-expressions"]], "Bell measurement instruction": [[7, "bell-measurement-instruction"]], "QuantumProcessor": [[7, "quantumprocessor"], [7, "id12"]], "Components and Ports": [[7, "components-and-ports"]], "Qubits": [[7, "qubits"], [85, "qubits"]], "Release 0.7": [[7, "release-0-7"]], "Protocols support sequential flow using yield": [[7, "protocols-support-sequential-flow-using-yield"]], "Re-design of how event expressions are handled": [[7, "re-design-of-how-event-expressions-are-handled"]], "Restructuring of component models": [[7, "restructuring-of-component-models"]], "A subpackage for examples": [[7, "a-subpackage-for-examples"]], "Operators can be represented using sparse matrices": [[7, "operators-can-be-represented-using-sparse-matrices"]], "General improvements": [[7, "general-improvements"]], "netsquid.qubits": [[7, "netsquid-qubits"], [82, "netsquid-qubits"]], "netsquid.{components,nodes}": [[7, "netsquid-components-nodes"]], "netsquid.util": [[7, "netsquid-util"], [83, "netsquid-util"]], "misc": [[7, "id6"]], "Removed functionality and deprecations": [[7, "removed-functionality-and-deprecations"]], "Release 0.6": [[7, "release-0-6"]], "ProtectedMap used by Components": [[7, "protectedmap-used-by-components"]], "StateSampler": [[7, "statesampler"]], "Clock": [[7, "clock"]], "Logging": [[7, "logging"]], "Sub and Super Components": [[7, "sub-and-super-components"]], "QuantumMemory": [[7, "quantummemory"], [7, "id13"]], "Quantum states and qubit api": [[7, "quantum-states-and-qubit-api"]], "Multi operate": [[7, "multi-operate"]], "Stabilizer": [[7, "stabilizer"]], "Converting quantum states": [[7, "converting-quantum-states"]], "Operators": [[7, "operators"], [7, "id14"]], "pydynaa": [[7, "pydynaa"]], "Other": [[7, "other"]], "Bug fixes": [[7, "bug-fixes"], [7, "id15"]], "Deprecated": [[7, "deprecated"], [7, "id16"]], "Release 0.5": [[7, "release-0-5"]], "Modular and connectable components": [[7, "modular-and-connectable-components"]], "Models and component properties": [[7, "models-and-component-properties"]], "Data collecting functionality": [[7, "data-collecting-functionality"]], "Stabilizers": [[7, "stabilizers"]], "Performance increase": [[7, "performance-increase"]], "Adapting to numpy": [[7, "adapting-to-numpy"]], "Other improvements": [[7, "other-improvements"]], "Features of Operator": [[7, "features-of-operator"]], "Features of Channel and Node": [[7, "features-of-channel-and-node"]], "netsquid.components.cchannel": [[8, "module-netsquid.components.cchannel"]], "netsquid.components.ccoding": [[9, "module-netsquid.components.ccoding"]], "netsquid.components.channel": [[10, "netsquid-components-channel"]], "netsquid.components.clock": [[11, "module-netsquid.components.clock"]], "netsquid.components.component": [[12, "module-netsquid.components.component"]], "netsquid.components.cqchannel": [[13, "module-netsquid.components.cqchannel"]], "netsquid.components.instructions": [[14, "module-netsquid.components.instructions"]], "netsquid.components.qchannel": [[15, "module-netsquid.components.qchannel"]], "netsquid.components.qdetector": [[16, "module-netsquid.components.qdetector"]], "netsquid.components.qmemory": [[17, "netsquid-components-qmemory"]], "netsquid.components.qprocessor": [[18, "module-netsquid.components.qprocessor"]], "netsquid.components.qprogram": [[19, "module-netsquid.components.qprogram"]], "netsquid.components.qsource": [[20, "netsquid-components-qsource"]], "netsquid.components.switch": [[21, "module-netsquid.components.switch"]], "netsquid.examples.entanglenodes": [[22, "module-netsquid.examples.entanglenodes"]], "netsquid.examples.magic_simple_link": [[23, "netsquid-examples-magic-simple-link"]], "netsquid.examples.purify": [[24, "module-netsquid.examples.purify"]], "netsquid.examples.repeater": [[25, "module-netsquid.examples.repeater"]], "netsquid.examples.repeater_chain": [[26, "module-netsquid.examples.repeater_chain"]], "netsquid.examples.simple_link": [[27, "netsquid-examples-simple-link"]], "netsquid.examples.teleportation": [[28, "module-netsquid.examples.teleportation"]], "netsquid.components.models.cerrormodels": [[29, "module-netsquid.components.models.cerrormodels"]], "netsquid.components.models.delaymodels": [[30, "module-netsquid.components.models.delaymodels"]], "netsquid.components.models.errormodels": [[31, "module-netsquid.components.models.errormodels"]], "netsquid.components.models.model": [[32, "module-netsquid.components.models.model"]], "netsquid.componentsmodels.qerrormodels": [[33, "module-netsquid.components.models.qerrormodels"]], "netsquid.nodes.connections": [[34, "module-netsquid.nodes.connections"]], "netsquid.nodes.network": [[35, "module-netsquid.nodes.network"]], "netsquid.nodes.node": [[36, "module-netsquid.nodes.node"]], "netsquid.protocols.nodeprotocols": [[37, "module-netsquid.protocols.nodeprotocols"]], "netsquid.protocols.protocol": [[38, "module-netsquid.protocols.protocol"]], "netsquid.protocols.serviceprotocol": [[39, "module-netsquid.protocols.serviceprotocol"]], "pyDynAA package": [[40, "pydynaa-package"]], "Classes": [[40, null]], "netsquid.qubits.cliffords": [[41, "module-netsquid.qubits.cliffords"]], "netsquid.qubits.dmtools": [[42, "module-netsquid.qubits.dmtools"]], "netsquid.qubits.dmutil": [[43, "module-netsquid.qubits.dmutil"]], "netsquid.qubits.gslctools": [[44, "module-netsquid.qubits.gslctools"]], "netsquid.qubits.gslcutil": [[45, "module-netsquid.qubits.gslcutil"]], "netsquid.qubits.ketstates": [[46, "module-netsquid.qubits.ketstates"]], "netsquid.qubits.kettools": [[47, "module-netsquid.qubits.kettools"]], "netsquid.qubits.ketutil": [[48, "module-netsquid.qubits.ketutil"]], "netsquid.qubits.operators": [[49, "module-netsquid.qubits.operators"]], "netsquid.qubits.opmath": [[50, "netsquid-qubits-opmath"]], "netsquid.qubits.qformalism": [[51, "module-netsquid.qubits.qformalism"]], "Overview": [[51, "overview"]], "Formalisms": [[51, "id5"]], "Ket state vector": [[51, "ket-state-vector"]], "Density matrix": [[51, "density-matrix"]], "Stabilizer tableau": [[51, "stabilizer-tableau"]], "Graph states with local Cliffords": [[51, "graph-states-with-local-cliffords"]], "Adding new formalisms": [[51, "adding-new-formalisms"]], "netsquid.qubits.qrepr": [[52, "module-netsquid.qubits.qrepr"]], "netsquid.qubits.qreprutil": [[53, "module-netsquid.qubits.qreprutil"]], "netsquid.qubits.qstate": [[54, "module-netsquid.qubits.qstate"]], "netsquid.qubits.qubit": [[55, "module-netsquid.qubits.qubit"]], "netsquid.qubits.qubitapi": [[56, "module-netsquid.qubits.qubitapi"]], "netsquid.qubits.sparsedmtools": [[57, "module-netsquid.qubits.sparsedmtools"]], "netsquid.qubits.sparseutil": [[58, "module-netsquid.qubits.sparseutil"]], "netsquid.qubits.stabtools": [[59, "module-netsquid.qubits.stabtools"]], "netsquid.qubits.state_sampler": [[60, "module-netsquid.qubits.state_sampler"]], "NetSquid package": [[61, "netsquid-package"]], "Subpackages": [[61, null]], "netsquid.util.constrainedmap": [[62, "module-netsquid.util.constrainedmap"]], "netsquid.util.cycache": [[63, "module-netsquid.util.cycache"]], "netsquid.util.cymath": [[64, "module-netsquid.util.cymath"]], "netsquid.util.datacollector": [[65, "module-netsquid.util.datacollector"]], "netsquid.util.simlog": [[66, "module-netsquid.util.simlog"]], "netsquid.util.simstats": [[67, "module-netsquid.util.simstats"]], "netsquid.util.simtools": [[68, "module-netsquid.util.simtools"]], "NetSquid": [[69, "netsquid"]], "About": [[69, null]], "Learn NetSquid": [[69, null]], "API Reference": [[69, null]], "For developers": [[69, null]], "Examples": [[70, "examples"]], "Faster Link layer Protocol using abstraction": [[71, "faster-link-layer-protocol-using-abstraction"]], "Repeater with purification": [[72, "repeater-with-purification"]], "Entangle nodes protocol": [[72, "entangle-nodes-protocol"]], "Purification protocols": [[72, "purification-protocols"]], "Repeater protocol": [[72, "repeater-protocol"]], "Repeater chain": [[73, "repeater-chain"]], "A simple link layer protocol": [[74, "a-simple-link-layer-protocol"]], "Teleportation": [[75, "teleportation"]], "netsquid.components": [[77, "netsquid-components"]], "netsquid.components.models": [[78, "netsquid-components-models"]], "netsquid.examples": [[79, "netsquid-examples"]], "netsquid.nodes": [[80, "netsquid-nodes"]], "netsquid.protocols": [[81, "netsquid-protocols"]], "pydynaa.Entity": [[84, "pydynaa-entity"]], "pydynaa.Event": [[84, "pydynaa-event"]], "pydynaa.EventType": [[84, "pydynaa-eventtype"]], "pydynaa.EventExpression": [[84, "pydynaa-eventexpression"]], "pydynaa.EventHandler": [[84, "pydynaa-eventhandler"]], "pydynaa.ExpressionHandler": [[84, "pydynaa-expressionhandler"]], "pydynaa.SimulationEngine": [[84, "pydynaa-simulationengine"]], "NetSquid in 10 minutes": [[85, "netsquid-in-10-minutes"]], "Simulation engine": [[85, "simulation-engine"]], "Components": [[85, "components"], [86, "components"]], "Running the simulation": [[85, "running-the-simulation"]], "Modelling of network components": [[86, "modelling-of-network-components"]], "Table of contents": [[86, "table-of-contents"], [88, "table-of-contents"], [89, "table-of-contents"], [90, "table-of-contents"], [91, "table-of-contents"], [92, "table-of-contents"], [93, "table-of-contents"]], "Channels": [[86, "channels"]], "Ports": [[86, "ports"]], "Ping pong using components and ports": [[86, "ping-pong-using-components-and-ports"]], "Quantum teleportation using components *": [[86, "quantum-teleportation-using-components"]], "What is next?": [[86, "what-is-next"], [87, "what-is-next"], [88, "what-is-next"], [89, "what-is-next"], [90, "what-is-next"], [91, "what-is-next"], [92, "what-is-next"]], "Tutorial": [[87, "tutorial"]], "Quantum information": [[87, "quantum-information"]], "Quantum teleportation": [[87, "id1"]], "See also": [[87, "see-also"], [89, "see-also"], [92, "see-also"]], "Nodes and Connections": [[88, "nodes-and-connections"]], "Connections": [[88, "connections"]], "An entangling connection for teleportation *": [[88, "an-entangling-connection-for-teleportation"]], "Protocol": [[89, "protocol"]], "The ping pong example using protocols": [[89, "the-ping-pong-example-using-protocols"]], "The teleportation example using protocols *": [[89, "the-teleportation-example-using-protocols"]], "Discrete event simulation": [[90, "discrete-event-simulation"]], "The pyDynAA simulation engine": [[90, "the-pydynaa-simulation-engine"]], "A quantum ping pong example": [[90, "a-quantum-ping-pong-example"]], "Scheduling events": [[90, "scheduling-events"]], "Waiting for and handling events": [[90, "waiting-for-and-handling-events"]], "Running a simulation": [[90, "running-a-simulation"], [93, "running-a-simulation"]], "Event expressions by example: quantum teleportation *": [[90, "event-expressions-by-example-quantum-teleportation"]], "The Quantum Processor": [[91, "the-quantum-processor"]], "Instructions for quantum memory devices": [[91, "instructions-for-quantum-memory-devices"]], "Physical instructions *": [[91, "physical-instructions"]], "Quantum programs *": [[91, "quantum-programs"]], "Local teleportation example using programs *": [[91, "local-teleportation-example-using-programs"]], "Additional features *": [[91, "additional-features"]], "Qubits and quantum computation": [[92, "qubits-and-quantum-computation"]], "Qubits and their quantum state": [[92, "qubits-and-their-quantum-state"]], "Qubit measurement": [[92, "qubit-measurement"]], "Quantum state formalism": [[92, "quantum-state-formalism"]], "Quantum operations": [[92, "quantum-operations"]], "General measurements *": [[92, "general-measurements"]], "Applying noise *": [[92, "applying-noise"]], "A full simulation": [[93, "a-full-simulation"]], "Setting up the complete network *": [[93, "setting-up-the-complete-network"]], "Setting up the simulation": [[93, "setting-up-the-simulation"]]}, "indexentries": {"classicalchannel (class in netsquid.components.cchannel)": [[8, "netsquid.components.cchannel.ClassicalChannel"]], "add_ports() (netsquid.components.cchannel.classicalchannel method)": [[8, "netsquid.components.cchannel.ClassicalChannel.add_ports"]], "add_property() (netsquid.components.cchannel.classicalchannel method)": [[8, "netsquid.components.cchannel.ClassicalChannel.add_property"]], "add_subcomponent() (netsquid.components.cchannel.classicalchannel method)": [[8, "netsquid.components.cchannel.ClassicalChannel.add_subcomponent"]], "classical_code (netsquid.components.cchannel.classicalchannel property)": [[8, "netsquid.components.cchannel.ClassicalChannel.classical_code"]], "compute_delay() (netsquid.components.cchannel.classicalchannel method)": [[8, "netsquid.components.cchannel.ClassicalChannel.compute_delay"]], "delay_mean (netsquid.components.cchannel.classicalchannel attribute)": [[8, "netsquid.components.cchannel.ClassicalChannel.delay_mean"]], "delay_std (netsquid.components.cchannel.classicalchannel attribute)": [[8, "netsquid.components.cchannel.ClassicalChannel.delay_std"]], "has_subcomponent() (netsquid.components.cchannel.classicalchannel method)": [[8, "netsquid.components.cchannel.ClassicalChannel.has_subcomponent"]], "has_supercomponent() (netsquid.components.cchannel.classicalchannel method)": [[8, "netsquid.components.cchannel.ClassicalChannel.has_supercomponent"]], "last_rx_time (netsquid.components.cchannel.classicalchannel attribute)": [[8, "netsquid.components.cchannel.ClassicalChannel.last_rx_time"]], "models (netsquid.components.cchannel.classicalchannel attribute)": [[8, "netsquid.components.cchannel.ClassicalChannel.models"]], "module": [[8, "module-netsquid.components.cchannel"], [9, "module-netsquid.components.ccoding"], [10, "module-netsquid.components.channel"], [11, "module-netsquid.components.clock"], [12, "module-netsquid.components.component"], [13, "module-netsquid.components.cqchannel"], [14, "module-netsquid.components.instructions"], [15, "module-netsquid.components.qchannel"], [16, "module-netsquid.components.qdetector"], [17, "module-netsquid.components.qmemory"], [18, "module-netsquid.components.qprocessor"], [19, "module-netsquid.components.qprogram"], [20, "module-netsquid.components.qsource"], [21, "module-netsquid.components.switch"], [22, "module-netsquid.examples.entanglenodes"], [24, "module-netsquid.examples.purify"], [25, "module-netsquid.examples.repeater"], [26, "module-netsquid.examples.repeater_chain"], [28, "module-netsquid.examples.teleportation"], [29, "module-netsquid.components.models.cerrormodels"], [30, "module-netsquid.components.models.delaymodels"], [31, "module-netsquid.components.models.errormodels"], [32, "module-netsquid.components.models.model"], [33, "module-netsquid.components.models.qerrormodels"], [34, "module-netsquid.nodes.connections"], [35, "module-netsquid.nodes.network"], [36, "module-netsquid.nodes.node"], [37, "module-netsquid.protocols.nodeprotocols"], [38, "module-netsquid.protocols.protocol"], [39, "module-netsquid.protocols.serviceprotocol"], [41, "module-netsquid.qubits.cliffords"], [42, "module-netsquid.qubits.dmtools"], [43, "module-netsquid.qubits.dmutil"], [44, "module-netsquid.qubits.gslctools"], [45, "module-netsquid.qubits.gslcutil"], [46, "module-netsquid.qubits.ketstates"], [47, "module-netsquid.qubits.kettools"], [48, "module-netsquid.qubits.ketutil"], [49, "module-netsquid.qubits.operators"], [50, "module-netsquid.qubits.opmath"], [51, "module-netsquid.qubits.qformalism"], [52, "module-netsquid.qubits.qrepr"], [53, "module-netsquid.qubits.qreprutil"], [54, "module-netsquid.qubits.qstate"], [55, "module-netsquid.qubits.qubit"], [56, "module-netsquid.qubits.qubitapi"], [57, "module-netsquid.qubits.sparsedmtools"], [58, "module-netsquid.qubits.sparseutil"], [59, "module-netsquid.qubits.stabtools"], [60, "module-netsquid.qubits.state_sampler"], [62, "module-netsquid.util.constrainedmap"], [63, "module-netsquid.util.cycache"], [64, "module-netsquid.util.cymath"], [65, "module-netsquid.util.datacollector"], [66, "module-netsquid.util.simlog"], [67, "module-netsquid.util.simstats"], [68, "module-netsquid.util.simtools"]], "name (netsquid.components.cchannel.classicalchannel attribute)": [[8, "netsquid.components.cchannel.ClassicalChannel.name"]], "netsquid.components.cchannel": [[8, "module-netsquid.components.cchannel"]], "output_empty (netsquid.components.cchannel.classicalchannel attribute)": [[8, "netsquid.components.cchannel.ClassicalChannel.output_empty"]], "peek() (netsquid.components.cchannel.classicalchannel method)": [[8, "netsquid.components.cchannel.ClassicalChannel.peek"]], "ports (netsquid.components.cchannel.classicalchannel attribute)": [[8, "netsquid.components.cchannel.ClassicalChannel.ports"]], "postprocess_outputs() (netsquid.components.cchannel.classicalchannel method)": [[8, "netsquid.components.cchannel.ClassicalChannel.postprocess_outputs"]], "preprocess_inputs() (netsquid.components.cchannel.classicalchannel method)": [[8, "netsquid.components.cchannel.ClassicalChannel.preprocess_inputs"]], "properties (netsquid.components.cchannel.classicalchannel attribute)": [[8, "netsquid.components.cchannel.ClassicalChannel.properties"]], "receive() (netsquid.components.cchannel.classicalchannel method)": [[8, "netsquid.components.cchannel.ClassicalChannel.receive"]], "rem_subcomponent() (netsquid.components.cchannel.classicalchannel method)": [[8, "netsquid.components.cchannel.ClassicalChannel.rem_subcomponent"]], "remove() (netsquid.components.cchannel.classicalchannel method)": [[8, "netsquid.components.cchannel.ClassicalChannel.remove"]], "reset() (netsquid.components.cchannel.classicalchannel method)": [[8, "netsquid.components.cchannel.ClassicalChannel.reset"]], "send() (netsquid.components.cchannel.classicalchannel method)": [[8, "netsquid.components.cchannel.ClassicalChannel.send"]], "specify_model() (netsquid.components.cchannel.classicalchannel method)": [[8, "netsquid.components.cchannel.ClassicalChannel.specify_model"]], "subcomponents (netsquid.components.cchannel.classicalchannel attribute)": [[8, "netsquid.components.cchannel.ClassicalChannel.subcomponents"]], "supercomponent (netsquid.components.cchannel.classicalchannel attribute)": [[8, "netsquid.components.cchannel.ClassicalChannel.supercomponent"]], "transmit_empty_items (netsquid.components.cchannel.classicalchannel attribute)": [[8, "netsquid.components.cchannel.ClassicalChannel.transmit_empty_items"]], "transmitting (netsquid.components.cchannel.classicalchannel attribute)": [[8, "netsquid.components.cchannel.ClassicalChannel.transmitting"]], "uid (netsquid.components.cchannel.classicalchannel attribute)": [[8, "netsquid.components.cchannel.ClassicalChannel.uid"]], "use_classical_code (netsquid.components.cchannel.classicalchannel property)": [[8, "netsquid.components.cchannel.ClassicalChannel.use_classical_code"]], "classicalcodingfactory (class in netsquid.components.ccoding)": [[9, "netsquid.components.ccoding.ClassicalCodingFactory"]], "codeditem (class in netsquid.components.ccoding)": [[9, "netsquid.components.ccoding.CodedItem"]], "apply_loss_model() (netsquid.components.ccoding.codeditem method)": [[9, "netsquid.components.ccoding.CodedItem.apply_loss_model"]], "create_coded_item() (netsquid.components.ccoding.classicalcodingfactory class method)": [[9, "netsquid.components.ccoding.ClassicalCodingFactory.create_coded_item"]], "decode() (netsquid.components.ccoding.codeditem method)": [[9, "netsquid.components.ccoding.CodedItem.decode"]], "encode() (netsquid.components.ccoding.codeditem method)": [[9, "netsquid.components.ccoding.CodedItem.encode"]], "encoded_item (netsquid.components.ccoding.codeditem property)": [[9, "netsquid.components.ccoding.CodedItem.encoded_item"]], "encoding_type (netsquid.components.ccoding.codeditem property)": [[9, "netsquid.components.ccoding.CodedItem.encoding_type"]], "has_encoding (netsquid.components.ccoding.codeditem property)": [[9, "netsquid.components.ccoding.CodedItem.has_encoding"]], "item (netsquid.components.ccoding.codeditem property)": [[9, "netsquid.components.ccoding.CodedItem.item"]], "netsquid.components.ccoding": [[9, "module-netsquid.components.ccoding"]], "object_types (netsquid.components.ccoding.codeditem property)": [[9, "netsquid.components.ccoding.CodedItem.object_types"]], "channel (class in netsquid.components.channel)": [[10, "netsquid.components.channel.Channel"]], "channeldelayerror": [[10, "netsquid.components.channel.ChannelDelayError"]], "channelerror": [[10, "netsquid.components.channel.ChannelError"]], "add_ports() (netsquid.components.channel.channel method)": [[10, "netsquid.components.channel.Channel.add_ports"]], "add_property() (netsquid.components.channel.channel method)": [[10, "netsquid.components.channel.Channel.add_property"]], "add_subcomponent() (netsquid.components.channel.channel method)": [[10, "netsquid.components.channel.Channel.add_subcomponent"]], "compute_delay() (netsquid.components.channel.channel method)": [[10, "netsquid.components.channel.Channel.compute_delay"]], "delay_mean (netsquid.components.channel.channel attribute)": [[10, "netsquid.components.channel.Channel.delay_mean"]], "delay_std (netsquid.components.channel.channel attribute)": [[10, "netsquid.components.channel.Channel.delay_std"]], "has_subcomponent() (netsquid.components.channel.channel method)": [[10, "netsquid.components.channel.Channel.has_subcomponent"]], "has_supercomponent() (netsquid.components.channel.channel method)": [[10, "netsquid.components.channel.Channel.has_supercomponent"]], "last_rx_time (netsquid.components.channel.channel attribute)": [[10, "netsquid.components.channel.Channel.last_rx_time"]], "models (netsquid.components.channel.channel attribute)": [[10, "netsquid.components.channel.Channel.models"]], "name (netsquid.components.channel.channel attribute)": [[10, "netsquid.components.channel.Channel.name"]], "netsquid.components.channel": [[10, "module-netsquid.components.channel"]], "output_empty (netsquid.components.channel.channel attribute)": [[10, "netsquid.components.channel.Channel.output_empty"]], "peek() (netsquid.components.channel.channel method)": [[10, "netsquid.components.channel.Channel.peek"]], "ports (netsquid.components.channel.channel attribute)": [[10, "netsquid.components.channel.Channel.ports"]], "postprocess_outputs() (netsquid.components.channel.channel method)": [[10, "netsquid.components.channel.Channel.postprocess_outputs"]], "preprocess_inputs() (netsquid.components.channel.channel method)": [[10, "netsquid.components.channel.Channel.preprocess_inputs"]], "properties (netsquid.components.channel.channel attribute)": [[10, "netsquid.components.channel.Channel.properties"]], "receive() (netsquid.components.channel.channel method)": [[10, "netsquid.components.channel.Channel.receive"]], "rem_subcomponent() (netsquid.components.channel.channel method)": [[10, "netsquid.components.channel.Channel.rem_subcomponent"]], "remove() (netsquid.components.channel.channel method)": [[10, "netsquid.components.channel.Channel.remove"]], "reset() (netsquid.components.channel.channel method)": [[10, "netsquid.components.channel.Channel.reset"]], "send() (netsquid.components.channel.channel method)": [[10, "netsquid.components.channel.Channel.send"]], "specify_model() (netsquid.components.channel.channel method)": [[10, "netsquid.components.channel.Channel.specify_model"]], "subcomponents (netsquid.components.channel.channel attribute)": [[10, "netsquid.components.channel.Channel.subcomponents"]], "supercomponent (netsquid.components.channel.channel attribute)": [[10, "netsquid.components.channel.Channel.supercomponent"]], "transmit_empty_items (netsquid.components.channel.channel attribute)": [[10, "netsquid.components.channel.Channel.transmit_empty_items"]], "transmitting (netsquid.components.channel.channel attribute)": [[10, "netsquid.components.channel.Channel.transmitting"]], "uid (netsquid.components.channel.channel attribute)": [[10, "netsquid.components.channel.Channel.uid"]], "with_traceback() (netsquid.components.channel.channeldelayerror method)": [[10, "netsquid.components.channel.ChannelDelayError.with_traceback"]], "with_traceback() (netsquid.components.channel.channelerror method)": [[10, "netsquid.components.channel.ChannelError.with_traceback"]], "clock (class in netsquid.components.clock)": [[11, "netsquid.components.clock.Clock"]], "add_ports() (netsquid.components.clock.clock method)": [[11, "netsquid.components.clock.Clock.add_ports"]], "add_property() (netsquid.components.clock.clock method)": [[11, "netsquid.components.clock.Clock.add_property"]], "add_subcomponent() (netsquid.components.clock.clock method)": [[11, "netsquid.components.clock.Clock.add_subcomponent"]], "frequency (netsquid.components.clock.clock property)": [[11, "netsquid.components.clock.Clock.frequency"]], "get_period() (netsquid.components.clock.clock method)": [[11, "netsquid.components.clock.Clock.get_period"]], "has_subcomponent() (netsquid.components.clock.clock method)": [[11, "netsquid.components.clock.Clock.has_subcomponent"]], "has_supercomponent() (netsquid.components.clock.clock method)": [[11, "netsquid.components.clock.Clock.has_supercomponent"]], "is_running (netsquid.components.clock.clock property)": [[11, "netsquid.components.clock.Clock.is_running"]], "models (netsquid.components.clock.clock attribute)": [[11, "netsquid.components.clock.Clock.models"]], "name (netsquid.components.clock.clock attribute)": [[11, "netsquid.components.clock.Clock.name"]], "netsquid.components.clock": [[11, "module-netsquid.components.clock"]], "num_ticks (netsquid.components.clock.clock property)": [[11, "netsquid.components.clock.Clock.num_ticks"]], "ports (netsquid.components.clock.clock attribute)": [[11, "netsquid.components.clock.Clock.ports"]], "properties (netsquid.components.clock.clock attribute)": [[11, "netsquid.components.clock.Clock.properties"]], "rem_subcomponent() (netsquid.components.clock.clock method)": [[11, "netsquid.components.clock.Clock.rem_subcomponent"]], "remove() (netsquid.components.clock.clock method)": [[11, "netsquid.components.clock.Clock.remove"]], "reset() (netsquid.components.clock.clock method)": [[11, "netsquid.components.clock.Clock.reset"]], "specify_model() (netsquid.components.clock.clock method)": [[11, "netsquid.components.clock.Clock.specify_model"]], "start() (netsquid.components.clock.clock method)": [[11, "netsquid.components.clock.Clock.start"]], "stop() (netsquid.components.clock.clock method)": [[11, "netsquid.components.clock.Clock.stop"]], "subcomponents (netsquid.components.clock.clock attribute)": [[11, "netsquid.components.clock.Clock.subcomponents"]], "supercomponent (netsquid.components.clock.clock attribute)": [[11, "netsquid.components.clock.Clock.supercomponent"]], "uid (netsquid.components.clock.clock attribute)": [[11, "netsquid.components.clock.Clock.uid"]], "component (class in netsquid.components.component)": [[12, "netsquid.components.component.Component"]], "componenterror": [[12, "netsquid.components.component.ComponentError"]], "componenthierarchyerror": [[12, "netsquid.components.component.ComponentHierarchyError"]], "message (class in netsquid.components.component)": [[12, "netsquid.components.component.Message"]], "port (class in netsquid.components.component)": [[12, "netsquid.components.component.Port"]], "portbinderror": [[12, "netsquid.components.component.PortBindError"]], "portconnecterror": [[12, "netsquid.components.component.PortConnectError"]], "porterror": [[12, "netsquid.components.component.PortError"]], "portforwarderror": [[12, "netsquid.components.component.PortForwardError"]], "add_ports() (netsquid.components.component.component method)": [[12, "netsquid.components.component.Component.add_ports"]], "add_property() (netsquid.components.component.component method)": [[12, "netsquid.components.component.Component.add_property"]], "add_subcomponent() (netsquid.components.component.component method)": [[12, "netsquid.components.component.Component.add_subcomponent"]], "bind_input_handler() (netsquid.components.component.port method)": [[12, "netsquid.components.component.Port.bind_input_handler"]], "bind_output_handler() (netsquid.components.component.port method)": [[12, "netsquid.components.component.Port.bind_output_handler"]], "component (netsquid.components.component.port attribute)": [[12, "netsquid.components.component.Port.component"]], "connect() (netsquid.components.component.port method)": [[12, "netsquid.components.component.Port.connect"]], "connected_port (netsquid.components.component.port attribute)": [[12, "netsquid.components.component.Port.connected_port"]], "discard_qubits() (netsquid.components.component.message method)": [[12, "netsquid.components.component.Message.discard_qubits"]], "disconnect() (netsquid.components.component.port method)": [[12, "netsquid.components.component.Port.disconnect"]], "forward_input() (netsquid.components.component.port method)": [[12, "netsquid.components.component.Port.forward_input"]], "forward_output() (netsquid.components.component.port method)": [[12, "netsquid.components.component.Port.forward_output"]], "forwarded_ports (netsquid.components.component.port attribute)": [[12, "netsquid.components.component.Port.forwarded_ports"]], "has_subcomponent() (netsquid.components.component.component method)": [[12, "netsquid.components.component.Component.has_subcomponent"]], "has_supercomponent() (netsquid.components.component.component method)": [[12, "netsquid.components.component.Component.has_supercomponent"]], "input_queue (netsquid.components.component.port attribute)": [[12, "netsquid.components.component.Port.input_queue"]], "is_connected (netsquid.components.component.port attribute)": [[12, "netsquid.components.component.Port.is_connected"]], "items (netsquid.components.component.message attribute)": [[12, "netsquid.components.component.Message.items"]], "meta (netsquid.components.component.message attribute)": [[12, "netsquid.components.component.Message.meta"]], "models (netsquid.components.component.component attribute)": [[12, "netsquid.components.component.Component.models"]], "name (netsquid.components.component.component attribute)": [[12, "netsquid.components.component.Component.name"]], "name (netsquid.components.component.port attribute)": [[12, "netsquid.components.component.Port.name"]], "netsquid.components.component": [[12, "module-netsquid.components.component"]], "notify_all_input (netsquid.components.component.port attribute)": [[12, "netsquid.components.component.Port.notify_all_input"]], "notify_all_output (netsquid.components.component.port attribute)": [[12, "netsquid.components.component.Port.notify_all_output"]], "notify_next_input (netsquid.components.component.port attribute)": [[12, "netsquid.components.component.Port.notify_next_input"]], "notify_next_output (netsquid.components.component.port attribute)": [[12, "netsquid.components.component.Port.notify_next_output"]], "output_queue (netsquid.components.component.port attribute)": [[12, "netsquid.components.component.Port.output_queue"]], "ports (netsquid.components.component.component attribute)": [[12, "netsquid.components.component.Component.ports"]], "properties (netsquid.components.component.component attribute)": [[12, "netsquid.components.component.Component.properties"]], "query_meta_input() (netsquid.components.component.port method)": [[12, "netsquid.components.component.Port.query_meta_input"]], "query_meta_output() (netsquid.components.component.port method)": [[12, "netsquid.components.component.Port.query_meta_output"]], "rem_subcomponent() (netsquid.components.component.component method)": [[12, "netsquid.components.component.Component.rem_subcomponent"]], "remove() (netsquid.components.component.component method)": [[12, "netsquid.components.component.Component.remove"]], "remove() (netsquid.components.component.port method)": [[12, "netsquid.components.component.Port.remove"]], "reset() (netsquid.components.component.component method)": [[12, "netsquid.components.component.Component.reset"]], "reset() (netsquid.components.component.port method)": [[12, "netsquid.components.component.Port.reset"]], "rx_input() (netsquid.components.component.port method)": [[12, "netsquid.components.component.Port.rx_input"]], "rx_output() (netsquid.components.component.port method)": [[12, "netsquid.components.component.Port.rx_output"]], "specify_model() (netsquid.components.component.component method)": [[12, "netsquid.components.component.Component.specify_model"]], "subcomponents (netsquid.components.component.component attribute)": [[12, "netsquid.components.component.Component.subcomponents"]], "supercomponent (netsquid.components.component.component attribute)": [[12, "netsquid.components.component.Component.supercomponent"]], "tx_input() (netsquid.components.component.port method)": [[12, "netsquid.components.component.Port.tx_input"]], "tx_output() (netsquid.components.component.port method)": [[12, "netsquid.components.component.Port.tx_output"]], "uid (netsquid.components.component.component attribute)": [[12, "netsquid.components.component.Component.uid"]], "uid (netsquid.components.component.port attribute)": [[12, "netsquid.components.component.Port.uid"]], "with_traceback() (netsquid.components.component.componenterror method)": [[12, "netsquid.components.component.ComponentError.with_traceback"]], "with_traceback() (netsquid.components.component.componenthierarchyerror method)": [[12, "netsquid.components.component.ComponentHierarchyError.with_traceback"]], "with_traceback() (netsquid.components.component.portbinderror method)": [[12, "netsquid.components.component.PortBindError.with_traceback"]], "with_traceback() (netsquid.components.component.portconnecterror method)": [[12, "netsquid.components.component.PortConnectError.with_traceback"]], "with_traceback() (netsquid.components.component.porterror method)": [[12, "netsquid.components.component.PortError.with_traceback"]], "with_traceback() (netsquid.components.component.portforwarderror method)": [[12, "netsquid.components.component.PortForwardError.with_traceback"]], "combinedchannel (class in netsquid.components.cqchannel)": [[13, "netsquid.components.cqchannel.CombinedChannel"]], "add_ports() (netsquid.components.cqchannel.combinedchannel method)": [[13, "netsquid.components.cqchannel.CombinedChannel.add_ports"]], "add_property() (netsquid.components.cqchannel.combinedchannel method)": [[13, "netsquid.components.cqchannel.CombinedChannel.add_property"]], "add_subcomponent() (netsquid.components.cqchannel.combinedchannel method)": [[13, "netsquid.components.cqchannel.CombinedChannel.add_subcomponent"]], "classical_code (netsquid.components.cqchannel.combinedchannel property)": [[13, "netsquid.components.cqchannel.CombinedChannel.classical_code"]], "compute_delay() (netsquid.components.cqchannel.combinedchannel method)": [[13, "netsquid.components.cqchannel.CombinedChannel.compute_delay"]], "delay_mean (netsquid.components.cqchannel.combinedchannel attribute)": [[13, "netsquid.components.cqchannel.CombinedChannel.delay_mean"]], "delay_std (netsquid.components.cqchannel.combinedchannel attribute)": [[13, "netsquid.components.cqchannel.CombinedChannel.delay_std"]], "has_subcomponent() (netsquid.components.cqchannel.combinedchannel method)": [[13, "netsquid.components.cqchannel.CombinedChannel.has_subcomponent"]], "has_supercomponent() (netsquid.components.cqchannel.combinedchannel method)": [[13, "netsquid.components.cqchannel.CombinedChannel.has_supercomponent"]], "last_rx_time (netsquid.components.cqchannel.combinedchannel attribute)": [[13, "netsquid.components.cqchannel.CombinedChannel.last_rx_time"]], "models (netsquid.components.cqchannel.combinedchannel attribute)": [[13, "netsquid.components.cqchannel.CombinedChannel.models"]], "name (netsquid.components.cqchannel.combinedchannel attribute)": [[13, "netsquid.components.cqchannel.CombinedChannel.name"]], "netsquid.components.cqchannel": [[13, "module-netsquid.components.cqchannel"]], "output_empty (netsquid.components.cqchannel.combinedchannel attribute)": [[13, "netsquid.components.cqchannel.CombinedChannel.output_empty"]], "peek() (netsquid.components.cqchannel.combinedchannel method)": [[13, "netsquid.components.cqchannel.CombinedChannel.peek"]], "ports (netsquid.components.cqchannel.combinedchannel attribute)": [[13, "netsquid.components.cqchannel.CombinedChannel.ports"]], "postprocess_outputs() (netsquid.components.cqchannel.combinedchannel method)": [[13, "netsquid.components.cqchannel.CombinedChannel.postprocess_outputs"]], "preprocess_inputs() (netsquid.components.cqchannel.combinedchannel method)": [[13, "netsquid.components.cqchannel.CombinedChannel.preprocess_inputs"]], "properties (netsquid.components.cqchannel.combinedchannel attribute)": [[13, "netsquid.components.cqchannel.CombinedChannel.properties"]], "receive() (netsquid.components.cqchannel.combinedchannel method)": [[13, "netsquid.components.cqchannel.CombinedChannel.receive"]], "rem_subcomponent() (netsquid.components.cqchannel.combinedchannel method)": [[13, "netsquid.components.cqchannel.CombinedChannel.rem_subcomponent"]], "remove() (netsquid.components.cqchannel.combinedchannel method)": [[13, "netsquid.components.cqchannel.CombinedChannel.remove"]], "reset() (netsquid.components.cqchannel.combinedchannel method)": [[13, "netsquid.components.cqchannel.CombinedChannel.reset"]], "send() (netsquid.components.cqchannel.combinedchannel method)": [[13, "netsquid.components.cqchannel.CombinedChannel.send"]], "specify_model() (netsquid.components.cqchannel.combinedchannel method)": [[13, "netsquid.components.cqchannel.CombinedChannel.specify_model"]], "subcomponents (netsquid.components.cqchannel.combinedchannel attribute)": [[13, "netsquid.components.cqchannel.CombinedChannel.subcomponents"]], "supercomponent (netsquid.components.cqchannel.combinedchannel attribute)": [[13, "netsquid.components.cqchannel.CombinedChannel.supercomponent"]], "transmit_empty_items (netsquid.components.cqchannel.combinedchannel attribute)": [[13, "netsquid.components.cqchannel.CombinedChannel.transmit_empty_items"]], "transmitting (netsquid.components.cqchannel.combinedchannel attribute)": [[13, "netsquid.components.cqchannel.CombinedChannel.transmitting"]], "uid (netsquid.components.cqchannel.combinedchannel attribute)": [[13, "netsquid.components.cqchannel.CombinedChannel.uid"]], "use_classical_code (netsquid.components.cqchannel.combinedchannel property)": [[13, "netsquid.components.cqchannel.CombinedChannel.use_classical_code"]], "icontrolleddirectiongate (class in netsquid.components.instructions)": [[14, "netsquid.components.instructions.IControlledDirectionGate"]], "iemit (class in netsquid.components.instructions)": [[14, "netsquid.components.instructions.IEmit"]], "igate (class in netsquid.components.instructions)": [[14, "netsquid.components.instructions.IGate"]], "iinit (class in netsquid.components.instructions)": [[14, "netsquid.components.instructions.IInit"]], "imeasure (class in netsquid.components.instructions)": [[14, "netsquid.components.instructions.IMeasure"]], "imeasurebell (class in netsquid.components.instructions)": [[14, "netsquid.components.instructions.IMeasureBell"]], "imeasurefaulty (class in netsquid.components.instructions)": [[14, "netsquid.components.instructions.IMeasureFaulty"]], "instr_ccx (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_CCX"]], "instr_cdir (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_CDIR"]], "instr_cnot (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_CNOT"]], "instr_crot (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_CROT"]], "instr_crot_x (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_CROT_X"]], "instr_crot_y (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_CROT_Y"]], "instr_crot_z (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_CROT_Z"]], "instr_cs (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_CS"]], "instr_cx (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_CX"]], "instr_cxdir (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_CXDIR"]], "instr_cydir (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_CYDIR"]], "instr_cz (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_CZ"]], "instr_czdir (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_CZDIR"]], "instr_discard (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_DISCARD"]], "instr_emit (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_EMIT"]], "instr_h (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_H"]], "instr_i (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_I"]], "instr_init (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_INIT"]], "instr_measure (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_MEASURE"]], "instr_measure_bell (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_MEASURE_BELL"]], "instr_measure_x (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_MEASURE_X"]], "instr_rot (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_ROT"]], "instr_rot_x (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_ROT_X"]], "instr_rot_y (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_ROT_Y"]], "instr_rot_z (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_ROT_Z"]], "instr_s (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_S"]], "instr_signal (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_SIGNAL"]], "instr_swap (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_SWAP"]], "instr_t (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_T"]], "instr_toffoli (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_TOFFOLI"]], "instr_unitary (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_UNITARY"]], "instr_x (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_X"]], "instr_y (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_Y"]], "instr_z (in module netsquid.components.instructions)": [[14, "netsquid.components.instructions.INSTR_Z"]], "irotationgate (class in netsquid.components.instructions)": [[14, "netsquid.components.instructions.IRotationGate"]], "isignal (class in netsquid.components.instructions)": [[14, "netsquid.components.instructions.ISignal"]], "iswap (class in netsquid.components.instructions)": [[14, "netsquid.components.instructions.ISwap"]], "instruction (class in netsquid.components.instructions)": [[14, "netsquid.components.instructions.Instruction"]], "instructionerror": [[14, "netsquid.components.instructions.InstructionError"]], "execute() (netsquid.components.instructions.icontrolleddirectiongate method)": [[14, "netsquid.components.instructions.IControlledDirectionGate.execute"]], "execute() (netsquid.components.instructions.iemit method)": [[14, "netsquid.components.instructions.IEmit.execute"]], "execute() (netsquid.components.instructions.igate method)": [[14, "netsquid.components.instructions.IGate.execute"]], "execute() (netsquid.components.instructions.iinit method)": [[14, "netsquid.components.instructions.IInit.execute"]], "execute() (netsquid.components.instructions.imeasure method)": [[14, "netsquid.components.instructions.IMeasure.execute"]], "execute() (netsquid.components.instructions.imeasurebell method)": [[14, "netsquid.components.instructions.IMeasureBell.execute"]], "execute() (netsquid.components.instructions.imeasurefaulty method)": [[14, "netsquid.components.instructions.IMeasureFaulty.execute"]], "execute() (netsquid.components.instructions.irotationgate method)": [[14, "netsquid.components.instructions.IRotationGate.execute"]], "execute() (netsquid.components.instructions.isignal method)": [[14, "netsquid.components.instructions.ISignal.execute"]], "execute() (netsquid.components.instructions.iswap method)": [[14, "netsquid.components.instructions.ISwap.execute"]], "execute() (netsquid.components.instructions.instruction method)": [[14, "netsquid.components.instructions.Instruction.execute"]], "name (netsquid.components.instructions.icontrolleddirectiongate property)": [[14, "netsquid.components.instructions.IControlledDirectionGate.name"]], "name (netsquid.components.instructions.iemit property)": [[14, "netsquid.components.instructions.IEmit.name"]], "name (netsquid.components.instructions.igate property)": [[14, "netsquid.components.instructions.IGate.name"]], "name (netsquid.components.instructions.iinit property)": [[14, "netsquid.components.instructions.IInit.name"]], "name (netsquid.components.instructions.imeasure property)": [[14, "netsquid.components.instructions.IMeasure.name"]], "name (netsquid.components.instructions.imeasurebell property)": [[14, "netsquid.components.instructions.IMeasureBell.name"]], "name (netsquid.components.instructions.imeasurefaulty property)": [[14, "netsquid.components.instructions.IMeasureFaulty.name"]], "name (netsquid.components.instructions.irotationgate property)": [[14, "netsquid.components.instructions.IRotationGate.name"]], "name (netsquid.components.instructions.isignal property)": [[14, "netsquid.components.instructions.ISignal.name"]], "name (netsquid.components.instructions.iswap property)": [[14, "netsquid.components.instructions.ISwap.name"]], "name (netsquid.components.instructions.instruction property)": [[14, "netsquid.components.instructions.Instruction.name"]], "netsquid.components.instructions": [[14, "module-netsquid.components.instructions"]], "num_positions (netsquid.components.instructions.icontrolleddirectiongate property)": [[14, "netsquid.components.instructions.IControlledDirectionGate.num_positions"]], "num_positions (netsquid.components.instructions.iemit property)": [[14, "netsquid.components.instructions.IEmit.num_positions"]], "num_positions (netsquid.components.instructions.igate property)": [[14, "netsquid.components.instructions.IGate.num_positions"]], "num_positions (netsquid.components.instructions.iinit property)": [[14, "netsquid.components.instructions.IInit.num_positions"]], "num_positions (netsquid.components.instructions.imeasure property)": [[14, "netsquid.components.instructions.IMeasure.num_positions"]], "num_positions (netsquid.components.instructions.imeasurebell property)": [[14, "netsquid.components.instructions.IMeasureBell.num_positions"]], "num_positions (netsquid.components.instructions.imeasurefaulty property)": [[14, "netsquid.components.instructions.IMeasureFaulty.num_positions"]], "num_positions (netsquid.components.instructions.irotationgate property)": [[14, "netsquid.components.instructions.IRotationGate.num_positions"]], "num_positions (netsquid.components.instructions.isignal property)": [[14, "netsquid.components.instructions.ISignal.num_positions"]], "num_positions (netsquid.components.instructions.iswap property)": [[14, "netsquid.components.instructions.ISwap.num_positions"]], "num_positions (netsquid.components.instructions.instruction property)": [[14, "netsquid.components.instructions.Instruction.num_positions"]], "with_traceback() (netsquid.components.instructions.instructionerror method)": [[14, "netsquid.components.instructions.InstructionError.with_traceback"]], "quantumchannel (class in netsquid.components.qchannel)": [[15, "netsquid.components.qchannel.QuantumChannel"]], "add_ports() (netsquid.components.qchannel.quantumchannel method)": [[15, "netsquid.components.qchannel.QuantumChannel.add_ports"]], "add_property() (netsquid.components.qchannel.quantumchannel method)": [[15, "netsquid.components.qchannel.QuantumChannel.add_property"]], "add_subcomponent() (netsquid.components.qchannel.quantumchannel method)": [[15, "netsquid.components.qchannel.QuantumChannel.add_subcomponent"]], "compute_delay() (netsquid.components.qchannel.quantumchannel method)": [[15, "netsquid.components.qchannel.QuantumChannel.compute_delay"]], "delay_mean (netsquid.components.qchannel.quantumchannel attribute)": [[15, "netsquid.components.qchannel.QuantumChannel.delay_mean"]], "delay_std (netsquid.components.qchannel.quantumchannel attribute)": [[15, "netsquid.components.qchannel.QuantumChannel.delay_std"]], "has_subcomponent() (netsquid.components.qchannel.quantumchannel method)": [[15, "netsquid.components.qchannel.QuantumChannel.has_subcomponent"]], "has_supercomponent() (netsquid.components.qchannel.quantumchannel method)": [[15, "netsquid.components.qchannel.QuantumChannel.has_supercomponent"]], "last_rx_time (netsquid.components.qchannel.quantumchannel attribute)": [[15, "netsquid.components.qchannel.QuantumChannel.last_rx_time"]], "models (netsquid.components.qchannel.quantumchannel attribute)": [[15, "netsquid.components.qchannel.QuantumChannel.models"]], "name (netsquid.components.qchannel.quantumchannel attribute)": [[15, "netsquid.components.qchannel.QuantumChannel.name"]], "netsquid.components.qchannel": [[15, "module-netsquid.components.qchannel"]], "output_empty (netsquid.components.qchannel.quantumchannel attribute)": [[15, "netsquid.components.qchannel.QuantumChannel.output_empty"]], "peek() (netsquid.components.qchannel.quantumchannel method)": [[15, "netsquid.components.qchannel.QuantumChannel.peek"]], "ports (netsquid.components.qchannel.quantumchannel attribute)": [[15, "netsquid.components.qchannel.QuantumChannel.ports"]], "postprocess_outputs() (netsquid.components.qchannel.quantumchannel method)": [[15, "netsquid.components.qchannel.QuantumChannel.postprocess_outputs"]], "preprocess_inputs() (netsquid.components.qchannel.quantumchannel method)": [[15, "netsquid.components.qchannel.QuantumChannel.preprocess_inputs"]], "properties (netsquid.components.qchannel.quantumchannel attribute)": [[15, "netsquid.components.qchannel.QuantumChannel.properties"]], "receive() (netsquid.components.qchannel.quantumchannel method)": [[15, "netsquid.components.qchannel.QuantumChannel.receive"]], "rem_subcomponent() (netsquid.components.qchannel.quantumchannel method)": [[15, "netsquid.components.qchannel.QuantumChannel.rem_subcomponent"]], "remove() (netsquid.components.qchannel.quantumchannel method)": [[15, "netsquid.components.qchannel.QuantumChannel.remove"]], "reset() (netsquid.components.qchannel.quantumchannel method)": [[15, "netsquid.components.qchannel.QuantumChannel.reset"]], "send() (netsquid.components.qchannel.quantumchannel method)": [[15, "netsquid.components.qchannel.QuantumChannel.send"]], "specify_model() (netsquid.components.qchannel.quantumchannel method)": [[15, "netsquid.components.qchannel.QuantumChannel.specify_model"]], "subcomponents (netsquid.components.qchannel.quantumchannel attribute)": [[15, "netsquid.components.qchannel.QuantumChannel.subcomponents"]], "supercomponent (netsquid.components.qchannel.quantumchannel attribute)": [[15, "netsquid.components.qchannel.QuantumChannel.supercomponent"]], "transmit_empty_items (netsquid.components.qchannel.quantumchannel attribute)": [[15, "netsquid.components.qchannel.QuantumChannel.transmit_empty_items"]], "transmitting (netsquid.components.qchannel.quantumchannel attribute)": [[15, "netsquid.components.qchannel.QuantumChannel.transmitting"]], "uid (netsquid.components.qchannel.quantumchannel attribute)": [[15, "netsquid.components.qchannel.QuantumChannel.uid"]], "gatedquantumdetector (class in netsquid.components.qdetector)": [[16, "netsquid.components.qdetector.GatedQuantumDetector"]], "quantumdetector (class in netsquid.components.qdetector)": [[16, "netsquid.components.qdetector.QuantumDetector"]], "quantumdetectorerror": [[16, "netsquid.components.qdetector.QuantumDetectorError"]], "add_ports() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.add_ports"]], "add_ports() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.add_ports"]], "add_property() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.add_property"]], "add_property() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.add_property"]], "add_subcomponent() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.add_subcomponent"]], "add_subcomponent() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.add_subcomponent"]], "finish() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.finish"]], "finish() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.finish"]], "has_subcomponent() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.has_subcomponent"]], "has_subcomponent() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.has_subcomponent"]], "has_supercomponent() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.has_supercomponent"]], "has_supercomponent() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.has_supercomponent"]], "in_dead_time (netsquid.components.qdetector.gatedquantumdetector attribute)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.in_dead_time"]], "in_dead_time (netsquid.components.qdetector.quantumdetector attribute)": [[16, "netsquid.components.qdetector.QuantumDetector.in_dead_time"]], "inform() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.inform"]], "inform() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.inform"]], "input_port_names (netsquid.components.qdetector.gatedquantumdetector attribute)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.input_port_names"]], "input_port_names (netsquid.components.qdetector.quantumdetector attribute)": [[16, "netsquid.components.qdetector.QuantumDetector.input_port_names"]], "is_triggered (netsquid.components.qdetector.gatedquantumdetector attribute)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.is_triggered"]], "is_triggered (netsquid.components.qdetector.quantumdetector attribute)": [[16, "netsquid.components.qdetector.QuantumDetector.is_triggered"]], "measure() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.measure"]], "measure() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.measure"]], "models (netsquid.components.qdetector.gatedquantumdetector attribute)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.models"]], "models (netsquid.components.qdetector.quantumdetector attribute)": [[16, "netsquid.components.qdetector.QuantumDetector.models"]], "name (netsquid.components.qdetector.gatedquantumdetector attribute)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.name"]], "name (netsquid.components.qdetector.quantumdetector attribute)": [[16, "netsquid.components.qdetector.QuantumDetector.name"]], "netsquid.components.qdetector": [[16, "module-netsquid.components.qdetector"]], "output_port_names (netsquid.components.qdetector.gatedquantumdetector attribute)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.output_port_names"]], "output_port_names (netsquid.components.qdetector.quantumdetector attribute)": [[16, "netsquid.components.qdetector.QuantumDetector.output_port_names"]], "ports (netsquid.components.qdetector.gatedquantumdetector attribute)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.ports"]], "ports (netsquid.components.qdetector.quantumdetector attribute)": [[16, "netsquid.components.qdetector.QuantumDetector.ports"]], "postprocess_outputs() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.postprocess_outputs"]], "postprocess_outputs() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.postprocess_outputs"]], "preprocess_inputs() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.preprocess_inputs"]], "preprocess_inputs() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.preprocess_inputs"]], "properties (netsquid.components.qdetector.gatedquantumdetector attribute)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.properties"]], "properties (netsquid.components.qdetector.quantumdetector attribute)": [[16, "netsquid.components.qdetector.QuantumDetector.properties"]], "rem_subcomponent() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.rem_subcomponent"]], "rem_subcomponent() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.rem_subcomponent"]], "remove() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.remove"]], "remove() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.remove"]], "reset() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.reset"]], "reset() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.reset"]], "set_input_models() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.set_input_models"]], "set_input_models() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.set_input_models"]], "set_output_models() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.set_output_models"]], "set_output_models() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.set_output_models"]], "specify_model() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.specify_model"]], "specify_model() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.specify_model"]], "subcomponents (netsquid.components.qdetector.gatedquantumdetector attribute)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.subcomponents"]], "subcomponents (netsquid.components.qdetector.quantumdetector attribute)": [[16, "netsquid.components.qdetector.QuantumDetector.subcomponents"]], "supercomponent (netsquid.components.qdetector.gatedquantumdetector attribute)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.supercomponent"]], "supercomponent (netsquid.components.qdetector.quantumdetector attribute)": [[16, "netsquid.components.qdetector.QuantumDetector.supercomponent"]], "trigger() (netsquid.components.qdetector.gatedquantumdetector method)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.trigger"]], "trigger() (netsquid.components.qdetector.quantumdetector method)": [[16, "netsquid.components.qdetector.QuantumDetector.trigger"]], "uid (netsquid.components.qdetector.gatedquantumdetector attribute)": [[16, "netsquid.components.qdetector.GatedQuantumDetector.uid"]], "uid (netsquid.components.qdetector.quantumdetector attribute)": [[16, "netsquid.components.qdetector.QuantumDetector.uid"]], "with_traceback() (netsquid.components.qdetector.quantumdetectorerror method)": [[16, "netsquid.components.qdetector.QuantumDetectorError.with_traceback"]], "mempositionbusyerror": [[17, "netsquid.components.qmemory.MemPositionBusyError"]], "mempositionemptyerror": [[17, "netsquid.components.qmemory.MemPositionEmptyError"]], "mempositioninuseerror": [[17, "netsquid.components.qmemory.MemPositionInUseError"]], "memoryposition (class in netsquid.components.qmemory)": [[17, "netsquid.components.qmemory.MemoryPosition"]], "quantummemory (class in netsquid.components.qmemory)": [[17, "netsquid.components.qmemory.QuantumMemory"]], "quantummemoryerror": [[17, "netsquid.components.qmemory.QuantumMemoryError"]], "add_ports() (netsquid.components.qmemory.memoryposition method)": [[17, "netsquid.components.qmemory.MemoryPosition.add_ports"]], "add_ports() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.add_ports"]], "add_property() (netsquid.components.qmemory.memoryposition method)": [[17, "netsquid.components.qmemory.MemoryPosition.add_property"]], "add_property() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.add_property"]], "add_subcomponent() (netsquid.components.qmemory.memoryposition method)": [[17, "netsquid.components.qmemory.MemoryPosition.add_subcomponent"]], "add_subcomponent() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.add_subcomponent"]], "busy (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.busy"]], "busy_event_enabled (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.busy_event_enabled"]], "delta_time() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.delta_time"]], "discard() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.discard"]], "evtype_busy_toggled (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.evtype_busy_toggled"]], "evtype_in_use_toggled (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.evtype_in_use_toggled"]], "get_matching_positions() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.get_matching_positions"]], "get_matching_qubits() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.get_matching_qubits"]], "get_position_empty() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.get_position_empty"]], "get_position_used() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.get_position_used"]], "get_qubit() (netsquid.components.qmemory.memoryposition method)": [[17, "netsquid.components.qmemory.MemoryPosition.get_qubit"]], "has_subcomponent() (netsquid.components.qmemory.memoryposition method)": [[17, "netsquid.components.qmemory.MemoryPosition.has_subcomponent"]], "has_subcomponent() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.has_subcomponent"]], "has_supercomponent() (netsquid.components.qmemory.memoryposition method)": [[17, "netsquid.components.qmemory.MemoryPosition.has_supercomponent"]], "has_supercomponent() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.has_supercomponent"]], "in_use (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.in_use"]], "in_use_event_enabled (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.in_use_event_enabled"]], "is_empty (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.is_empty"]], "measure() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.measure"]], "measure_faulty() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.measure_faulty"]], "mem_positions (netsquid.components.qmemory.quantummemory attribute)": [[17, "netsquid.components.qmemory.QuantumMemory.mem_positions"]], "meta (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.meta"]], "models (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.models"]], "models (netsquid.components.qmemory.quantummemory attribute)": [[17, "netsquid.components.qmemory.QuantumMemory.models"]], "name (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.name"]], "name (netsquid.components.qmemory.quantummemory attribute)": [[17, "netsquid.components.qmemory.QuantumMemory.name"]], "netsquid.components.qmemory": [[17, "module-netsquid.components.qmemory"]], "num_positions (netsquid.components.qmemory.quantummemory attribute)": [[17, "netsquid.components.qmemory.QuantumMemory.num_positions"]], "operate() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.operate"]], "peek() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.peek"]], "pop() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.pop"]], "ports (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.ports"]], "ports (netsquid.components.qmemory.quantummemory attribute)": [[17, "netsquid.components.qmemory.QuantumMemory.ports"]], "properties (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.properties"]], "properties (netsquid.components.qmemory.quantummemory attribute)": [[17, "netsquid.components.qmemory.QuantumMemory.properties"]], "put() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.put"]], "rem_subcomponent() (netsquid.components.qmemory.memoryposition method)": [[17, "netsquid.components.qmemory.MemoryPosition.rem_subcomponent"]], "rem_subcomponent() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.rem_subcomponent"]], "remove() (netsquid.components.qmemory.memoryposition method)": [[17, "netsquid.components.qmemory.MemoryPosition.remove"]], "remove() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.remove"]], "reset() (netsquid.components.qmemory.memoryposition method)": [[17, "netsquid.components.qmemory.MemoryPosition.reset"]], "reset() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.reset"]], "send_signal() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.send_signal"]], "set_position_used() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.set_position_used"]], "set_qubit() (netsquid.components.qmemory.memoryposition method)": [[17, "netsquid.components.qmemory.MemoryPosition.set_qubit"]], "signal() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.signal"]], "specify_model() (netsquid.components.qmemory.memoryposition method)": [[17, "netsquid.components.qmemory.MemoryPosition.specify_model"]], "specify_model() (netsquid.components.qmemory.quantummemory method)": [[17, "netsquid.components.qmemory.QuantumMemory.specify_model"]], "subcomponents (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.subcomponents"]], "subcomponents (netsquid.components.qmemory.quantummemory attribute)": [[17, "netsquid.components.qmemory.QuantumMemory.subcomponents"]], "supercomponent (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.supercomponent"]], "supercomponent (netsquid.components.qmemory.quantummemory attribute)": [[17, "netsquid.components.qmemory.QuantumMemory.supercomponent"]], "time_last_access (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.time_last_access"]], "uid (netsquid.components.qmemory.memoryposition attribute)": [[17, "netsquid.components.qmemory.MemoryPosition.uid"]], "uid (netsquid.components.qmemory.quantummemory attribute)": [[17, "netsquid.components.qmemory.QuantumMemory.uid"]], "unused_positions (netsquid.components.qmemory.quantummemory attribute)": [[17, "netsquid.components.qmemory.QuantumMemory.unused_positions"]], "used_positions (netsquid.components.qmemory.quantummemory attribute)": [[17, "netsquid.components.qmemory.QuantumMemory.used_positions"]], "with_traceback() (netsquid.components.qmemory.mempositionbusyerror method)": [[17, "netsquid.components.qmemory.MemPositionBusyError.with_traceback"]], "with_traceback() (netsquid.components.qmemory.mempositionemptyerror method)": [[17, "netsquid.components.qmemory.MemPositionEmptyError.with_traceback"]], "with_traceback() (netsquid.components.qmemory.mempositioninuseerror method)": [[17, "netsquid.components.qmemory.MemPositionInUseError.with_traceback"]], "with_traceback() (netsquid.components.qmemory.quantummemoryerror method)": [[17, "netsquid.components.qmemory.QuantumMemoryError.with_traceback"]], "failed (netsquid.components.qprocessor.processorstatus attribute)": [[18, "netsquid.components.qprocessor.ProcessorStatus.FAILED"]], "idle (netsquid.components.qprocessor.processorstatus attribute)": [[18, "netsquid.components.qprocessor.ProcessorStatus.IDLE"]], "missinginstructionerror": [[18, "netsquid.components.qprocessor.MissingInstructionError"]], "paused (netsquid.components.qprocessor.processorstatus attribute)": [[18, "netsquid.components.qprocessor.ProcessorStatus.PAUSED"]], "physicalindex (class in netsquid.components.qprocessor)": [[18, "netsquid.components.qprocessor.PhysicalIndex"]], "physicalinstruction (class in netsquid.components.qprocessor)": [[18, "netsquid.components.qprocessor.PhysicalInstruction"]], "processorbusyerror": [[18, "netsquid.components.qprocessor.ProcessorBusyError"]], "processorerror": [[18, "netsquid.components.qprocessor.ProcessorError"]], "processorstatus (class in netsquid.components.qprocessor)": [[18, "netsquid.components.qprocessor.ProcessorStatus"]], "programmappingerror": [[18, "netsquid.components.qprocessor.ProgramMappingError"]], "quantumprocessor (class in netsquid.components.qprocessor)": [[18, "netsquid.components.qprocessor.QuantumProcessor"]], "running (netsquid.components.qprocessor.processorstatus attribute)": [[18, "netsquid.components.qprocessor.ProcessorStatus.RUNNING"]], "active_instructions() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.active_instructions"]], "add_composite_instruction() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.add_composite_instruction"]], "add_instruction() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.add_instruction"]], "add_physical_instruction() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.add_physical_instruction"]], "add_ports() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.add_ports"]], "add_property() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.add_property"]], "add_subcomponent() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.add_subcomponent"]], "apply_q_noise() (netsquid.components.qprocessor.physicalinstruction method)": [[18, "netsquid.components.qprocessor.PhysicalInstruction.apply_q_noise"]], "apply_q_noise_after (netsquid.components.qprocessor.physicalinstruction attribute)": [[18, "netsquid.components.qprocessor.PhysicalInstruction.apply_q_noise_after"]], "busy (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.busy"]], "classical_noise_model (netsquid.components.qprocessor.physicalinstruction attribute)": [[18, "netsquid.components.qprocessor.PhysicalInstruction.classical_noise_model"]], "delta_time() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.delta_time"]], "discard() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.discard"]], "duration (netsquid.components.qprocessor.physicalinstruction attribute)": [[18, "netsquid.components.qprocessor.PhysicalInstruction.duration"]], "error_on_program_fail (netsquid.components.qprocessor.netsquid.components.qprocessor attribute)": [[18, "netsquid.components.qprocessor.netsquid.components.qprocessor.error_on_program_fail"]], "evtype_program_done (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.evtype_program_done"]], "evtype_program_fail (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.evtype_program_fail"]], "execute_instruction() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.execute_instruction"]], "execute_program() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.execute_program"]], "fail_exception (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.fail_exception"]], "fallback_to_nonphysical (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.fallback_to_nonphysical"]], "get_composite_instruction_decomposition() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.get_composite_instruction_decomposition"]], "get_composite_instructions() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.get_composite_instructions"]], "get_finished_instrs() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.get_finished_instrs"]], "get_instruction_duration() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.get_instruction_duration"]], "get_matching_positions() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.get_matching_positions"]], "get_matching_qubits() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.get_matching_qubits"]], "get_physical_instructions() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.get_physical_instructions"]], "get_position_empty() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.get_position_empty"]], "get_position_used() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.get_position_used"]], "get_program_duration() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.get_program_duration"]], "has_subcomponent() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.has_subcomponent"]], "has_supercomponent() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.has_supercomponent"]], "instr_params (netsquid.components.qprocessor.physicalinstruction attribute)": [[18, "netsquid.components.qprocessor.PhysicalInstruction.instr_params"]], "instruction (netsquid.components.qprocessor.physicalinstruction attribute)": [[18, "netsquid.components.qprocessor.PhysicalInstruction.instruction"]], "measure() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.measure"]], "measure_faulty() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.measure_faulty"]], "mem_positions (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.mem_positions"]], "models (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.models"]], "name (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.name"]], "netsquid.components.qprocessor": [[18, "module-netsquid.components.qprocessor"]], "num_positions (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.num_positions"]], "nv_super_instructions (netsquid.components.qprocessor.netsquid.components.qprocessor attribute)": [[18, "netsquid.components.qprocessor.netsquid.components.qprocessor.nv_super_instructions"]], "operate() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.operate"]], "parallel (netsquid.components.qprocessor.physicalinstruction attribute)": [[18, "netsquid.components.qprocessor.PhysicalInstruction.parallel"]], "peek() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.peek"]], "pop() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.pop"]], "ports (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.ports"]], "program_mapping() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.program_mapping"]], "properties (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.properties"]], "put() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.put"]], "quantum_noise_model (netsquid.components.qprocessor.physicalinstruction attribute)": [[18, "netsquid.components.qprocessor.PhysicalInstruction.quantum_noise_model"]], "rem_subcomponent() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.rem_subcomponent"]], "remove() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.remove"]], "reset() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.reset"]], "send_signal() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.send_signal"]], "sequence_end_time (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.sequence_end_time"]], "set_position_used() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.set_position_used"]], "set_program_done_callback() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.set_program_done_callback"]], "set_program_fail_callback() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.set_program_fail_callback"]], "signal() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.signal"]], "specify_model() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.specify_model"]], "status (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.status"]], "stop_program() (netsquid.components.qprocessor.quantumprocessor method)": [[18, "netsquid.components.qprocessor.QuantumProcessor.stop_program"]], "subcomponents (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.subcomponents"]], "supercomponent (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.supercomponent"]], "topology (netsquid.components.qprocessor.physicalinstruction attribute)": [[18, "netsquid.components.qprocessor.PhysicalInstruction.topology"]], "uid (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.uid"]], "unused_positions (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.unused_positions"]], "used_positions (netsquid.components.qprocessor.quantumprocessor attribute)": [[18, "netsquid.components.qprocessor.QuantumProcessor.used_positions"]], "with_traceback() (netsquid.components.qprocessor.missinginstructionerror method)": [[18, "netsquid.components.qprocessor.MissingInstructionError.with_traceback"]], "with_traceback() (netsquid.components.qprocessor.processorbusyerror method)": [[18, "netsquid.components.qprocessor.ProcessorBusyError.with_traceback"]], "with_traceback() (netsquid.components.qprocessor.processorerror method)": [[18, "netsquid.components.qprocessor.ProcessorError.with_traceback"]], "with_traceback() (netsquid.components.qprocessor.programmappingerror method)": [[18, "netsquid.components.qprocessor.ProgramMappingError.with_traceback"]], "quantumprogram (class in netsquid.components.qprogram)": [[19, "netsquid.components.qprogram.QuantumProgram"]], "quantumprogramerror": [[19, "netsquid.components.qprogram.QuantumProgramError"]], "apply() (netsquid.components.qprogram.quantumprogram method)": [[19, "netsquid.components.qprogram.QuantumProgram.apply"]], "default_num_qubits (netsquid.components.qprogram.quantumprogram attribute)": [[19, "netsquid.components.qprogram.QuantumProgram.default_num_qubits"]], "get_qubit_indices() (netsquid.components.qprogram.quantumprogram method)": [[19, "netsquid.components.qprogram.QuantumProgram.get_qubit_indices"]], "load() (netsquid.components.qprogram.quantumprogram method)": [[19, "netsquid.components.qprogram.QuantumProgram.load"]], "netsquid.components.qprogram": [[19, "module-netsquid.components.qprogram"]], "num_qubits (netsquid.components.qprogram.quantumprogram property)": [[19, "netsquid.components.qprogram.QuantumProgram.num_qubits"]], "output (netsquid.components.qprogram.quantumprogram attribute)": [[19, "netsquid.components.qprogram.QuantumProgram.output"]], "parallel (netsquid.components.qprogram.quantumprogram attribute)": [[19, "netsquid.components.qprogram.QuantumProgram.parallel"]], "program() (netsquid.components.qprogram.quantumprogram method)": [[19, "netsquid.components.qprogram.QuantumProgram.program"]], "reset() (netsquid.components.qprogram.quantumprogram method)": [[19, "netsquid.components.qprogram.QuantumProgram.reset"]], "run() (netsquid.components.qprogram.quantumprogram method)": [[19, "netsquid.components.qprogram.QuantumProgram.run"]], "with_traceback() (netsquid.components.qprogram.quantumprogramerror method)": [[19, "netsquid.components.qprogram.QuantumProgramError.with_traceback"]], "external (netsquid.components.qsource.sourcestatus attribute)": [[20, "netsquid.components.qsource.SourceStatus.EXTERNAL"]], "internal (netsquid.components.qsource.sourcestatus attribute)": [[20, "netsquid.components.qsource.SourceStatus.INTERNAL"]], "off (netsquid.components.qsource.sourcestatus attribute)": [[20, "netsquid.components.qsource.SourceStatus.OFF"]], "qsource (class in netsquid.components.qsource)": [[20, "netsquid.components.qsource.QSource"]], "sourcestatus (class in netsquid.components.qsource)": [[20, "netsquid.components.qsource.SourceStatus"]], "add_ports() (netsquid.components.qsource.qsource method)": [[20, "netsquid.components.qsource.QSource.add_ports"]], "add_property() (netsquid.components.qsource.qsource method)": [[20, "netsquid.components.qsource.QSource.add_property"]], "add_subcomponent() (netsquid.components.qsource.qsource method)": [[20, "netsquid.components.qsource.QSource.add_subcomponent"]], "frequency (netsquid.components.qsource.qsource attribute)": [[20, "netsquid.components.qsource.QSource.frequency"]], "has_subcomponent() (netsquid.components.qsource.qsource method)": [[20, "netsquid.components.qsource.QSource.has_subcomponent"]], "has_supercomponent() (netsquid.components.qsource.qsource method)": [[20, "netsquid.components.qsource.QSource.has_supercomponent"]], "models (netsquid.components.qsource.qsource attribute)": [[20, "netsquid.components.qsource.QSource.models"]], "name (netsquid.components.qsource.qsource attribute)": [[20, "netsquid.components.qsource.QSource.name"]], "netsquid.components.qsource": [[20, "module-netsquid.components.qsource"]], "output_meta (netsquid.components.qsource.qsource attribute)": [[20, "netsquid.components.qsource.QSource.output_meta"]], "period (netsquid.components.qsource.qsource attribute)": [[20, "netsquid.components.qsource.QSource.period"]], "ports (netsquid.components.qsource.qsource attribute)": [[20, "netsquid.components.qsource.QSource.ports"]], "prep_delay (netsquid.components.qsource.qsource attribute)": [[20, "netsquid.components.qsource.QSource.prep_delay"]], "properties (netsquid.components.qsource.qsource attribute)": [[20, "netsquid.components.qsource.QSource.properties"]], "rem_subcomponent() (netsquid.components.qsource.qsource method)": [[20, "netsquid.components.qsource.QSource.rem_subcomponent"]], "remove() (netsquid.components.qsource.qsource method)": [[20, "netsquid.components.qsource.QSource.remove"]], "reset() (netsquid.components.qsource.qsource method)": [[20, "netsquid.components.qsource.QSource.reset"]], "specify_model() (netsquid.components.qsource.qsource method)": [[20, "netsquid.components.qsource.QSource.specify_model"]], "state_sampler (netsquid.components.qsource.qsource attribute)": [[20, "netsquid.components.qsource.QSource.state_sampler"]], "status (netsquid.components.qsource.qsource attribute)": [[20, "netsquid.components.qsource.QSource.status"]], "subcomponents (netsquid.components.qsource.qsource attribute)": [[20, "netsquid.components.qsource.QSource.subcomponents"]], "supercomponent (netsquid.components.qsource.qsource attribute)": [[20, "netsquid.components.qsource.QSource.supercomponent"]], "trigger() (netsquid.components.qsource.qsource method)": [[20, "netsquid.components.qsource.QSource.trigger"]], "uid (netsquid.components.qsource.qsource attribute)": [[20, "netsquid.components.qsource.QSource.uid"]], "simpleswitch (class in netsquid.components.switch)": [[21, "netsquid.components.switch.SimpleSwitch"]], "switch (class in netsquid.components.switch)": [[21, "netsquid.components.switch.Switch"]], "switcherror": [[21, "netsquid.components.switch.SwitchError"]], "add_ports() (netsquid.components.switch.simpleswitch method)": [[21, "netsquid.components.switch.SimpleSwitch.add_ports"]], "add_ports() (netsquid.components.switch.switch method)": [[21, "netsquid.components.switch.Switch.add_ports"]], "add_property() (netsquid.components.switch.simpleswitch method)": [[21, "netsquid.components.switch.SimpleSwitch.add_property"]], "add_property() (netsquid.components.switch.switch method)": [[21, "netsquid.components.switch.Switch.add_property"]], "add_subcomponent() (netsquid.components.switch.simpleswitch method)": [[21, "netsquid.components.switch.SimpleSwitch.add_subcomponent"]], "add_subcomponent() (netsquid.components.switch.switch method)": [[21, "netsquid.components.switch.Switch.add_subcomponent"]], "has_subcomponent() (netsquid.components.switch.simpleswitch method)": [[21, "netsquid.components.switch.SimpleSwitch.has_subcomponent"]], "has_subcomponent() (netsquid.components.switch.switch method)": [[21, "netsquid.components.switch.Switch.has_subcomponent"]], "has_supercomponent() (netsquid.components.switch.simpleswitch method)": [[21, "netsquid.components.switch.SimpleSwitch.has_supercomponent"]], "has_supercomponent() (netsquid.components.switch.switch method)": [[21, "netsquid.components.switch.Switch.has_supercomponent"]], "models (netsquid.components.switch.simpleswitch attribute)": [[21, "netsquid.components.switch.SimpleSwitch.models"]], "models (netsquid.components.switch.switch attribute)": [[21, "netsquid.components.switch.Switch.models"]], "name (netsquid.components.switch.simpleswitch attribute)": [[21, "netsquid.components.switch.SimpleSwitch.name"]], "name (netsquid.components.switch.switch attribute)": [[21, "netsquid.components.switch.Switch.name"]], "netsquid.components.switch": [[21, "module-netsquid.components.switch"]], "ports (netsquid.components.switch.simpleswitch attribute)": [[21, "netsquid.components.switch.SimpleSwitch.ports"]], "ports (netsquid.components.switch.switch attribute)": [[21, "netsquid.components.switch.Switch.ports"]], "properties (netsquid.components.switch.simpleswitch attribute)": [[21, "netsquid.components.switch.SimpleSwitch.properties"]], "properties (netsquid.components.switch.switch attribute)": [[21, "netsquid.components.switch.Switch.properties"]], "rem_subcomponent() (netsquid.components.switch.simpleswitch method)": [[21, "netsquid.components.switch.SimpleSwitch.rem_subcomponent"]], "rem_subcomponent() (netsquid.components.switch.switch method)": [[21, "netsquid.components.switch.Switch.rem_subcomponent"]], "remove() (netsquid.components.switch.simpleswitch method)": [[21, "netsquid.components.switch.SimpleSwitch.remove"]], "remove() (netsquid.components.switch.switch method)": [[21, "netsquid.components.switch.Switch.remove"]], "reset() (netsquid.components.switch.simpleswitch method)": [[21, "netsquid.components.switch.SimpleSwitch.reset"]], "reset() (netsquid.components.switch.switch method)": [[21, "netsquid.components.switch.Switch.reset"]], "routing_table() (netsquid.components.switch.simpleswitch method)": [[21, "netsquid.components.switch.SimpleSwitch.routing_table"]], "routing_table() (netsquid.components.switch.switch method)": [[21, "netsquid.components.switch.Switch.routing_table"]], "specify_model() (netsquid.components.switch.simpleswitch method)": [[21, "netsquid.components.switch.SimpleSwitch.specify_model"]], "specify_model() (netsquid.components.switch.switch method)": [[21, "netsquid.components.switch.Switch.specify_model"]], "subcomponents (netsquid.components.switch.simpleswitch attribute)": [[21, "netsquid.components.switch.SimpleSwitch.subcomponents"]], "subcomponents (netsquid.components.switch.switch attribute)": [[21, "netsquid.components.switch.Switch.subcomponents"]], "supercomponent (netsquid.components.switch.simpleswitch attribute)": [[21, "netsquid.components.switch.SimpleSwitch.supercomponent"]], "supercomponent (netsquid.components.switch.switch attribute)": [[21, "netsquid.components.switch.Switch.supercomponent"]], "topology (netsquid.components.switch.simpleswitch property)": [[21, "netsquid.components.switch.SimpleSwitch.topology"]], "uid (netsquid.components.switch.simpleswitch attribute)": [[21, "netsquid.components.switch.SimpleSwitch.uid"]], "uid (netsquid.components.switch.switch attribute)": [[21, "netsquid.components.switch.Switch.uid"]], "with_traceback() (netsquid.components.switch.switcherror method)": [[21, "netsquid.components.switch.SwitchError.with_traceback"]], "entanglenodes (class in netsquid.examples.entanglenodes)": [[22, "netsquid.examples.entanglenodes.EntangleNodes"]], "add_signal() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.add_signal"]], "add_subprotocol() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.add_subprotocol"]], "await_mempos_busy_toggle() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.await_mempos_busy_toggle"]], "await_mempos_in_use_toggle() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.await_mempos_in_use_toggle"]], "await_port_input() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.await_port_input"]], "await_port_output() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.await_port_output"]], "await_program() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.await_program"]], "await_signal() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.await_signal"]], "await_timer() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.await_timer"]], "can_signal_to() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.can_signal_to"]], "check_assigned() (netsquid.examples.entanglenodes.entanglenodes static method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.check_assigned"]], "example_network_setup() (in module netsquid.examples.entanglenodes)": [[22, "netsquid.examples.entanglenodes.example_network_setup"]], "get_signal_by_event() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.get_signal_by_event"]], "get_signal_result() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.get_signal_result"]], "is_connected (netsquid.examples.entanglenodes.entanglenodes property)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.is_connected"]], "is_running (netsquid.examples.entanglenodes.entanglenodes attribute)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.is_running"]], "max_nodes (netsquid.examples.entanglenodes.entanglenodes property)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.max_nodes"]], "name (netsquid.examples.entanglenodes.entanglenodes attribute)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.name"]], "netsquid.examples.entanglenodes": [[22, "module-netsquid.examples.entanglenodes"]], "node (netsquid.examples.entanglenodes.entanglenodes property)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.node"]], "nodes (netsquid.examples.entanglenodes.entanglenodes property)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.nodes"]], "remove() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.remove"]], "reset() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.reset"]], "run() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.run"]], "send_signal() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.send_signal"]], "signals (netsquid.examples.entanglenodes.entanglenodes attribute)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.signals"]], "specify_node() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.specify_node"]], "start() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.start"]], "start_subprotocols() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.start_subprotocols"]], "stop() (netsquid.examples.entanglenodes.entanglenodes method)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.stop"]], "subprotocols (netsquid.examples.entanglenodes.entanglenodes attribute)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.subprotocols"]], "uid (netsquid.examples.entanglenodes.entanglenodes attribute)": [[22, "netsquid.examples.entanglenodes.EntangleNodes.uid"]], "distil (class in netsquid.examples.purify)": [[24, "netsquid.examples.purify.Distil"]], "filter (class in netsquid.examples.purify)": [[24, "netsquid.examples.purify.Filter"]], "filteringexample (class in netsquid.examples.purify)": [[24, "netsquid.examples.purify.FilteringExample"]], "add_signal() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.add_signal"]], "add_signal() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.add_signal"]], "add_signal() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.add_signal"]], "add_subprotocol() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.add_subprotocol"]], "add_subprotocol() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.add_subprotocol"]], "add_subprotocol() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.add_subprotocol"]], "await_mempos_busy_toggle() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.await_mempos_busy_toggle"]], "await_mempos_busy_toggle() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.await_mempos_busy_toggle"]], "await_mempos_busy_toggle() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.await_mempos_busy_toggle"]], "await_mempos_in_use_toggle() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.await_mempos_in_use_toggle"]], "await_mempos_in_use_toggle() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.await_mempos_in_use_toggle"]], "await_mempos_in_use_toggle() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.await_mempos_in_use_toggle"]], "await_port_input() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.await_port_input"]], "await_port_input() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.await_port_input"]], "await_port_input() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.await_port_input"]], "await_port_output() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.await_port_output"]], "await_port_output() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.await_port_output"]], "await_port_output() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.await_port_output"]], "await_program() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.await_program"]], "await_program() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.await_program"]], "await_program() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.await_program"]], "await_signal() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.await_signal"]], "await_signal() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.await_signal"]], "await_signal() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.await_signal"]], "await_timer() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.await_timer"]], "await_timer() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.await_timer"]], "await_timer() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.await_timer"]], "can_signal_to() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.can_signal_to"]], "can_signal_to() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.can_signal_to"]], "can_signal_to() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.can_signal_to"]], "check_assigned() (netsquid.examples.purify.distil static method)": [[24, "netsquid.examples.purify.Distil.check_assigned"]], "check_assigned() (netsquid.examples.purify.filter static method)": [[24, "netsquid.examples.purify.Filter.check_assigned"]], "check_assigned() (netsquid.examples.purify.filteringexample static method)": [[24, "netsquid.examples.purify.FilteringExample.check_assigned"]], "example_network_setup() (in module netsquid.examples.purify)": [[24, "netsquid.examples.purify.example_network_setup"]], "example_sim_setup() (in module netsquid.examples.purify)": [[24, "netsquid.examples.purify.example_sim_setup"]], "get_signal_by_event() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.get_signal_by_event"]], "get_signal_by_event() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.get_signal_by_event"]], "get_signal_by_event() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.get_signal_by_event"]], "get_signal_result() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.get_signal_result"]], "get_signal_result() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.get_signal_result"]], "get_signal_result() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.get_signal_result"]], "is_connected (netsquid.examples.purify.distil property)": [[24, "netsquid.examples.purify.Distil.is_connected"]], "is_connected (netsquid.examples.purify.filter property)": [[24, "netsquid.examples.purify.Filter.is_connected"]], "is_connected (netsquid.examples.purify.filteringexample property)": [[24, "netsquid.examples.purify.FilteringExample.is_connected"]], "is_running (netsquid.examples.purify.distil attribute)": [[24, "netsquid.examples.purify.Distil.is_running"]], "is_running (netsquid.examples.purify.filter attribute)": [[24, "netsquid.examples.purify.Filter.is_running"]], "is_running (netsquid.examples.purify.filteringexample attribute)": [[24, "netsquid.examples.purify.FilteringExample.is_running"]], "max_nodes (netsquid.examples.purify.distil property)": [[24, "netsquid.examples.purify.Distil.max_nodes"]], "max_nodes (netsquid.examples.purify.filter property)": [[24, "netsquid.examples.purify.Filter.max_nodes"]], "max_nodes (netsquid.examples.purify.filteringexample property)": [[24, "netsquid.examples.purify.FilteringExample.max_nodes"]], "meas_ops (netsquid.examples.purify.filter attribute)": [[24, "netsquid.examples.purify.Filter.meas_ops"]], "name (netsquid.examples.purify.distil attribute)": [[24, "netsquid.examples.purify.Distil.name"]], "name (netsquid.examples.purify.filter attribute)": [[24, "netsquid.examples.purify.Filter.name"]], "name (netsquid.examples.purify.filteringexample attribute)": [[24, "netsquid.examples.purify.FilteringExample.name"]], "netsquid.examples.purify": [[24, "module-netsquid.examples.purify"]], "node (netsquid.examples.purify.distil property)": [[24, "netsquid.examples.purify.Distil.node"]], "node (netsquid.examples.purify.filter property)": [[24, "netsquid.examples.purify.Filter.node"]], "nodes (netsquid.examples.purify.distil property)": [[24, "netsquid.examples.purify.Distil.nodes"]], "nodes (netsquid.examples.purify.filter property)": [[24, "netsquid.examples.purify.Filter.nodes"]], "nodes (netsquid.examples.purify.filteringexample property)": [[24, "netsquid.examples.purify.FilteringExample.nodes"]], "remove() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.remove"]], "remove() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.remove"]], "remove() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.remove"]], "reset() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.reset"]], "reset() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.reset"]], "reset() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.reset"]], "results (netsquid.examples.purify.filteringexample attribute)": [[24, "netsquid.examples.purify.FilteringExample.results"]], "run() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.run"]], "run() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.run"]], "run() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.run"]], "send_signal() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.send_signal"]], "send_signal() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.send_signal"]], "send_signal() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.send_signal"]], "signals (netsquid.examples.purify.distil attribute)": [[24, "netsquid.examples.purify.Distil.signals"]], "signals (netsquid.examples.purify.filter attribute)": [[24, "netsquid.examples.purify.Filter.signals"]], "signals (netsquid.examples.purify.filteringexample attribute)": [[24, "netsquid.examples.purify.FilteringExample.signals"]], "specify_node() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.specify_node"]], "specify_node() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.specify_node"]], "specify_node() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.specify_node"]], "start() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.start"]], "start() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.start"]], "start() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.start"]], "start_subprotocols() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.start_subprotocols"]], "start_subprotocols() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.start_subprotocols"]], "start_subprotocols() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.start_subprotocols"]], "stop() (netsquid.examples.purify.distil method)": [[24, "netsquid.examples.purify.Distil.stop"]], "stop() (netsquid.examples.purify.filter method)": [[24, "netsquid.examples.purify.Filter.stop"]], "stop() (netsquid.examples.purify.filteringexample method)": [[24, "netsquid.examples.purify.FilteringExample.stop"]], "subprotocols (netsquid.examples.purify.distil attribute)": [[24, "netsquid.examples.purify.Distil.subprotocols"]], "subprotocols (netsquid.examples.purify.filter attribute)": [[24, "netsquid.examples.purify.Filter.subprotocols"]], "subprotocols (netsquid.examples.purify.filteringexample attribute)": [[24, "netsquid.examples.purify.FilteringExample.subprotocols"]], "uid (netsquid.examples.purify.distil attribute)": [[24, "netsquid.examples.purify.Distil.uid"]], "uid (netsquid.examples.purify.filter attribute)": [[24, "netsquid.examples.purify.Filter.uid"]], "uid (netsquid.examples.purify.filteringexample attribute)": [[24, "netsquid.examples.purify.FilteringExample.uid"]], "repeater (class in netsquid.examples.repeater)": [[25, "netsquid.examples.repeater.Repeater"]], "repeaterexample (class in netsquid.examples.repeater)": [[25, "netsquid.examples.repeater.RepeaterExample"]], "add_signal() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.add_signal"]], "add_signal() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.add_signal"]], "add_subprotocol() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.add_subprotocol"]], "add_subprotocol() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.add_subprotocol"]], "await_mempos_busy_toggle() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.await_mempos_busy_toggle"]], "await_mempos_busy_toggle() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.await_mempos_busy_toggle"]], "await_mempos_in_use_toggle() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.await_mempos_in_use_toggle"]], "await_mempos_in_use_toggle() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.await_mempos_in_use_toggle"]], "await_port_input() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.await_port_input"]], "await_port_input() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.await_port_input"]], "await_port_output() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.await_port_output"]], "await_port_output() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.await_port_output"]], "await_program() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.await_program"]], "await_program() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.await_program"]], "await_signal() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.await_signal"]], "await_signal() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.await_signal"]], "await_timer() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.await_timer"]], "await_timer() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.await_timer"]], "can_signal_to() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.can_signal_to"]], "can_signal_to() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.can_signal_to"]], "check_assigned() (netsquid.examples.repeater.repeater static method)": [[25, "netsquid.examples.repeater.Repeater.check_assigned"]], "check_assigned() (netsquid.examples.repeater.repeaterexample static method)": [[25, "netsquid.examples.repeater.RepeaterExample.check_assigned"]], "example_network_setup() (in module netsquid.examples.repeater)": [[25, "netsquid.examples.repeater.example_network_setup"]], "example_sim_setup() (in module netsquid.examples.repeater)": [[25, "netsquid.examples.repeater.example_sim_setup"]], "get_signal_by_event() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.get_signal_by_event"]], "get_signal_by_event() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.get_signal_by_event"]], "get_signal_result() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.get_signal_result"]], "get_signal_result() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.get_signal_result"]], "is_connected (netsquid.examples.repeater.repeater property)": [[25, "netsquid.examples.repeater.Repeater.is_connected"]], "is_connected (netsquid.examples.repeater.repeaterexample property)": [[25, "netsquid.examples.repeater.RepeaterExample.is_connected"]], "is_running (netsquid.examples.repeater.repeater attribute)": [[25, "netsquid.examples.repeater.Repeater.is_running"]], "is_running (netsquid.examples.repeater.repeaterexample attribute)": [[25, "netsquid.examples.repeater.RepeaterExample.is_running"]], "max_nodes (netsquid.examples.repeater.repeater property)": [[25, "netsquid.examples.repeater.Repeater.max_nodes"]], "max_nodes (netsquid.examples.repeater.repeaterexample property)": [[25, "netsquid.examples.repeater.RepeaterExample.max_nodes"]], "name (netsquid.examples.repeater.repeater attribute)": [[25, "netsquid.examples.repeater.Repeater.name"]], "name (netsquid.examples.repeater.repeaterexample attribute)": [[25, "netsquid.examples.repeater.RepeaterExample.name"]], "netsquid.examples.repeater": [[25, "module-netsquid.examples.repeater"]], "node (netsquid.examples.repeater.repeater property)": [[25, "netsquid.examples.repeater.Repeater.node"]], "nodes (netsquid.examples.repeater.repeater property)": [[25, "netsquid.examples.repeater.Repeater.nodes"]], "nodes (netsquid.examples.repeater.repeaterexample property)": [[25, "netsquid.examples.repeater.RepeaterExample.nodes"]], "remove() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.remove"]], "remove() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.remove"]], "reset() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.reset"]], "reset() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.reset"]], "run() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.run"]], "run() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.run"]], "send_signal() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.send_signal"]], "send_signal() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.send_signal"]], "signals (netsquid.examples.repeater.repeater attribute)": [[25, "netsquid.examples.repeater.Repeater.signals"]], "signals (netsquid.examples.repeater.repeaterexample attribute)": [[25, "netsquid.examples.repeater.RepeaterExample.signals"]], "specify_node() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.specify_node"]], "specify_node() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.specify_node"]], "start() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.start"]], "start() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.start"]], "start_subprotocols() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.start_subprotocols"]], "start_subprotocols() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.start_subprotocols"]], "stop() (netsquid.examples.repeater.repeater method)": [[25, "netsquid.examples.repeater.Repeater.stop"]], "stop() (netsquid.examples.repeater.repeaterexample method)": [[25, "netsquid.examples.repeater.RepeaterExample.stop"]], "subprotocols (netsquid.examples.repeater.repeater attribute)": [[25, "netsquid.examples.repeater.Repeater.subprotocols"]], "subprotocols (netsquid.examples.repeater.repeaterexample attribute)": [[25, "netsquid.examples.repeater.RepeaterExample.subprotocols"]], "uid (netsquid.examples.repeater.repeater attribute)": [[25, "netsquid.examples.repeater.Repeater.uid"]], "uid (netsquid.examples.repeater.repeaterexample attribute)": [[25, "netsquid.examples.repeater.RepeaterExample.uid"]], "correctprotocol (class in netsquid.examples.repeater_chain)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol"]], "fibredepolarizemodel (class in netsquid.examples.repeater_chain)": [[26, "netsquid.examples.repeater_chain.FibreDepolarizeModel"]], "swapcorrectprogram (class in netsquid.examples.repeater_chain)": [[26, "netsquid.examples.repeater_chain.SwapCorrectProgram"]], "swapprotocol (class in netsquid.examples.repeater_chain)": [[26, "netsquid.examples.repeater_chain.SwapProtocol"]], "add_property() (netsquid.examples.repeater_chain.fibredepolarizemodel method)": [[26, "netsquid.examples.repeater_chain.FibreDepolarizeModel.add_property"]], "add_signal() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.add_signal"]], "add_signal() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.add_signal"]], "add_subprotocol() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.add_subprotocol"]], "add_subprotocol() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.add_subprotocol"]], "apply() (netsquid.examples.repeater_chain.swapcorrectprogram method)": [[26, "netsquid.examples.repeater_chain.SwapCorrectProgram.apply"]], "await_mempos_busy_toggle() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.await_mempos_busy_toggle"]], "await_mempos_busy_toggle() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.await_mempos_busy_toggle"]], "await_mempos_in_use_toggle() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.await_mempos_in_use_toggle"]], "await_mempos_in_use_toggle() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.await_mempos_in_use_toggle"]], "await_port_input() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.await_port_input"]], "await_port_input() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.await_port_input"]], "await_port_output() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.await_port_output"]], "await_port_output() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.await_port_output"]], "await_program() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.await_program"]], "await_program() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.await_program"]], "await_signal() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.await_signal"]], "await_signal() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.await_signal"]], "await_timer() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.await_timer"]], "await_timer() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.await_timer"]], "can_signal_to() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.can_signal_to"]], "can_signal_to() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.can_signal_to"]], "check_assigned() (netsquid.examples.repeater_chain.correctprotocol static method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.check_assigned"]], "check_assigned() (netsquid.examples.repeater_chain.swapprotocol static method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.check_assigned"]], "compute_model() (netsquid.examples.repeater_chain.fibredepolarizemodel method)": [[26, "netsquid.examples.repeater_chain.FibreDepolarizeModel.compute_model"]], "concatenation_class() (netsquid.examples.repeater_chain.fibredepolarizemodel class method)": [[26, "netsquid.examples.repeater_chain.FibreDepolarizeModel.concatenation_class"]], "create_plot() (in module netsquid.examples.repeater_chain)": [[26, "netsquid.examples.repeater_chain.create_plot"]], "create_qprocessor() (in module netsquid.examples.repeater_chain)": [[26, "netsquid.examples.repeater_chain.create_qprocessor"]], "default_num_qubits (netsquid.examples.repeater_chain.swapcorrectprogram attribute)": [[26, "netsquid.examples.repeater_chain.SwapCorrectProgram.default_num_qubits"]], "error_operation() (netsquid.examples.repeater_chain.fibredepolarizemodel method)": [[26, "netsquid.examples.repeater_chain.FibreDepolarizeModel.error_operation"]], "get_qubit_indices() (netsquid.examples.repeater_chain.swapcorrectprogram method)": [[26, "netsquid.examples.repeater_chain.SwapCorrectProgram.get_qubit_indices"]], "get_signal_by_event() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.get_signal_by_event"]], "get_signal_by_event() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.get_signal_by_event"]], "get_signal_result() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.get_signal_result"]], "get_signal_result() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.get_signal_result"]], "is_concatenated (netsquid.examples.repeater_chain.fibredepolarizemodel property)": [[26, "netsquid.examples.repeater_chain.FibreDepolarizeModel.is_concatenated"]], "is_connected (netsquid.examples.repeater_chain.correctprotocol property)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.is_connected"]], "is_connected (netsquid.examples.repeater_chain.swapprotocol property)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.is_connected"]], "is_running (netsquid.examples.repeater_chain.correctprotocol attribute)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.is_running"]], "is_running (netsquid.examples.repeater_chain.swapprotocol attribute)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.is_running"]], "load() (netsquid.examples.repeater_chain.swapcorrectprogram method)": [[26, "netsquid.examples.repeater_chain.SwapCorrectProgram.load"]], "lose_qubit() (netsquid.examples.repeater_chain.fibredepolarizemodel static method)": [[26, "netsquid.examples.repeater_chain.FibreDepolarizeModel.lose_qubit"]], "max_nodes (netsquid.examples.repeater_chain.correctprotocol property)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.max_nodes"]], "max_nodes (netsquid.examples.repeater_chain.swapprotocol property)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.max_nodes"]], "name (netsquid.examples.repeater_chain.correctprotocol attribute)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.name"]], "name (netsquid.examples.repeater_chain.swapprotocol attribute)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.name"]], "netsquid.examples.repeater_chain": [[26, "module-netsquid.examples.repeater_chain"]], "node (netsquid.examples.repeater_chain.correctprotocol property)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.node"]], "node (netsquid.examples.repeater_chain.swapprotocol property)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.node"]], "nodes (netsquid.examples.repeater_chain.correctprotocol property)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.nodes"]], "nodes (netsquid.examples.repeater_chain.swapprotocol property)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.nodes"]], "num_qubits (netsquid.examples.repeater_chain.swapcorrectprogram property)": [[26, "netsquid.examples.repeater_chain.SwapCorrectProgram.num_qubits"]], "program() (netsquid.examples.repeater_chain.swapcorrectprogram method)": [[26, "netsquid.examples.repeater_chain.SwapCorrectProgram.program"]], "properties (netsquid.examples.repeater_chain.fibredepolarizemodel property)": [[26, "netsquid.examples.repeater_chain.FibreDepolarizeModel.properties"]], "remove() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.remove"]], "remove() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.remove"]], "required_properties (netsquid.examples.repeater_chain.fibredepolarizemodel property)": [[26, "netsquid.examples.repeater_chain.FibreDepolarizeModel.required_properties"]], "reset() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.reset"]], "reset() (netsquid.examples.repeater_chain.swapcorrectprogram method)": [[26, "netsquid.examples.repeater_chain.SwapCorrectProgram.reset"]], "reset() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.reset"]], "run() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.run"]], "run() (netsquid.examples.repeater_chain.swapcorrectprogram method)": [[26, "netsquid.examples.repeater_chain.SwapCorrectProgram.run"]], "run() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.run"]], "run_simulation() (in module netsquid.examples.repeater_chain)": [[26, "netsquid.examples.repeater_chain.run_simulation"]], "send_signal() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.send_signal"]], "send_signal() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.send_signal"]], "setup_datacollector() (in module netsquid.examples.repeater_chain)": [[26, "netsquid.examples.repeater_chain.setup_datacollector"]], "setup_network() (in module netsquid.examples.repeater_chain)": [[26, "netsquid.examples.repeater_chain.setup_network"]], "setup_repeater_protocol() (in module netsquid.examples.repeater_chain)": [[26, "netsquid.examples.repeater_chain.setup_repeater_protocol"]], "signals (netsquid.examples.repeater_chain.correctprotocol attribute)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.signals"]], "signals (netsquid.examples.repeater_chain.swapprotocol attribute)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.signals"]], "specify_node() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.specify_node"]], "specify_node() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.specify_node"]], "start() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.start"]], "start() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.start"]], "start_subprotocols() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.start_subprotocols"]], "start_subprotocols() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.start_subprotocols"]], "stop() (netsquid.examples.repeater_chain.correctprotocol method)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.stop"]], "stop() (netsquid.examples.repeater_chain.swapprotocol method)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.stop"]], "subprotocols (netsquid.examples.repeater_chain.correctprotocol attribute)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.subprotocols"]], "subprotocols (netsquid.examples.repeater_chain.swapprotocol attribute)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.subprotocols"]], "uid (netsquid.examples.repeater_chain.correctprotocol attribute)": [[26, "netsquid.examples.repeater_chain.CorrectProtocol.uid"]], "uid (netsquid.examples.repeater_chain.swapprotocol attribute)": [[26, "netsquid.examples.repeater_chain.SwapProtocol.uid"]], "validate() (netsquid.examples.repeater_chain.fibredepolarizemodel method)": [[26, "netsquid.examples.repeater_chain.FibreDepolarizeModel.validate"]], "bellmeasurementprogram (class in netsquid.examples.teleportation)": [[28, "netsquid.examples.teleportation.BellMeasurementProgram"]], "bellmeasurementprotocol (class in netsquid.examples.teleportation)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol"]], "classicalconnection (class in netsquid.examples.teleportation)": [[28, "netsquid.examples.teleportation.ClassicalConnection"]], "correctionprotocol (class in netsquid.examples.teleportation)": [[28, "netsquid.examples.teleportation.CorrectionProtocol"]], "entanglingconnection (class in netsquid.examples.teleportation)": [[28, "netsquid.examples.teleportation.EntanglingConnection"]], "initstateprogram (class in netsquid.examples.teleportation)": [[28, "netsquid.examples.teleportation.InitStateProgram"]], "add_ports() (netsquid.examples.teleportation.classicalconnection method)": [[28, "netsquid.examples.teleportation.ClassicalConnection.add_ports"]], "add_ports() (netsquid.examples.teleportation.entanglingconnection method)": [[28, "netsquid.examples.teleportation.EntanglingConnection.add_ports"]], "add_property() (netsquid.examples.teleportation.classicalconnection method)": [[28, "netsquid.examples.teleportation.ClassicalConnection.add_property"]], "add_property() (netsquid.examples.teleportation.entanglingconnection method)": [[28, "netsquid.examples.teleportation.EntanglingConnection.add_property"]], "add_signal() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.add_signal"]], "add_signal() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.add_signal"]], "add_subcomponent() (netsquid.examples.teleportation.classicalconnection method)": [[28, "netsquid.examples.teleportation.ClassicalConnection.add_subcomponent"]], "add_subcomponent() (netsquid.examples.teleportation.entanglingconnection method)": [[28, "netsquid.examples.teleportation.EntanglingConnection.add_subcomponent"]], "add_subprotocol() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.add_subprotocol"]], "add_subprotocol() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.add_subprotocol"]], "apply() (netsquid.examples.teleportation.bellmeasurementprogram method)": [[28, "netsquid.examples.teleportation.BellMeasurementProgram.apply"]], "apply() (netsquid.examples.teleportation.initstateprogram method)": [[28, "netsquid.examples.teleportation.InitStateProgram.apply"]], "await_mempos_busy_toggle() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.await_mempos_busy_toggle"]], "await_mempos_busy_toggle() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.await_mempos_busy_toggle"]], "await_mempos_in_use_toggle() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.await_mempos_in_use_toggle"]], "await_mempos_in_use_toggle() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.await_mempos_in_use_toggle"]], "await_port_input() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.await_port_input"]], "await_port_input() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.await_port_input"]], "await_port_output() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.await_port_output"]], "await_port_output() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.await_port_output"]], "await_program() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.await_program"]], "await_program() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.await_program"]], "await_signal() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.await_signal"]], "await_signal() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.await_signal"]], "await_timer() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.await_timer"]], "await_timer() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.await_timer"]], "can_signal_to() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.can_signal_to"]], "can_signal_to() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.can_signal_to"]], "check_assigned() (netsquid.examples.teleportation.bellmeasurementprotocol static method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.check_assigned"]], "check_assigned() (netsquid.examples.teleportation.correctionprotocol static method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.check_assigned"]], "create_plot() (in module netsquid.examples.teleportation)": [[28, "netsquid.examples.teleportation.create_plot"]], "create_processor() (in module netsquid.examples.teleportation)": [[28, "netsquid.examples.teleportation.create_processor"]], "default_num_qubits (netsquid.examples.teleportation.bellmeasurementprogram attribute)": [[28, "netsquid.examples.teleportation.BellMeasurementProgram.default_num_qubits"]], "default_num_qubits (netsquid.examples.teleportation.initstateprogram attribute)": [[28, "netsquid.examples.teleportation.InitStateProgram.default_num_qubits"]], "example_network_setup() (in module netsquid.examples.teleportation)": [[28, "netsquid.examples.teleportation.example_network_setup"]], "example_sim_setup() (in module netsquid.examples.teleportation)": [[28, "netsquid.examples.teleportation.example_sim_setup"]], "get_qubit_indices() (netsquid.examples.teleportation.bellmeasurementprogram method)": [[28, "netsquid.examples.teleportation.BellMeasurementProgram.get_qubit_indices"]], "get_qubit_indices() (netsquid.examples.teleportation.initstateprogram method)": [[28, "netsquid.examples.teleportation.InitStateProgram.get_qubit_indices"]], "get_signal_by_event() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.get_signal_by_event"]], "get_signal_by_event() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.get_signal_by_event"]], "get_signal_result() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.get_signal_result"]], "get_signal_result() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.get_signal_result"]], "has_subcomponent() (netsquid.examples.teleportation.classicalconnection method)": [[28, "netsquid.examples.teleportation.ClassicalConnection.has_subcomponent"]], "has_subcomponent() (netsquid.examples.teleportation.entanglingconnection method)": [[28, "netsquid.examples.teleportation.EntanglingConnection.has_subcomponent"]], "has_supercomponent() (netsquid.examples.teleportation.classicalconnection method)": [[28, "netsquid.examples.teleportation.ClassicalConnection.has_supercomponent"]], "has_supercomponent() (netsquid.examples.teleportation.entanglingconnection method)": [[28, "netsquid.examples.teleportation.EntanglingConnection.has_supercomponent"]], "is_connected (netsquid.examples.teleportation.bellmeasurementprotocol property)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.is_connected"]], "is_connected (netsquid.examples.teleportation.correctionprotocol property)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.is_connected"]], "is_running (netsquid.examples.teleportation.bellmeasurementprotocol attribute)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.is_running"]], "is_running (netsquid.examples.teleportation.correctionprotocol attribute)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.is_running"]], "load() (netsquid.examples.teleportation.bellmeasurementprogram method)": [[28, "netsquid.examples.teleportation.BellMeasurementProgram.load"]], "load() (netsquid.examples.teleportation.initstateprogram method)": [[28, "netsquid.examples.teleportation.InitStateProgram.load"]], "max_nodes (netsquid.examples.teleportation.bellmeasurementprotocol property)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.max_nodes"]], "max_nodes (netsquid.examples.teleportation.correctionprotocol property)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.max_nodes"]], "models (netsquid.examples.teleportation.classicalconnection attribute)": [[28, "netsquid.examples.teleportation.ClassicalConnection.models"]], "models (netsquid.examples.teleportation.entanglingconnection attribute)": [[28, "netsquid.examples.teleportation.EntanglingConnection.models"]], "name (netsquid.examples.teleportation.bellmeasurementprotocol attribute)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.name"]], "name (netsquid.examples.teleportation.classicalconnection attribute)": [[28, "netsquid.examples.teleportation.ClassicalConnection.name"]], "name (netsquid.examples.teleportation.correctionprotocol attribute)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.name"]], "name (netsquid.examples.teleportation.entanglingconnection attribute)": [[28, "netsquid.examples.teleportation.EntanglingConnection.name"]], "netsquid.examples.teleportation": [[28, "module-netsquid.examples.teleportation"]], "node (netsquid.examples.teleportation.bellmeasurementprotocol property)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.node"]], "node (netsquid.examples.teleportation.correctionprotocol property)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.node"]], "nodes (netsquid.examples.teleportation.bellmeasurementprotocol property)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.nodes"]], "nodes (netsquid.examples.teleportation.correctionprotocol property)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.nodes"]], "num_qubits (netsquid.examples.teleportation.bellmeasurementprogram property)": [[28, "netsquid.examples.teleportation.BellMeasurementProgram.num_qubits"]], "num_qubits (netsquid.examples.teleportation.initstateprogram property)": [[28, "netsquid.examples.teleportation.InitStateProgram.num_qubits"]], "port_a (netsquid.examples.teleportation.classicalconnection property)": [[28, "netsquid.examples.teleportation.ClassicalConnection.port_A"]], "port_a (netsquid.examples.teleportation.entanglingconnection property)": [[28, "netsquid.examples.teleportation.EntanglingConnection.port_A"]], "port_b (netsquid.examples.teleportation.classicalconnection property)": [[28, "netsquid.examples.teleportation.ClassicalConnection.port_B"]], "port_b (netsquid.examples.teleportation.entanglingconnection property)": [[28, "netsquid.examples.teleportation.EntanglingConnection.port_B"]], "ports (netsquid.examples.teleportation.classicalconnection attribute)": [[28, "netsquid.examples.teleportation.ClassicalConnection.ports"]], "ports (netsquid.examples.teleportation.entanglingconnection attribute)": [[28, "netsquid.examples.teleportation.EntanglingConnection.ports"]], "program() (netsquid.examples.teleportation.bellmeasurementprogram method)": [[28, "netsquid.examples.teleportation.BellMeasurementProgram.program"]], "program() (netsquid.examples.teleportation.initstateprogram method)": [[28, "netsquid.examples.teleportation.InitStateProgram.program"]], "properties (netsquid.examples.teleportation.classicalconnection attribute)": [[28, "netsquid.examples.teleportation.ClassicalConnection.properties"]], "properties (netsquid.examples.teleportation.entanglingconnection attribute)": [[28, "netsquid.examples.teleportation.EntanglingConnection.properties"]], "rem_subcomponent() (netsquid.examples.teleportation.classicalconnection method)": [[28, "netsquid.examples.teleportation.ClassicalConnection.rem_subcomponent"]], "rem_subcomponent() (netsquid.examples.teleportation.entanglingconnection method)": [[28, "netsquid.examples.teleportation.EntanglingConnection.rem_subcomponent"]], "remove() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.remove"]], "remove() (netsquid.examples.teleportation.classicalconnection method)": [[28, "netsquid.examples.teleportation.ClassicalConnection.remove"]], "remove() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.remove"]], "remove() (netsquid.examples.teleportation.entanglingconnection method)": [[28, "netsquid.examples.teleportation.EntanglingConnection.remove"]], "reset() (netsquid.examples.teleportation.bellmeasurementprogram method)": [[28, "netsquid.examples.teleportation.BellMeasurementProgram.reset"]], "reset() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.reset"]], "reset() (netsquid.examples.teleportation.classicalconnection method)": [[28, "netsquid.examples.teleportation.ClassicalConnection.reset"]], "reset() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.reset"]], "reset() (netsquid.examples.teleportation.entanglingconnection method)": [[28, "netsquid.examples.teleportation.EntanglingConnection.reset"]], "reset() (netsquid.examples.teleportation.initstateprogram method)": [[28, "netsquid.examples.teleportation.InitStateProgram.reset"]], "run() (netsquid.examples.teleportation.bellmeasurementprogram method)": [[28, "netsquid.examples.teleportation.BellMeasurementProgram.run"]], "run() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.run"]], "run() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.run"]], "run() (netsquid.examples.teleportation.initstateprogram method)": [[28, "netsquid.examples.teleportation.InitStateProgram.run"]], "run_experiment() (in module netsquid.examples.teleportation)": [[28, "netsquid.examples.teleportation.run_experiment"]], "send_signal() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.send_signal"]], "send_signal() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.send_signal"]], "signals (netsquid.examples.teleportation.bellmeasurementprotocol attribute)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.signals"]], "signals (netsquid.examples.teleportation.correctionprotocol attribute)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.signals"]], "specify_model() (netsquid.examples.teleportation.classicalconnection method)": [[28, "netsquid.examples.teleportation.ClassicalConnection.specify_model"]], "specify_model() (netsquid.examples.teleportation.entanglingconnection method)": [[28, "netsquid.examples.teleportation.EntanglingConnection.specify_model"]], "specify_node() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.specify_node"]], "specify_node() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.specify_node"]], "start() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.start"]], "start() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.start"]], "start_subprotocols() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.start_subprotocols"]], "start_subprotocols() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.start_subprotocols"]], "stop() (netsquid.examples.teleportation.bellmeasurementprotocol method)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.stop"]], "stop() (netsquid.examples.teleportation.correctionprotocol method)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.stop"]], "subcomponents (netsquid.examples.teleportation.classicalconnection attribute)": [[28, "netsquid.examples.teleportation.ClassicalConnection.subcomponents"]], "subcomponents (netsquid.examples.teleportation.entanglingconnection attribute)": [[28, "netsquid.examples.teleportation.EntanglingConnection.subcomponents"]], "subprotocols (netsquid.examples.teleportation.bellmeasurementprotocol attribute)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.subprotocols"]], "subprotocols (netsquid.examples.teleportation.correctionprotocol attribute)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.subprotocols"]], "supercomponent (netsquid.examples.teleportation.classicalconnection attribute)": [[28, "netsquid.examples.teleportation.ClassicalConnection.supercomponent"]], "supercomponent (netsquid.examples.teleportation.entanglingconnection attribute)": [[28, "netsquid.examples.teleportation.EntanglingConnection.supercomponent"]], "uid (netsquid.examples.teleportation.bellmeasurementprotocol attribute)": [[28, "netsquid.examples.teleportation.BellMeasurementProtocol.uid"]], "uid (netsquid.examples.teleportation.classicalconnection attribute)": [[28, "netsquid.examples.teleportation.ClassicalConnection.uid"]], "uid (netsquid.examples.teleportation.correctionprotocol attribute)": [[28, "netsquid.examples.teleportation.CorrectionProtocol.uid"]], "uid (netsquid.examples.teleportation.entanglingconnection attribute)": [[28, "netsquid.examples.teleportation.EntanglingConnection.uid"]], "classicalerrormodel (class in netsquid.components.models.cerrormodels)": [[29, "netsquid.components.models.cerrormodels.ClassicalErrorModel"]], "add_property() (netsquid.components.models.cerrormodels.classicalerrormodel method)": [[29, "netsquid.components.models.cerrormodels.ClassicalErrorModel.add_property"]], "compute_model() (netsquid.components.models.cerrormodels.classicalerrormodel method)": [[29, "netsquid.components.models.cerrormodels.ClassicalErrorModel.compute_model"]], "concatenation_class() (netsquid.components.models.cerrormodels.classicalerrormodel class method)": [[29, "netsquid.components.models.cerrormodels.ClassicalErrorModel.concatenation_class"]], "error_operation() (netsquid.components.models.cerrormodels.classicalerrormodel method)": [[29, "netsquid.components.models.cerrormodels.ClassicalErrorModel.error_operation"]], "is_concatenated (netsquid.components.models.cerrormodels.classicalerrormodel property)": [[29, "netsquid.components.models.cerrormodels.ClassicalErrorModel.is_concatenated"]], "netsquid.components.models.cerrormodels": [[29, "module-netsquid.components.models.cerrormodels"]], "properties (netsquid.components.models.cerrormodels.classicalerrormodel property)": [[29, "netsquid.components.models.cerrormodels.ClassicalErrorModel.properties"]], "required_properties (netsquid.components.models.cerrormodels.classicalerrormodel property)": [[29, "netsquid.components.models.cerrormodels.ClassicalErrorModel.required_properties"]], "validate() (netsquid.components.models.cerrormodels.classicalerrormodel method)": [[29, "netsquid.components.models.cerrormodels.ClassicalErrorModel.validate"]], "delaymodel (class in netsquid.components.models.delaymodels)": [[30, "netsquid.components.models.delaymodels.DelayModel"]], "fibredelaymodel (class in netsquid.components.models.delaymodels)": [[30, "netsquid.components.models.delaymodels.FibreDelayModel"]], "fixeddelaymodel (class in netsquid.components.models.delaymodels)": [[30, "netsquid.components.models.delaymodels.FixedDelayModel"]], "gaussiandelaymodel (class in netsquid.components.models.delaymodels)": [[30, "netsquid.components.models.delaymodels.GaussianDelayModel"]], "add_property() (netsquid.components.models.delaymodels.delaymodel method)": [[30, "netsquid.components.models.delaymodels.DelayModel.add_property"]], "add_property() (netsquid.components.models.delaymodels.fibredelaymodel method)": [[30, "netsquid.components.models.delaymodels.FibreDelayModel.add_property"]], "add_property() (netsquid.components.models.delaymodels.fixeddelaymodel method)": [[30, "netsquid.components.models.delaymodels.FixedDelayModel.add_property"]], "add_property() (netsquid.components.models.delaymodels.gaussiandelaymodel method)": [[30, "netsquid.components.models.delaymodels.GaussianDelayModel.add_property"]], "c (netsquid.components.models.delaymodels.fibredelaymodel property)": [[30, "netsquid.components.models.delaymodels.FibreDelayModel.c"]], "compute_model() (netsquid.components.models.delaymodels.delaymodel method)": [[30, "netsquid.components.models.delaymodels.DelayModel.compute_model"]], "compute_model() (netsquid.components.models.delaymodels.fibredelaymodel method)": [[30, "netsquid.components.models.delaymodels.FibreDelayModel.compute_model"]], "compute_model() (netsquid.components.models.delaymodels.fixeddelaymodel method)": [[30, "netsquid.components.models.delaymodels.FixedDelayModel.compute_model"]], "compute_model() (netsquid.components.models.delaymodels.gaussiandelaymodel method)": [[30, "netsquid.components.models.delaymodels.GaussianDelayModel.compute_model"]], "concatenation_class() (netsquid.components.models.delaymodels.delaymodel class method)": [[30, "netsquid.components.models.delaymodels.DelayModel.concatenation_class"]], "concatenation_class() (netsquid.components.models.delaymodels.fibredelaymodel class method)": [[30, "netsquid.components.models.delaymodels.FibreDelayModel.concatenation_class"]], "concatenation_class() (netsquid.components.models.delaymodels.fixeddelaymodel class method)": [[30, "netsquid.components.models.delaymodels.FixedDelayModel.concatenation_class"]], "concatenation_class() (netsquid.components.models.delaymodels.gaussiandelaymodel class method)": [[30, "netsquid.components.models.delaymodels.GaussianDelayModel.concatenation_class"]], "delay (netsquid.components.models.delaymodels.fixeddelaymodel property)": [[30, "netsquid.components.models.delaymodels.FixedDelayModel.delay"]], "delay_mean (netsquid.components.models.delaymodels.gaussiandelaymodel property)": [[30, "netsquid.components.models.delaymodels.GaussianDelayModel.delay_mean"]], "delay_std (netsquid.components.models.delaymodels.gaussiandelaymodel property)": [[30, "netsquid.components.models.delaymodels.GaussianDelayModel.delay_std"]], "generate_delay() (netsquid.components.models.delaymodels.delaymodel method)": [[30, "netsquid.components.models.delaymodels.DelayModel.generate_delay"]], "generate_delay() (netsquid.components.models.delaymodels.fibredelaymodel method)": [[30, "netsquid.components.models.delaymodels.FibreDelayModel.generate_delay"]], "generate_delay() (netsquid.components.models.delaymodels.fixeddelaymodel method)": [[30, "netsquid.components.models.delaymodels.FixedDelayModel.generate_delay"]], "generate_delay() (netsquid.components.models.delaymodels.gaussiandelaymodel method)": [[30, "netsquid.components.models.delaymodels.GaussianDelayModel.generate_delay"]], "get_mean() (netsquid.components.models.delaymodels.delaymodel method)": [[30, "netsquid.components.models.delaymodels.DelayModel.get_mean"]], "get_mean() (netsquid.components.models.delaymodels.fibredelaymodel method)": [[30, "netsquid.components.models.delaymodels.FibreDelayModel.get_mean"]], "get_mean() (netsquid.components.models.delaymodels.fixeddelaymodel method)": [[30, "netsquid.components.models.delaymodels.FixedDelayModel.get_mean"]], "get_mean() (netsquid.components.models.delaymodels.gaussiandelaymodel method)": [[30, "netsquid.components.models.delaymodels.GaussianDelayModel.get_mean"]], "get_std() (netsquid.components.models.delaymodels.delaymodel method)": [[30, "netsquid.components.models.delaymodels.DelayModel.get_std"]], "get_std() (netsquid.components.models.delaymodels.fibredelaymodel method)": [[30, "netsquid.components.models.delaymodels.FibreDelayModel.get_std"]], "get_std() (netsquid.components.models.delaymodels.fixeddelaymodel method)": [[30, "netsquid.components.models.delaymodels.FixedDelayModel.get_std"]], "get_std() (netsquid.components.models.delaymodels.gaussiandelaymodel method)": [[30, "netsquid.components.models.delaymodels.GaussianDelayModel.get_std"]], "is_concatenated (netsquid.components.models.delaymodels.delaymodel property)": [[30, "netsquid.components.models.delaymodels.DelayModel.is_concatenated"]], "is_concatenated (netsquid.components.models.delaymodels.fibredelaymodel property)": [[30, "netsquid.components.models.delaymodels.FibreDelayModel.is_concatenated"]], "is_concatenated (netsquid.components.models.delaymodels.fixeddelaymodel property)": [[30, "netsquid.components.models.delaymodels.FixedDelayModel.is_concatenated"]], "is_concatenated (netsquid.components.models.delaymodels.gaussiandelaymodel property)": [[30, "netsquid.components.models.delaymodels.GaussianDelayModel.is_concatenated"]], "netsquid.components.models.delaymodels": [[30, "module-netsquid.components.models.delaymodels"]], "properties (netsquid.components.models.delaymodels.delaymodel property)": [[30, "netsquid.components.models.delaymodels.DelayModel.properties"]], "properties (netsquid.components.models.delaymodels.fibredelaymodel property)": [[30, "netsquid.components.models.delaymodels.FibreDelayModel.properties"]], "properties (netsquid.components.models.delaymodels.fixeddelaymodel property)": [[30, "netsquid.components.models.delaymodels.FixedDelayModel.properties"]], "properties (netsquid.components.models.delaymodels.gaussiandelaymodel property)": [[30, "netsquid.components.models.delaymodels.GaussianDelayModel.properties"]], "required_properties (netsquid.components.models.delaymodels.delaymodel property)": [[30, "netsquid.components.models.delaymodels.DelayModel.required_properties"]], "required_properties (netsquid.components.models.delaymodels.fibredelaymodel property)": [[30, "netsquid.components.models.delaymodels.FibreDelayModel.required_properties"]], "required_properties (netsquid.components.models.delaymodels.fixeddelaymodel property)": [[30, "netsquid.components.models.delaymodels.FixedDelayModel.required_properties"]], "required_properties (netsquid.components.models.delaymodels.gaussiandelaymodel property)": [[30, "netsquid.components.models.delaymodels.GaussianDelayModel.required_properties"]], "rng (netsquid.components.models.delaymodels.delaymodel property)": [[30, "netsquid.components.models.delaymodels.DelayModel.rng"]], "rng (netsquid.components.models.delaymodels.fibredelaymodel property)": [[30, "netsquid.components.models.delaymodels.FibreDelayModel.rng"]], "rng (netsquid.components.models.delaymodels.fixeddelaymodel property)": [[30, "netsquid.components.models.delaymodels.FixedDelayModel.rng"]], "rng (netsquid.components.models.delaymodels.gaussiandelaymodel property)": [[30, "netsquid.components.models.delaymodels.GaussianDelayModel.rng"]], "set_mean() (netsquid.components.models.delaymodels.delaymodel method)": [[30, "netsquid.components.models.delaymodels.DelayModel.set_mean"]], "set_mean() (netsquid.components.models.delaymodels.fibredelaymodel method)": [[30, "netsquid.components.models.delaymodels.FibreDelayModel.set_mean"]], "set_mean() (netsquid.components.models.delaymodels.fixeddelaymodel method)": [[30, "netsquid.components.models.delaymodels.FixedDelayModel.set_mean"]], "set_mean() (netsquid.components.models.delaymodels.gaussiandelaymodel method)": [[30, "netsquid.components.models.delaymodels.GaussianDelayModel.set_mean"]], "validate() (netsquid.components.models.delaymodels.delaymodel method)": [[30, "netsquid.components.models.delaymodels.DelayModel.validate"]], "validate() (netsquid.components.models.delaymodels.fibredelaymodel method)": [[30, "netsquid.components.models.delaymodels.FibreDelayModel.validate"]], "validate() (netsquid.components.models.delaymodels.fixeddelaymodel method)": [[30, "netsquid.components.models.delaymodels.FixedDelayModel.validate"]], "validate() (netsquid.components.models.delaymodels.gaussiandelaymodel method)": [[30, "netsquid.components.models.delaymodels.GaussianDelayModel.validate"]], "errormodel (class in netsquid.components.models.errormodels)": [[31, "netsquid.components.models.errormodels.ErrorModel"]], "add_property() (netsquid.components.models.errormodels.errormodel method)": [[31, "netsquid.components.models.errormodels.ErrorModel.add_property"]], "compute_model() (netsquid.components.models.errormodels.errormodel method)": [[31, "netsquid.components.models.errormodels.ErrorModel.compute_model"]], "concatenation_class() (netsquid.components.models.errormodels.errormodel class method)": [[31, "netsquid.components.models.errormodels.ErrorModel.concatenation_class"]], "error_operation() (netsquid.components.models.errormodels.errormodel method)": [[31, "netsquid.components.models.errormodels.ErrorModel.error_operation"]], "is_concatenated (netsquid.components.models.errormodels.errormodel property)": [[31, "netsquid.components.models.errormodels.ErrorModel.is_concatenated"]], "netsquid.components.models.errormodels": [[31, "module-netsquid.components.models.errormodels"]], "properties (netsquid.components.models.errormodels.errormodel property)": [[31, "netsquid.components.models.errormodels.ErrorModel.properties"]], "required_properties (netsquid.components.models.errormodels.errormodel property)": [[31, "netsquid.components.models.errormodels.ErrorModel.required_properties"]], "validate() (netsquid.components.models.errormodels.errormodel method)": [[31, "netsquid.components.models.errormodels.ErrorModel.validate"]], "model (class in netsquid.components.models.model)": [[32, "netsquid.components.models.model.Model"]], "modelcompositionexception": [[32, "netsquid.components.models.model.ModelCompositionException"]], "add_property() (netsquid.components.models.model.model method)": [[32, "netsquid.components.models.model.Model.add_property"]], "compute_model() (netsquid.components.models.model.model method)": [[32, "netsquid.components.models.model.Model.compute_model"]], "concatenation_class() (netsquid.components.models.model.model class method)": [[32, "netsquid.components.models.model.Model.concatenation_class"]], "is_concatenated (netsquid.components.models.model.model property)": [[32, "netsquid.components.models.model.Model.is_concatenated"]], "netsquid.components.models.model": [[32, "module-netsquid.components.models.model"]], "properties (netsquid.components.models.model.model property)": [[32, "netsquid.components.models.model.Model.properties"]], "required_properties (netsquid.components.models.model.model property)": [[32, "netsquid.components.models.model.Model.required_properties"]], "validate() (netsquid.components.models.model.model method)": [[32, "netsquid.components.models.model.Model.validate"]], "with_traceback() (netsquid.components.models.model.modelcompositionexception method)": [[32, "netsquid.components.models.model.ModelCompositionException.with_traceback"]], "dephasenoisemodel (class in netsquid.components.models.qerrormodels)": [[33, "netsquid.components.models.qerrormodels.DephaseNoiseModel"]], "depolarnoisemodel (class in netsquid.components.models.qerrormodels)": [[33, "netsquid.components.models.qerrormodels.DepolarNoiseModel"]], "fibrelossmodel (class in netsquid.components.models.qerrormodels)": [[33, "netsquid.components.models.qerrormodels.FibreLossModel"]], "quantumerrormodel (class in netsquid.components.models.qerrormodels)": [[33, "netsquid.components.models.qerrormodels.QuantumErrorModel"]], "t1 (netsquid.components.models.qerrormodels.t1t2noisemodel property)": [[33, "netsquid.components.models.qerrormodels.T1T2NoiseModel.T1"]], "t1t2noisemodel (class in netsquid.components.models.qerrormodels)": [[33, "netsquid.components.models.qerrormodels.T1T2NoiseModel"]], "t2 (netsquid.components.models.qerrormodels.t1t2noisemodel property)": [[33, "netsquid.components.models.qerrormodels.T1T2NoiseModel.T2"]], "add_property() (netsquid.components.models.qerrormodels.dephasenoisemodel method)": [[33, "netsquid.components.models.qerrormodels.DephaseNoiseModel.add_property"]], "add_property() (netsquid.components.models.qerrormodels.depolarnoisemodel method)": [[33, "netsquid.components.models.qerrormodels.DepolarNoiseModel.add_property"]], "add_property() (netsquid.components.models.qerrormodels.fibrelossmodel method)": [[33, "netsquid.components.models.qerrormodels.FibreLossModel.add_property"]], "add_property() (netsquid.components.models.qerrormodels.quantumerrormodel method)": [[33, "netsquid.components.models.qerrormodels.QuantumErrorModel.add_property"]], "add_property() (netsquid.components.models.qerrormodels.t1t2noisemodel method)": [[33, "netsquid.components.models.qerrormodels.T1T2NoiseModel.add_property"]], "apply_noise() (netsquid.components.models.qerrormodels.t1t2noisemodel method)": [[33, "netsquid.components.models.qerrormodels.T1T2NoiseModel.apply_noise"]], "compute_model() (netsquid.components.models.qerrormodels.dephasenoisemodel method)": [[33, "netsquid.components.models.qerrormodels.DephaseNoiseModel.compute_model"]], "compute_model() (netsquid.components.models.qerrormodels.depolarnoisemodel method)": [[33, "netsquid.components.models.qerrormodels.DepolarNoiseModel.compute_model"]], "compute_model() (netsquid.components.models.qerrormodels.fibrelossmodel method)": [[33, "netsquid.components.models.qerrormodels.FibreLossModel.compute_model"]], "compute_model() (netsquid.components.models.qerrormodels.quantumerrormodel method)": [[33, "netsquid.components.models.qerrormodels.QuantumErrorModel.compute_model"]], "compute_model() (netsquid.components.models.qerrormodels.t1t2noisemodel method)": [[33, "netsquid.components.models.qerrormodels.T1T2NoiseModel.compute_model"]], "concatenation_class() (netsquid.components.models.qerrormodels.dephasenoisemodel class method)": [[33, "netsquid.components.models.qerrormodels.DephaseNoiseModel.concatenation_class"]], "concatenation_class() (netsquid.components.models.qerrormodels.depolarnoisemodel class method)": [[33, "netsquid.components.models.qerrormodels.DepolarNoiseModel.concatenation_class"]], "concatenation_class() (netsquid.components.models.qerrormodels.fibrelossmodel class method)": [[33, "netsquid.components.models.qerrormodels.FibreLossModel.concatenation_class"]], "concatenation_class() (netsquid.components.models.qerrormodels.quantumerrormodel class method)": [[33, "netsquid.components.models.qerrormodels.QuantumErrorModel.concatenation_class"]], "concatenation_class() (netsquid.components.models.qerrormodels.t1t2noisemodel class method)": [[33, "netsquid.components.models.qerrormodels.T1T2NoiseModel.concatenation_class"]], "dephase_rate (netsquid.components.models.qerrormodels.dephasenoisemodel property)": [[33, "netsquid.components.models.qerrormodels.DephaseNoiseModel.dephase_rate"]], "depolar_rate (netsquid.components.models.qerrormodels.depolarnoisemodel property)": [[33, "netsquid.components.models.qerrormodels.DepolarNoiseModel.depolar_rate"]], "error_operation() (netsquid.components.models.qerrormodels.dephasenoisemodel method)": [[33, "netsquid.components.models.qerrormodels.DephaseNoiseModel.error_operation"]], "error_operation() (netsquid.components.models.qerrormodels.depolarnoisemodel method)": [[33, "netsquid.components.models.qerrormodels.DepolarNoiseModel.error_operation"]], "error_operation() (netsquid.components.models.qerrormodels.fibrelossmodel method)": [[33, "netsquid.components.models.qerrormodels.FibreLossModel.error_operation"]], "error_operation() (netsquid.components.models.qerrormodels.quantumerrormodel method)": [[33, "netsquid.components.models.qerrormodels.QuantumErrorModel.error_operation"]], "error_operation() (netsquid.components.models.qerrormodels.t1t2noisemodel method)": [[33, "netsquid.components.models.qerrormodels.T1T2NoiseModel.error_operation"]], "is_concatenated (netsquid.components.models.qerrormodels.dephasenoisemodel property)": [[33, "netsquid.components.models.qerrormodels.DephaseNoiseModel.is_concatenated"]], "is_concatenated (netsquid.components.models.qerrormodels.depolarnoisemodel property)": [[33, "netsquid.components.models.qerrormodels.DepolarNoiseModel.is_concatenated"]], "is_concatenated (netsquid.components.models.qerrormodels.fibrelossmodel property)": [[33, "netsquid.components.models.qerrormodels.FibreLossModel.is_concatenated"]], "is_concatenated (netsquid.components.models.qerrormodels.quantumerrormodel property)": [[33, "netsquid.components.models.qerrormodels.QuantumErrorModel.is_concatenated"]], "is_concatenated (netsquid.components.models.qerrormodels.t1t2noisemodel property)": [[33, "netsquid.components.models.qerrormodels.T1T2NoiseModel.is_concatenated"]], "lose_qubit() (netsquid.components.models.qerrormodels.dephasenoisemodel static method)": [[33, "netsquid.components.models.qerrormodels.DephaseNoiseModel.lose_qubit"]], "lose_qubit() (netsquid.components.models.qerrormodels.depolarnoisemodel static method)": [[33, "netsquid.components.models.qerrormodels.DepolarNoiseModel.lose_qubit"]], "lose_qubit() (netsquid.components.models.qerrormodels.fibrelossmodel static method)": [[33, "netsquid.components.models.qerrormodels.FibreLossModel.lose_qubit"]], "lose_qubit() (netsquid.components.models.qerrormodels.quantumerrormodel static method)": [[33, "netsquid.components.models.qerrormodels.QuantumErrorModel.lose_qubit"]], "lose_qubit() (netsquid.components.models.qerrormodels.t1t2noisemodel static method)": [[33, "netsquid.components.models.qerrormodels.T1T2NoiseModel.lose_qubit"]], "netsquid.components.models.qerrormodels": [[33, "module-netsquid.components.models.qerrormodels"]], "p_loss_init (netsquid.components.models.qerrormodels.fibrelossmodel property)": [[33, "netsquid.components.models.qerrormodels.FibreLossModel.p_loss_init"]], "p_loss_length (netsquid.components.models.qerrormodels.fibrelossmodel property)": [[33, "netsquid.components.models.qerrormodels.FibreLossModel.p_loss_length"]], "properties (netsquid.components.models.qerrormodels.dephasenoisemodel property)": [[33, "netsquid.components.models.qerrormodels.DephaseNoiseModel.properties"]], "properties (netsquid.components.models.qerrormodels.depolarnoisemodel property)": [[33, "netsquid.components.models.qerrormodels.DepolarNoiseModel.properties"]], "properties (netsquid.components.models.qerrormodels.fibrelossmodel property)": [[33, "netsquid.components.models.qerrormodels.FibreLossModel.properties"]], "properties (netsquid.components.models.qerrormodels.quantumerrormodel property)": [[33, "netsquid.components.models.qerrormodels.QuantumErrorModel.properties"]], "properties (netsquid.components.models.qerrormodels.t1t2noisemodel property)": [[33, "netsquid.components.models.qerrormodels.T1T2NoiseModel.properties"]], "required_properties (netsquid.components.models.qerrormodels.dephasenoisemodel property)": [[33, "netsquid.components.models.qerrormodels.DephaseNoiseModel.required_properties"]], "required_properties (netsquid.components.models.qerrormodels.depolarnoisemodel property)": [[33, "netsquid.components.models.qerrormodels.DepolarNoiseModel.required_properties"]], "required_properties (netsquid.components.models.qerrormodels.fibrelossmodel property)": [[33, "netsquid.components.models.qerrormodels.FibreLossModel.required_properties"]], "required_properties (netsquid.components.models.qerrormodels.quantumerrormodel property)": [[33, "netsquid.components.models.qerrormodels.QuantumErrorModel.required_properties"]], "required_properties (netsquid.components.models.qerrormodels.t1t2noisemodel property)": [[33, "netsquid.components.models.qerrormodels.T1T2NoiseModel.required_properties"]], "rng (netsquid.components.models.qerrormodels.fibrelossmodel property)": [[33, "netsquid.components.models.qerrormodels.FibreLossModel.rng"]], "time_independent (netsquid.components.models.qerrormodels.dephasenoisemodel property)": [[33, "netsquid.components.models.qerrormodels.DephaseNoiseModel.time_independent"]], "time_independent (netsquid.components.models.qerrormodels.depolarnoisemodel property)": [[33, "netsquid.components.models.qerrormodels.DepolarNoiseModel.time_independent"]], "validate() (netsquid.components.models.qerrormodels.dephasenoisemodel method)": [[33, "netsquid.components.models.qerrormodels.DephaseNoiseModel.validate"]], "validate() (netsquid.components.models.qerrormodels.depolarnoisemodel method)": [[33, "netsquid.components.models.qerrormodels.DepolarNoiseModel.validate"]], "validate() (netsquid.components.models.qerrormodels.fibrelossmodel method)": [[33, "netsquid.components.models.qerrormodels.FibreLossModel.validate"]], "validate() (netsquid.components.models.qerrormodels.quantumerrormodel method)": [[33, "netsquid.components.models.qerrormodels.QuantumErrorModel.validate"]], "validate() (netsquid.components.models.qerrormodels.t1t2noisemodel method)": [[33, "netsquid.components.models.qerrormodels.T1T2NoiseModel.validate"]], "connection (class in netsquid.nodes.connections)": [[34, "netsquid.nodes.connections.Connection"]], "directconnection (class in netsquid.nodes.connections)": [[34, "netsquid.nodes.connections.DirectConnection"]], "add_ports() (netsquid.nodes.connections.connection method)": [[34, "netsquid.nodes.connections.Connection.add_ports"]], "add_ports() (netsquid.nodes.connections.directconnection method)": [[34, "netsquid.nodes.connections.DirectConnection.add_ports"]], "add_property() (netsquid.nodes.connections.connection method)": [[34, "netsquid.nodes.connections.Connection.add_property"]], "add_property() (netsquid.nodes.connections.directconnection method)": [[34, "netsquid.nodes.connections.DirectConnection.add_property"]], "add_subcomponent() (netsquid.nodes.connections.connection method)": [[34, "netsquid.nodes.connections.Connection.add_subcomponent"]], "add_subcomponent() (netsquid.nodes.connections.directconnection method)": [[34, "netsquid.nodes.connections.DirectConnection.add_subcomponent"]], "channel_atob (netsquid.nodes.connections.directconnection property)": [[34, "netsquid.nodes.connections.DirectConnection.channel_AtoB"]], "channel_btoa (netsquid.nodes.connections.directconnection property)": [[34, "netsquid.nodes.connections.DirectConnection.channel_BtoA"]], "has_subcomponent() (netsquid.nodes.connections.connection method)": [[34, "netsquid.nodes.connections.Connection.has_subcomponent"]], "has_subcomponent() (netsquid.nodes.connections.directconnection method)": [[34, "netsquid.nodes.connections.DirectConnection.has_subcomponent"]], "has_supercomponent() (netsquid.nodes.connections.connection method)": [[34, "netsquid.nodes.connections.Connection.has_supercomponent"]], "has_supercomponent() (netsquid.nodes.connections.directconnection method)": [[34, "netsquid.nodes.connections.DirectConnection.has_supercomponent"]], "models (netsquid.nodes.connections.connection attribute)": [[34, "netsquid.nodes.connections.Connection.models"]], "models (netsquid.nodes.connections.directconnection attribute)": [[34, "netsquid.nodes.connections.DirectConnection.models"]], "name (netsquid.nodes.connections.connection attribute)": [[34, "netsquid.nodes.connections.Connection.name"]], "name (netsquid.nodes.connections.directconnection attribute)": [[34, "netsquid.nodes.connections.DirectConnection.name"]], "netsquid.nodes.connections": [[34, "module-netsquid.nodes.connections"]], "port_a (netsquid.nodes.connections.connection property)": [[34, "netsquid.nodes.connections.Connection.port_A"]], "port_a (netsquid.nodes.connections.directconnection property)": [[34, "netsquid.nodes.connections.DirectConnection.port_A"]], "port_b (netsquid.nodes.connections.connection property)": [[34, "netsquid.nodes.connections.Connection.port_B"]], "port_b (netsquid.nodes.connections.directconnection property)": [[34, "netsquid.nodes.connections.DirectConnection.port_B"]], "ports (netsquid.nodes.connections.connection attribute)": [[34, "netsquid.nodes.connections.Connection.ports"]], "ports (netsquid.nodes.connections.directconnection attribute)": [[34, "netsquid.nodes.connections.DirectConnection.ports"]], "properties (netsquid.nodes.connections.connection attribute)": [[34, "netsquid.nodes.connections.Connection.properties"]], "properties (netsquid.nodes.connections.directconnection attribute)": [[34, "netsquid.nodes.connections.DirectConnection.properties"]], "rem_subcomponent() (netsquid.nodes.connections.connection method)": [[34, "netsquid.nodes.connections.Connection.rem_subcomponent"]], "rem_subcomponent() (netsquid.nodes.connections.directconnection method)": [[34, "netsquid.nodes.connections.DirectConnection.rem_subcomponent"]], "remove() (netsquid.nodes.connections.connection method)": [[34, "netsquid.nodes.connections.Connection.remove"]], "remove() (netsquid.nodes.connections.directconnection method)": [[34, "netsquid.nodes.connections.DirectConnection.remove"]], "reset() (netsquid.nodes.connections.connection method)": [[34, "netsquid.nodes.connections.Connection.reset"]], "reset() (netsquid.nodes.connections.directconnection method)": [[34, "netsquid.nodes.connections.DirectConnection.reset"]], "specify_model() (netsquid.nodes.connections.connection method)": [[34, "netsquid.nodes.connections.Connection.specify_model"]], "specify_model() (netsquid.nodes.connections.directconnection method)": [[34, "netsquid.nodes.connections.DirectConnection.specify_model"]], "subcomponents (netsquid.nodes.connections.connection attribute)": [[34, "netsquid.nodes.connections.Connection.subcomponents"]], "subcomponents (netsquid.nodes.connections.directconnection attribute)": [[34, "netsquid.nodes.connections.DirectConnection.subcomponents"]], "supercomponent (netsquid.nodes.connections.connection attribute)": [[34, "netsquid.nodes.connections.Connection.supercomponent"]], "supercomponent (netsquid.nodes.connections.directconnection attribute)": [[34, "netsquid.nodes.connections.DirectConnection.supercomponent"]], "uid (netsquid.nodes.connections.connection attribute)": [[34, "netsquid.nodes.connections.Connection.uid"]], "uid (netsquid.nodes.connections.directconnection attribute)": [[34, "netsquid.nodes.connections.DirectConnection.uid"]], "network (class in netsquid.nodes.network)": [[35, "netsquid.nodes.network.Network"]], "networkerror": [[35, "netsquid.nodes.network.NetworkError"]], "add_connection() (netsquid.nodes.network.network method)": [[35, "netsquid.nodes.network.Network.add_connection"]], "add_node() (netsquid.nodes.network.network method)": [[35, "netsquid.nodes.network.Network.add_node"]], "add_nodes() (netsquid.nodes.network.network method)": [[35, "netsquid.nodes.network.Network.add_nodes"]], "combine() (netsquid.nodes.network.network method)": [[35, "netsquid.nodes.network.Network.combine"]], "connection_name() (netsquid.nodes.network.network static method)": [[35, "netsquid.nodes.network.Network.connection_name"]], "connections (netsquid.nodes.network.network property)": [[35, "netsquid.nodes.network.Network.connections"]], "get_connected_ports() (netsquid.nodes.network.network method)": [[35, "netsquid.nodes.network.Network.get_connected_ports"]], "get_connection() (netsquid.nodes.network.network method)": [[35, "netsquid.nodes.network.Network.get_connection"]], "get_node() (netsquid.nodes.network.network method)": [[35, "netsquid.nodes.network.Network.get_node"]], "netsquid.nodes.network": [[35, "module-netsquid.nodes.network"]], "nodes (netsquid.nodes.network.network property)": [[35, "netsquid.nodes.network.Network.nodes"]], "remove_connection() (netsquid.nodes.network.network method)": [[35, "netsquid.nodes.network.Network.remove_connection"]], "remove_node() (netsquid.nodes.network.network method)": [[35, "netsquid.nodes.network.Network.remove_node"]], "id (netsquid.nodes.node.node property)": [[36, "netsquid.nodes.node.Node.ID"]], "node (class in netsquid.nodes.node)": [[36, "netsquid.nodes.node.Node"]], "add_ports() (netsquid.nodes.node.node method)": [[36, "netsquid.nodes.node.Node.add_ports"]], "add_property() (netsquid.nodes.node.node method)": [[36, "netsquid.nodes.node.Node.add_property"]], "add_subcomponent() (netsquid.nodes.node.node method)": [[36, "netsquid.nodes.node.Node.add_subcomponent"]], "cdata (netsquid.nodes.node.node property)": [[36, "netsquid.nodes.node.Node.cdata"]], "connect_to() (netsquid.nodes.node.node method)": [[36, "netsquid.nodes.node.Node.connect_to"]], "connection_port_name() (netsquid.nodes.node.node static method)": [[36, "netsquid.nodes.node.Node.connection_port_name"]], "get_conn_port() (netsquid.nodes.node.node method)": [[36, "netsquid.nodes.node.Node.get_conn_port"]], "has_subcomponent() (netsquid.nodes.node.node method)": [[36, "netsquid.nodes.node.Node.has_subcomponent"]], "has_supercomponent() (netsquid.nodes.node.node method)": [[36, "netsquid.nodes.node.Node.has_supercomponent"]], "models (netsquid.nodes.node.node attribute)": [[36, "netsquid.nodes.node.Node.models"]], "name (netsquid.nodes.node.node attribute)": [[36, "netsquid.nodes.node.Node.name"]], "netsquid.nodes.node": [[36, "module-netsquid.nodes.node"]], "ports (netsquid.nodes.node.node attribute)": [[36, "netsquid.nodes.node.Node.ports"]], "properties (netsquid.nodes.node.node attribute)": [[36, "netsquid.nodes.node.Node.properties"]], "qmemory (netsquid.nodes.node.node property)": [[36, "netsquid.nodes.node.Node.qmemory"]], "rem_subcomponent() (netsquid.nodes.node.node method)": [[36, "netsquid.nodes.node.Node.rem_subcomponent"]], "remove() (netsquid.nodes.node.node method)": [[36, "netsquid.nodes.node.Node.remove"]], "reset() (netsquid.nodes.node.node method)": [[36, "netsquid.nodes.node.Node.reset"]], "specify_model() (netsquid.nodes.node.node method)": [[36, "netsquid.nodes.node.Node.specify_model"]], "subcomponents (netsquid.nodes.node.node attribute)": [[36, "netsquid.nodes.node.Node.subcomponents"]], "supercomponent (netsquid.nodes.node.node attribute)": [[36, "netsquid.nodes.node.Node.supercomponent"]], "uid (netsquid.nodes.node.node attribute)": [[36, "netsquid.nodes.node.Node.uid"]], "datanodeprotocol (class in netsquid.protocols.nodeprotocols)": [[37, "netsquid.protocols.nodeprotocols.DataNodeProtocol"]], "localprotocol (class in netsquid.protocols.nodeprotocols)": [[37, "netsquid.protocols.nodeprotocols.LocalProtocol"]], "nodeprotocol (class in netsquid.protocols.nodeprotocols)": [[37, "netsquid.protocols.nodeprotocols.NodeProtocol"]], "timednodeprotocol (class in netsquid.protocols.nodeprotocols)": [[37, "netsquid.protocols.nodeprotocols.TimedNodeProtocol"]], "can_signal_to() (netsquid.protocols.nodeprotocols.localprotocol method)": [[37, "netsquid.protocols.nodeprotocols.LocalProtocol.can_signal_to"]], "exec_protocol() (netsquid.protocols.nodeprotocols.timednodeprotocol method)": [[37, "netsquid.protocols.nodeprotocols.TimedNodeProtocol.exec_protocol"]], "is_connected (netsquid.protocols.nodeprotocols.localprotocol property)": [[37, "netsquid.protocols.nodeprotocols.LocalProtocol.is_connected"]], "max_nodes (netsquid.protocols.nodeprotocols.localprotocol property)": [[37, "netsquid.protocols.nodeprotocols.LocalProtocol.max_nodes"]], "netsquid.protocols.nodeprotocols": [[37, "module-netsquid.protocols.nodeprotocols"]], "node (netsquid.protocols.nodeprotocols.nodeprotocol property)": [[37, "netsquid.protocols.nodeprotocols.NodeProtocol.node"]], "nodes (netsquid.protocols.nodeprotocols.localprotocol property)": [[37, "netsquid.protocols.nodeprotocols.LocalProtocol.nodes"]], "port_name (netsquid.protocols.nodeprotocols.datanodeprotocol property)": [[37, "netsquid.protocols.nodeprotocols.DataNodeProtocol.port_name"]], "post_process_data() (netsquid.protocols.nodeprotocols.datanodeprotocol method)": [[37, "netsquid.protocols.nodeprotocols.DataNodeProtocol.post_process_data"]], "process_data() (netsquid.protocols.nodeprotocols.datanodeprotocol method)": [[37, "netsquid.protocols.nodeprotocols.DataNodeProtocol.process_data"]], "run() (netsquid.protocols.nodeprotocols.datanodeprotocol method)": [[37, "netsquid.protocols.nodeprotocols.DataNodeProtocol.run"]], "run() (netsquid.protocols.nodeprotocols.timednodeprotocol method)": [[37, "netsquid.protocols.nodeprotocols.TimedNodeProtocol.run"]], "specify_node() (netsquid.protocols.nodeprotocols.localprotocol method)": [[37, "netsquid.protocols.nodeprotocols.LocalProtocol.specify_node"]], "start_time (netsquid.protocols.nodeprotocols.timednodeprotocol property)": [[37, "netsquid.protocols.nodeprotocols.TimedNodeProtocol.start_time"]], "time_step (netsquid.protocols.nodeprotocols.timednodeprotocol property)": [[37, "netsquid.protocols.nodeprotocols.TimedNodeProtocol.time_step"]], "protocol (class in netsquid.protocols.protocol)": [[38, "netsquid.protocols.protocol.Protocol"]], "signalresult (class in netsquid.protocols.protocol)": [[38, "netsquid.protocols.protocol.SignalResult"]], "signals (class in netsquid.protocols.protocol)": [[38, "netsquid.protocols.protocol.Signals"]], "add_signal() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.add_signal"]], "add_subprotocol() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.add_subprotocol"]], "await_mempos_busy_toggle() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.await_mempos_busy_toggle"]], "await_mempos_in_use_toggle() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.await_mempos_in_use_toggle"]], "await_port_input() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.await_port_input"]], "await_port_output() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.await_port_output"]], "await_program() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.await_program"]], "await_signal() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.await_signal"]], "await_timer() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.await_timer"]], "can_signal_to() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.can_signal_to"]], "check_assigned() (netsquid.protocols.protocol.protocol static method)": [[38, "netsquid.protocols.protocol.Protocol.check_assigned"]], "count() (netsquid.protocols.protocol.signalresult method)": [[38, "netsquid.protocols.protocol.SignalResult.count"]], "get_signal_by_event() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.get_signal_by_event"]], "get_signal_result() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.get_signal_result"]], "index() (netsquid.protocols.protocol.signalresult method)": [[38, "netsquid.protocols.protocol.SignalResult.index"]], "is_connected (netsquid.protocols.protocol.protocol attribute)": [[38, "netsquid.protocols.protocol.Protocol.is_connected"]], "is_running (netsquid.protocols.protocol.protocol attribute)": [[38, "netsquid.protocols.protocol.Protocol.is_running"]], "label (netsquid.protocols.protocol.signalresult attribute)": [[38, "netsquid.protocols.protocol.SignalResult.label"]], "name (netsquid.protocols.protocol.protocol attribute)": [[38, "netsquid.protocols.protocol.Protocol.name"]], "netsquid.protocols.protocol": [[38, "module-netsquid.protocols.protocol"]], "remove() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.remove"]], "reset() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.reset"]], "result (netsquid.protocols.protocol.signalresult attribute)": [[38, "netsquid.protocols.protocol.SignalResult.result"]], "run() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.run"]], "send_signal() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.send_signal"]], "signals (netsquid.protocols.protocol.protocol attribute)": [[38, "netsquid.protocols.protocol.Protocol.signals"]], "start() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.start"]], "start_subprotocols() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.start_subprotocols"]], "stop() (netsquid.protocols.protocol.protocol method)": [[38, "netsquid.protocols.protocol.Protocol.stop"]], "subprotocols (netsquid.protocols.protocol.protocol attribute)": [[38, "netsquid.protocols.protocol.Protocol.subprotocols"]], "uid (netsquid.protocols.protocol.protocol attribute)": [[38, "netsquid.protocols.protocol.Protocol.uid"]], "serviceerror": [[39, "netsquid.protocols.serviceprotocol.ServiceError"]], "serviceprotocol (class in netsquid.protocols.serviceprotocol)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol"]], "add_signal() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.add_signal"]], "add_subprotocol() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.add_subprotocol"]], "await_mempos_busy_toggle() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.await_mempos_busy_toggle"]], "await_mempos_in_use_toggle() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.await_mempos_in_use_toggle"]], "await_port_input() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.await_port_input"]], "await_port_output() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.await_port_output"]], "await_program() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.await_program"]], "await_signal() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.await_signal"]], "await_timer() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.await_timer"]], "can_signal_to() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.can_signal_to"]], "check_assigned() (netsquid.protocols.serviceprotocol.serviceprotocol static method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.check_assigned"]], "get_name() (netsquid.protocols.serviceprotocol.serviceprotocol static method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.get_name"]], "get_signal_by_event() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.get_signal_by_event"]], "get_signal_result() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.get_signal_result"]], "handle_request() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.handle_request"]], "is_connected (netsquid.protocols.serviceprotocol.serviceprotocol property)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.is_connected"]], "is_running (netsquid.protocols.serviceprotocol.serviceprotocol attribute)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.is_running"]], "max_nodes (netsquid.protocols.serviceprotocol.serviceprotocol property)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.max_nodes"]], "name (netsquid.protocols.serviceprotocol.serviceprotocol attribute)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.name"]], "netsquid.protocols.serviceprotocol": [[39, "module-netsquid.protocols.serviceprotocol"]], "node (netsquid.protocols.serviceprotocol.serviceprotocol property)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.node"]], "nodes (netsquid.protocols.serviceprotocol.serviceprotocol property)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.nodes"]], "put() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.put"]], "register_request() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.register_request"]], "register_response() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.register_response"]], "remove() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.remove"]], "request_handlers (netsquid.protocols.serviceprotocol.serviceprotocol property)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.request_handlers"]], "request_types (netsquid.protocols.serviceprotocol.serviceprotocol property)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.request_types"]], "reset() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.reset"]], "response_types (netsquid.protocols.serviceprotocol.serviceprotocol property)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.response_types"]], "run() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.run"]], "send_response() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.send_response"]], "send_signal() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.send_signal"]], "signals (netsquid.protocols.serviceprotocol.serviceprotocol attribute)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.signals"]], "specify_node() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.specify_node"]], "start() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.start"]], "start_subprotocols() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.start_subprotocols"]], "stop() (netsquid.protocols.serviceprotocol.serviceprotocol method)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.stop"]], "subprotocols (netsquid.protocols.serviceprotocol.serviceprotocol attribute)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.subprotocols"]], "uid (netsquid.protocols.serviceprotocol.serviceprotocol attribute)": [[39, "netsquid.protocols.serviceprotocol.ServiceProtocol.uid"]], "with_traceback() (netsquid.protocols.serviceprotocol.serviceerror method)": [[39, "netsquid.protocols.serviceprotocol.ServiceError.with_traceback"]], "clifford (class in netsquid.qubits.cliffords)": [[41, "netsquid.qubits.cliffords.Clifford"]], "localclifford (class in netsquid.qubits.cliffords)": [[41, "netsquid.qubits.cliffords.LocalClifford"]], "dagger (netsquid.qubits.cliffords.clifford attribute)": [[41, "netsquid.qubits.cliffords.Clifford.dagger"]], "dagger (netsquid.qubits.cliffords.localclifford attribute)": [[41, "netsquid.qubits.cliffords.LocalClifford.dagger"]], "dagger_phase (netsquid.qubits.cliffords.localclifford attribute)": [[41, "netsquid.qubits.cliffords.LocalClifford.dagger_phase"]], "decomposition (netsquid.qubits.cliffords.localclifford attribute)": [[41, "netsquid.qubits.cliffords.LocalClifford.decomposition"]], "multiply_with_phase() (netsquid.qubits.cliffords.localclifford method)": [[41, "netsquid.qubits.cliffords.LocalClifford.multiply_with_phase"]], "netsquid.qubits.cliffords": [[41, "module-netsquid.qubits.cliffords"]], "dmrepr (class in netsquid.qubits.dmtools)": [[42, "netsquid.qubits.dmtools.DMRepr"]], "densedmrepr (class in netsquid.qubits.dmtools)": [[42, "netsquid.qubits.dmtools.DenseDMRepr"]], "create_in_basis() (netsquid.qubits.dmtools.dmrepr static method)": [[42, "netsquid.qubits.dmtools.DMRepr.create_in_basis"]], "create_in_basis() (netsquid.qubits.dmtools.densedmrepr static method)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.create_in_basis"]], "discard() (netsquid.qubits.dmtools.dmrepr method)": [[42, "netsquid.qubits.dmtools.DMRepr.discard"]], "discard() (netsquid.qubits.dmtools.densedmrepr method)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.discard"]], "dm (netsquid.qubits.dmtools.densedmrepr attribute)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.dm"]], "fidelity() (netsquid.qubits.dmtools.dmrepr method)": [[42, "netsquid.qubits.dmtools.DMRepr.fidelity"]], "fidelity() (netsquid.qubits.dmtools.densedmrepr method)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.fidelity"]], "gmeasure() (netsquid.qubits.dmtools.dmrepr method)": [[42, "netsquid.qubits.dmtools.DMRepr.gmeasure"]], "gmeasure() (netsquid.qubits.dmtools.densedmrepr method)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.gmeasure"]], "is_valid (netsquid.qubits.dmtools.dmrepr attribute)": [[42, "netsquid.qubits.dmtools.DMRepr.is_valid"]], "is_valid (netsquid.qubits.dmtools.densedmrepr attribute)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.is_valid"]], "log_operation() (netsquid.qubits.dmtools.dmrepr method)": [[42, "netsquid.qubits.dmtools.DMRepr.log_operation"]], "log_operation() (netsquid.qubits.dmtools.densedmrepr method)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.log_operation"]], "measure() (netsquid.qubits.dmtools.dmrepr method)": [[42, "netsquid.qubits.dmtools.DMRepr.measure"]], "measure() (netsquid.qubits.dmtools.densedmrepr method)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.measure"]], "measure_discard() (netsquid.qubits.dmtools.dmrepr method)": [[42, "netsquid.qubits.dmtools.DMRepr.measure_discard"]], "measure_discard() (netsquid.qubits.dmtools.densedmrepr method)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.measure_discard"]], "multi_operate() (netsquid.qubits.dmtools.dmrepr method)": [[42, "netsquid.qubits.dmtools.DMRepr.multi_operate"]], "multi_operate() (netsquid.qubits.dmtools.densedmrepr method)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.multi_operate"]], "netsquid.qubits.dmtools": [[42, "module-netsquid.qubits.dmtools"]], "num_qubits (netsquid.qubits.dmtools.dmrepr attribute)": [[42, "netsquid.qubits.dmtools.DMRepr.num_qubits"]], "num_qubits (netsquid.qubits.dmtools.densedmrepr attribute)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.num_qubits"]], "operate() (netsquid.qubits.dmtools.dmrepr method)": [[42, "netsquid.qubits.dmtools.DMRepr.operate"]], "operate() (netsquid.qubits.dmtools.densedmrepr method)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.operate"]], "reduced_dm() (netsquid.qubits.dmtools.dmrepr method)": [[42, "netsquid.qubits.dmtools.DMRepr.reduced_dm"]], "reduced_dm() (netsquid.qubits.dmtools.densedmrepr method)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.reduced_dm"]], "smart_tensor() (netsquid.qubits.dmtools.dmrepr method)": [[42, "netsquid.qubits.dmtools.DMRepr.smart_tensor"]], "smart_tensor() (netsquid.qubits.dmtools.densedmrepr method)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.smart_tensor"]], "supports_mixed_states (netsquid.qubits.dmtools.dmrepr attribute)": [[42, "netsquid.qubits.dmtools.DMRepr.supports_mixed_states"]], "supports_mixed_states (netsquid.qubits.dmtools.densedmrepr attribute)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.supports_mixed_states"]], "supports_universal (netsquid.qubits.dmtools.dmrepr attribute)": [[42, "netsquid.qubits.dmtools.DMRepr.supports_universal"]], "supports_universal (netsquid.qubits.dmtools.densedmrepr attribute)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.supports_universal"]], "tensor() (netsquid.qubits.dmtools.dmrepr method)": [[42, "netsquid.qubits.dmtools.DMRepr.tensor"]], "tensor() (netsquid.qubits.dmtools.densedmrepr method)": [[42, "netsquid.qubits.dmtools.DenseDMRepr.tensor"]], "calc_amplitude_dampen_ops() (in module netsquid.qubits.dmutil)": [[43, "netsquid.qubits.dmutil.calc_amplitude_dampen_ops"]], "dm_fidelity() (in module netsquid.qubits.dmutil)": [[43, "netsquid.qubits.dmutil.dm_fidelity"]], "is_valid_dm() (in module netsquid.qubits.dmutil)": [[43, "netsquid.qubits.dmutil.is_valid_dm"]], "netsquid.qubits.dmutil": [[43, "module-netsquid.qubits.dmutil"]], "partialtrace() (in module netsquid.qubits.dmutil)": [[43, "netsquid.qubits.dmutil.partialtrace"]], "reduced_dm() (in module netsquid.qubits.dmutil)": [[43, "netsquid.qubits.dmutil.reduced_dm"]], "reorder_dm() (in module netsquid.qubits.dmutil)": [[43, "netsquid.qubits.dmutil.reorder_dm"]], "gslcrepr (class in netsquid.qubits.gslctools)": [[44, "netsquid.qubits.gslctools.GSLCRepr"]], "cliffords (netsquid.qubits.gslctools.gslcrepr attribute)": [[44, "netsquid.qubits.gslctools.GSLCRepr.cliffords"]], "create_in_basis() (netsquid.qubits.gslctools.gslcrepr static method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.create_in_basis"]], "discard() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.discard"]], "edges (netsquid.qubits.gslctools.gslcrepr attribute)": [[44, "netsquid.qubits.gslctools.GSLCRepr.edges"]], "fidelity() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.fidelity"]], "gmeasure() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.gmeasure"]], "is_valid (netsquid.qubits.gslctools.gslcrepr attribute)": [[44, "netsquid.qubits.gslctools.GSLCRepr.is_valid"]], "local_complementation() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.local_complementation"]], "log_operation() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.log_operation"]], "measure() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.measure"]], "measure_discard() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.measure_discard"]], "measure_qubit() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.measure_qubit"]], "multi_operate() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.multi_operate"]], "netsquid.qubits.gslctools": [[44, "module-netsquid.qubits.gslctools"]], "num_qubits (netsquid.qubits.gslctools.gslcrepr attribute)": [[44, "netsquid.qubits.gslctools.GSLCRepr.num_qubits"]], "operate() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.operate"]], "operate_cz() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.operate_CZ"]], "operate_qubits() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.operate_qubits"]], "reduced_dm() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.reduced_dm"]], "smart_tensor() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.smart_tensor"]], "supports_mixed_states (netsquid.qubits.gslctools.gslcrepr attribute)": [[44, "netsquid.qubits.gslctools.GSLCRepr.supports_mixed_states"]], "supports_universal (netsquid.qubits.gslctools.gslcrepr attribute)": [[44, "netsquid.qubits.gslctools.GSLCRepr.supports_universal"]], "swap_indices() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.swap_indices"]], "tensor() (netsquid.qubits.gslctools.gslcrepr method)": [[44, "netsquid.qubits.gslctools.GSLCRepr.tensor"]], "gslc2dm() (in module netsquid.qubits.gslcutil)": [[45, "netsquid.qubits.gslcutil.gslc2dm"]], "gslc2ket() (in module netsquid.qubits.gslcutil)": [[45, "netsquid.qubits.gslcutil.gslc2ket"]], "netsquid.qubits.gslcutil": [[45, "module-netsquid.qubits.gslcutil"]], "b00 (netsquid.qubits.ketstates.bellindex attribute)": [[46, "netsquid.qubits.ketstates.BellIndex.B00"]], "b01 (netsquid.qubits.ketstates.bellindex attribute)": [[46, "netsquid.qubits.ketstates.BellIndex.B01"]], "b10 (netsquid.qubits.ketstates.bellindex attribute)": [[46, "netsquid.qubits.ketstates.BellIndex.B10"]], "b11 (netsquid.qubits.ketstates.bellindex attribute)": [[46, "netsquid.qubits.ketstates.BellIndex.B11"]], "bellindex (class in netsquid.qubits.ketstates)": [[46, "netsquid.qubits.ketstates.BellIndex"]], "phi_minus (netsquid.qubits.ketstates.bellindex attribute)": [[46, "netsquid.qubits.ketstates.BellIndex.PHI_MINUS"]], "phi_plus (netsquid.qubits.ketstates.bellindex attribute)": [[46, "netsquid.qubits.ketstates.BellIndex.PHI_PLUS"]], "psi_minus (netsquid.qubits.ketstates.bellindex attribute)": [[46, "netsquid.qubits.ketstates.BellIndex.PSI_MINUS"]], "psi_plus (netsquid.qubits.ketstates.bellindex attribute)": [[46, "netsquid.qubits.ketstates.BellIndex.PSI_PLUS"]], "b00 (in module netsquid.qubits.ketstates)": [[46, "netsquid.qubits.ketstates.b00"]], "b01 (in module netsquid.qubits.ketstates)": [[46, "netsquid.qubits.ketstates.b01"]], "b10 (in module netsquid.qubits.ketstates)": [[46, "netsquid.qubits.ketstates.b10"]], "b11 (in module netsquid.qubits.ketstates)": [[46, "netsquid.qubits.ketstates.b11"]], "bell_states (in module netsquid.qubits.ketstates)": [[46, "netsquid.qubits.ketstates.bell_states"]], "h0 (in module netsquid.qubits.ketstates)": [[46, "netsquid.qubits.ketstates.h0"]], "h1 (in module netsquid.qubits.ketstates)": [[46, "netsquid.qubits.ketstates.h1"]], "netsquid.qubits.ketstates": [[46, "module-netsquid.qubits.ketstates"]], "s0 (in module netsquid.qubits.ketstates)": [[46, "netsquid.qubits.ketstates.s0"]], "s1 (in module netsquid.qubits.ketstates)": [[46, "netsquid.qubits.ketstates.s1"]], "y0 (in module netsquid.qubits.ketstates)": [[46, "netsquid.qubits.ketstates.y0"]], "y1 (in module netsquid.qubits.ketstates)": [[46, "netsquid.qubits.ketstates.y1"]], "ketrepr (class in netsquid.qubits.kettools)": [[47, "netsquid.qubits.kettools.KetRepr"]], "create_in_basis() (netsquid.qubits.kettools.ketrepr static method)": [[47, "netsquid.qubits.kettools.KetRepr.create_in_basis"]], "discard() (netsquid.qubits.kettools.ketrepr method)": [[47, "netsquid.qubits.kettools.KetRepr.discard"]], "fidelity() (netsquid.qubits.kettools.ketrepr method)": [[47, "netsquid.qubits.kettools.KetRepr.fidelity"]], "gmeasure() (netsquid.qubits.kettools.ketrepr method)": [[47, "netsquid.qubits.kettools.KetRepr.gmeasure"]], "is_valid (netsquid.qubits.kettools.ketrepr attribute)": [[47, "netsquid.qubits.kettools.KetRepr.is_valid"]], "ket (netsquid.qubits.kettools.ketrepr attribute)": [[47, "netsquid.qubits.kettools.KetRepr.ket"]], "log_operation() (netsquid.qubits.kettools.ketrepr method)": [[47, "netsquid.qubits.kettools.KetRepr.log_operation"]], "measure() (netsquid.qubits.kettools.ketrepr method)": [[47, "netsquid.qubits.kettools.KetRepr.measure"]], "measure_discard() (netsquid.qubits.kettools.ketrepr method)": [[47, "netsquid.qubits.kettools.KetRepr.measure_discard"]], "multi_operate() (netsquid.qubits.kettools.ketrepr method)": [[47, "netsquid.qubits.kettools.KetRepr.multi_operate"]], "netsquid.qubits.kettools": [[47, "module-netsquid.qubits.kettools"]], "num_qubits (netsquid.qubits.kettools.ketrepr attribute)": [[47, "netsquid.qubits.kettools.KetRepr.num_qubits"]], "operate() (netsquid.qubits.kettools.ketrepr method)": [[47, "netsquid.qubits.kettools.KetRepr.operate"]], "reduced_dm() (netsquid.qubits.kettools.ketrepr method)": [[47, "netsquid.qubits.kettools.KetRepr.reduced_dm"]], "smart_tensor() (netsquid.qubits.kettools.ketrepr method)": [[47, "netsquid.qubits.kettools.KetRepr.smart_tensor"]], "supports_mixed_states (netsquid.qubits.kettools.ketrepr attribute)": [[47, "netsquid.qubits.kettools.KetRepr.supports_mixed_states"]], "supports_universal (netsquid.qubits.kettools.ketrepr attribute)": [[47, "netsquid.qubits.kettools.KetRepr.supports_universal"]], "tensor() (netsquid.qubits.kettools.ketrepr method)": [[47, "netsquid.qubits.kettools.KetRepr.tensor"]], "dagger() (in module netsquid.qubits.ketutil)": [[48, "netsquid.qubits.ketutil.dagger"]], "innerprod() (in module netsquid.qubits.ketutil)": [[48, "netsquid.qubits.ketutil.innerprod"]], "ket2dm() (in module netsquid.qubits.ketutil)": [[48, "netsquid.qubits.ketutil.ket2dm"]], "ket2sparsedm() (in module netsquid.qubits.ketutil)": [[48, "netsquid.qubits.ketutil.ket2sparsedm"]], "ket_fidelity() (in module netsquid.qubits.ketutil)": [[48, "netsquid.qubits.ketutil.ket_fidelity"]], "netsquid.qubits.ketutil": [[48, "module-netsquid.qubits.ketutil"]], "outerprod() (in module netsquid.qubits.ketutil)": [[48, "netsquid.qubits.ketutil.outerprod"]], "partialtrace() (in module netsquid.qubits.ketutil)": [[48, "netsquid.qubits.ketutil.partialtrace"]], "reduced_dm() (in module netsquid.qubits.ketutil)": [[48, "netsquid.qubits.ketutil.reduced_dm"]], "reorder_ket() (in module netsquid.qubits.ketutil)": [[48, "netsquid.qubits.ketutil.reorder_ket"]], "sample_ket_from_dm() (in module netsquid.qubits.ketutil)": [[48, "netsquid.qubits.ketutil.sample_ket_from_dm"]], "bell_projectors (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.BELL_PROJECTORS"]], "ccx (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.CCX"]], "cs (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.CS"]], "cx (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.CX"]], "cz (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.CZ"]], "h (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.H"]], "i (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.I"]], "k (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.K"]], "operator (class in netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.Operator"]], "s (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.S"]], "swap (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.SWAP"]], "t (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.T"]], "x (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.X"]], "y (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.Y"]], "z (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.Z"]], "arr (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.arr"]], "cacheable (netsquid.qubits.operators.operator attribute)": [[49, "netsquid.qubits.operators.Operator.cacheable"]], "caching_enabled (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.caching_enabled"]], "clifford (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.clifford"]], "conj (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.conj"]], "create_rotation_op() (in module netsquid.qubits.operators)": [[49, "netsquid.qubits.operators.create_rotation_op"]], "csr (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.csr"]], "ctrl (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.ctrl"]], "description (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.description"]], "eigenkets (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.eigenkets"]], "eigenvals (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.eigenvals"]], "get_cache() (netsquid.qubits.operators.operator method)": [[49, "netsquid.qubits.operators.Operator.get_cache"]], "inv (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.inv"]], "is_clifford (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.is_clifford"]], "is_hermitian (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.is_hermitian"]], "is_projective (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.is_projective"]], "is_real (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.is_real"]], "is_unitary (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.is_unitary"]], "name (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.name"]], "netsquid.qubits.operators": [[49, "module-netsquid.qubits.operators"]], "num_qubits (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.num_qubits"]], "projectors (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.projectors"]], "use_sparse (netsquid.qubits.operators.operator property)": [[49, "netsquid.qubits.operators.Operator.use_sparse"]], "multi_operate_dm() (in module netsquid.qubits.opmath)": [[50, "netsquid.qubits.opmath.multi_operate_dm"]], "multi_operate_sparse_dm() (in module netsquid.qubits.opmath)": [[50, "netsquid.qubits.opmath.multi_operate_sparse_dm"]], "netsquid.qubits.opmath": [[50, "module-netsquid.qubits.opmath"]], "operate_dm() (in module netsquid.qubits.opmath)": [[50, "netsquid.qubits.opmath.operate_dm"]], "operate_ket() (in module netsquid.qubits.opmath)": [[50, "netsquid.qubits.opmath.operate_ket"]], "operate_sparse_dm() (in module netsquid.qubits.opmath)": [[50, "netsquid.qubits.opmath.operate_sparse_dm"]], "sparse_padding_threshold (netsquid.qubits.operators attribute)": [[50, "netsquid.qubits.operators.sparse_padding_threshold"]], "dm (netsquid.qubits.qformalism.qformalism attribute)": [[51, "id1"], [51, "netsquid.qubits.qformalism.QFormalism.DM"]], "gslc (netsquid.qubits.qformalism.qformalism attribute)": [[51, "id4"], [51, "netsquid.qubits.qformalism.QFormalism.GSLC"]], "ket (netsquid.qubits.qformalism.qformalism attribute)": [[51, "id0"], [51, "netsquid.qubits.qformalism.QFormalism.KET"]], "qformalism (class in netsquid.qubits.qformalism)": [[51, "netsquid.qubits.qformalism.QFormalism"]], "sparsedm (netsquid.qubits.qformalism.qformalism attribute)": [[51, "id2"], [51, "netsquid.qubits.qformalism.QFormalism.SPARSEDM"]], "stab (netsquid.qubits.qformalism.qformalism attribute)": [[51, "id3"], [51, "netsquid.qubits.qformalism.QFormalism.STAB"]], "convert_qrepr() (in module netsquid.qubits.qformalism)": [[51, "netsquid.qubits.qformalism.convert_qrepr"]], "convert_qstate() (in module netsquid.qubits.qformalism)": [[51, "netsquid.qubits.qformalism.convert_qstate"]], "ensemble_formalisms (netsquid.qubits.qformalism.qformalism attribute)": [[51, "netsquid.qubits.qformalism.QFormalism.ensemble_formalisms"]], "get_qstate_formalism() (in module netsquid.qubits.qformalism)": [[51, "netsquid.qubits.qformalism.get_qstate_formalism"]], "netsquid.qubits.qformalism": [[51, "module-netsquid.qubits.qformalism"]], "purestate_formalisms (netsquid.qubits.qformalism.qformalism attribute)": [[51, "netsquid.qubits.qformalism.QFormalism.purestate_formalisms"]], "set_qstate_formalism() (in module netsquid.qubits.qformalism)": [[51, "netsquid.qubits.qformalism.set_qstate_formalism"]], "universal_formalisms (netsquid.qubits.qformalism.qformalism attribute)": [[51, "netsquid.qubits.qformalism.QFormalism.universal_formalisms"]], "conversionerror": [[52, "netsquid.qubits.qrepr.ConversionError"]], "qrepr (class in netsquid.qubits.qrepr)": [[52, "netsquid.qubits.qrepr.QRepr"]], "convert_to() (in module netsquid.qubits.qrepr)": [[52, "netsquid.qubits.qrepr.convert_to"]], "create_in_basis() (netsquid.qubits.qrepr.qrepr static method)": [[52, "netsquid.qubits.qrepr.QRepr.create_in_basis"]], "deregister_conversion() (in module netsquid.qubits.qrepr)": [[52, "netsquid.qubits.qrepr.deregister_conversion"]], "discard() (netsquid.qubits.qrepr.qrepr method)": [[52, "netsquid.qubits.qrepr.QRepr.discard"]], "fidelity() (netsquid.qubits.qrepr.qrepr method)": [[52, "netsquid.qubits.qrepr.QRepr.fidelity"]], "gmeasure() (netsquid.qubits.qrepr.qrepr method)": [[52, "netsquid.qubits.qrepr.QRepr.gmeasure"]], "is_valid (netsquid.qubits.qrepr.qrepr attribute)": [[52, "netsquid.qubits.qrepr.QRepr.is_valid"]], "log_operation() (netsquid.qubits.qrepr.qrepr method)": [[52, "netsquid.qubits.qrepr.QRepr.log_operation"]], "measure() (netsquid.qubits.qrepr.qrepr method)": [[52, "netsquid.qubits.qrepr.QRepr.measure"]], "measure_discard() (netsquid.qubits.qrepr.qrepr method)": [[52, "netsquid.qubits.qrepr.QRepr.measure_discard"]], "multi_operate() (netsquid.qubits.qrepr.qrepr method)": [[52, "netsquid.qubits.qrepr.QRepr.multi_operate"]], "netsquid.qubits.qrepr": [[52, "module-netsquid.qubits.qrepr"]], "num_qubits (netsquid.qubits.qrepr.qrepr attribute)": [[52, "netsquid.qubits.qrepr.QRepr.num_qubits"]], "operate() (netsquid.qubits.qrepr.qrepr method)": [[52, "netsquid.qubits.qrepr.QRepr.operate"]], "reduced_dm() (netsquid.qubits.qrepr.qrepr method)": [[52, "netsquid.qubits.qrepr.QRepr.reduced_dm"]], "register_conversion() (in module netsquid.qubits.qrepr)": [[52, "netsquid.qubits.qrepr.register_conversion"]], "smart_tensor() (netsquid.qubits.qrepr.qrepr method)": [[52, "netsquid.qubits.qrepr.QRepr.smart_tensor"]], "supports_mixed_states (netsquid.qubits.qrepr.qrepr attribute)": [[52, "netsquid.qubits.qrepr.QRepr.supports_mixed_states"]], "supports_universal (netsquid.qubits.qrepr.qrepr attribute)": [[52, "netsquid.qubits.qrepr.QRepr.supports_universal"]], "tensor() (netsquid.qubits.qrepr.qrepr method)": [[52, "netsquid.qubits.qrepr.QRepr.tensor"]], "gslc2ket() (in module netsquid.qubits.qreprutil)": [[53, "netsquid.qubits.qreprutil.gslc2ket"]], "gslc2stab() (in module netsquid.qubits.qreprutil)": [[53, "netsquid.qubits.qreprutil.gslc2stab"]], "ket2gslc() (in module netsquid.qubits.qreprutil)": [[53, "netsquid.qubits.qreprutil.ket2gslc"]], "ket2stab() (in module netsquid.qubits.qreprutil)": [[53, "netsquid.qubits.qreprutil.ket2stab"]], "netsquid.qubits.qreprutil": [[53, "module-netsquid.qubits.qreprutil"]], "qrepr2dm() (in module netsquid.qubits.qreprutil)": [[53, "netsquid.qubits.qreprutil.qrepr2dm"]], "qrepr2ket() (in module netsquid.qubits.qreprutil)": [[53, "netsquid.qubits.qreprutil.qrepr2ket"]], "qrepr2sparsedm() (in module netsquid.qubits.qreprutil)": [[53, "netsquid.qubits.qreprutil.qrepr2sparsedm"]], "stab2gslc() (in module netsquid.qubits.qreprutil)": [[53, "netsquid.qubits.qreprutil.stab2gslc"]], "qstate (class in netsquid.qubits.qstate)": [[54, "netsquid.qubits.qstate.QState"]], "qstatecombineerror": [[54, "netsquid.qubits.qstate.QStateCombineError"]], "combine_qstate() (netsquid.qubits.qstate.qstate method)": [[54, "netsquid.qubits.qstate.QState.combine_qstate"]], "compare() (netsquid.qubits.qstate.qstate method)": [[54, "netsquid.qubits.qstate.QState.compare"]], "drop_qubit() (netsquid.qubits.qstate.qstate method)": [[54, "netsquid.qubits.qstate.QState.drop_qubit"]], "fidelity() (netsquid.qubits.qstate.qstate method)": [[54, "netsquid.qubits.qstate.QState.fidelity"]], "indices (netsquid.qubits.qstate.qstate attribute)": [[54, "netsquid.qubits.qstate.QState.indices"]], "indices_of() (netsquid.qubits.qstate.qstate method)": [[54, "netsquid.qubits.qstate.QState.indices_of"]], "log_operation() (netsquid.qubits.qstate.qstate method)": [[54, "netsquid.qubits.qstate.QState.log_operation"]], "measure_qubit() (netsquid.qubits.qstate.qstate method)": [[54, "netsquid.qubits.qstate.QState.measure_qubit"]], "multi_operate_qubits() (netsquid.qubits.qstate.qstate method)": [[54, "netsquid.qubits.qstate.QState.multi_operate_qubits"]], "netsquid.qubits.qstate": [[54, "module-netsquid.qubits.qstate"]], "num_qubits (netsquid.qubits.qstate.qstate attribute)": [[54, "netsquid.qubits.qstate.QState.num_qubits"]], "operate_qubits() (netsquid.qubits.qstate.qstate method)": [[54, "netsquid.qubits.qstate.QState.operate_qubits"]], "qrepr (netsquid.qubits.qstate.qstate attribute)": [[54, "netsquid.qubits.qstate.QState.qrepr"]], "qubits (netsquid.qubits.qstate.qstate attribute)": [[54, "netsquid.qubits.qstate.QState.qubits"]], "reduced_dm() (netsquid.qubits.qstate.qstate method)": [[54, "netsquid.qubits.qstate.QState.reduced_dm"]], "stoch_operate_qubits() (netsquid.qubits.qstate.qstate method)": [[54, "netsquid.qubits.qstate.QState.stoch_operate_qubits"]], "qubit (class in netsquid.qubits.qubit)": [[55, "netsquid.qubits.qubit.Qubit"]], "combine() (netsquid.qubits.qubit.qubit method)": [[55, "netsquid.qubits.qubit.Qubit.combine"]], "is_number_state (netsquid.qubits.qubit.qubit attribute)": [[55, "netsquid.qubits.qubit.Qubit.is_number_state"]], "name (netsquid.qubits.qubit.qubit property)": [[55, "netsquid.qubits.qubit.Qubit.name"]], "netsquid.qubits.qubit": [[55, "module-netsquid.qubits.qubit"]], "qstate (netsquid.qubits.qubit.qubit property)": [[55, "netsquid.qubits.qubit.Qubit.qstate"]], "amplitude_dampen() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.amplitude_dampen"]], "apply_dda_noise() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.apply_dda_noise"]], "apply_pauli_noise() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.apply_pauli_noise"]], "assign_qstate() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.assign_qstate"]], "combine_qubits() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.combine_qubits"]], "create_qubits() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.create_qubits"]], "delay_dephase() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.delay_dephase"]], "delay_depolarize() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.delay_depolarize"]], "dephase() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.dephase"]], "depolarize() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.depolarize"]], "discard() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.discard"]], "exp_value() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.exp_value"]], "fidelity() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.fidelity"]], "gmeasure() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.gmeasure"]], "measure() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.measure"]], "multi_operate() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.multi_operate"]], "netsquid.qubits.qubitapi": [[56, "module-netsquid.qubits.qubitapi"]], "operate() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.operate"]], "reduced_dm() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.reduced_dm"]], "stochastic_operate() (in module netsquid.qubits.qubitapi)": [[56, "netsquid.qubits.qubitapi.stochastic_operate"]], "sparsedmrepr (class in netsquid.qubits.sparsedmtools)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr"]], "create_in_basis() (netsquid.qubits.sparsedmtools.sparsedmrepr static method)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.create_in_basis"]], "discard() (netsquid.qubits.sparsedmtools.sparsedmrepr method)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.discard"]], "fidelity() (netsquid.qubits.sparsedmtools.sparsedmrepr method)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.fidelity"]], "gmeasure() (netsquid.qubits.sparsedmtools.sparsedmrepr method)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.gmeasure"]], "is_valid (netsquid.qubits.sparsedmtools.sparsedmrepr attribute)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.is_valid"]], "log_operation() (netsquid.qubits.sparsedmtools.sparsedmrepr method)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.log_operation"]], "measure() (netsquid.qubits.sparsedmtools.sparsedmrepr method)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.measure"]], "measure_discard() (netsquid.qubits.sparsedmtools.sparsedmrepr method)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.measure_discard"]], "multi_operate() (netsquid.qubits.sparsedmtools.sparsedmrepr method)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.multi_operate"]], "netsquid.qubits.sparsedmtools": [[57, "module-netsquid.qubits.sparsedmtools"]], "num_qubits (netsquid.qubits.sparsedmtools.sparsedmrepr attribute)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.num_qubits"]], "operate() (netsquid.qubits.sparsedmtools.sparsedmrepr method)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.operate"]], "reduced_dm() (netsquid.qubits.sparsedmtools.sparsedmrepr method)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.reduced_dm"]], "smart_tensor() (netsquid.qubits.sparsedmtools.sparsedmrepr method)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.smart_tensor"]], "sparse_dm (netsquid.qubits.sparsedmtools.sparsedmrepr attribute)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.sparse_dm"]], "supports_mixed_states (netsquid.qubits.sparsedmtools.sparsedmrepr attribute)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.supports_mixed_states"]], "supports_universal (netsquid.qubits.sparsedmtools.sparsedmrepr attribute)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.supports_universal"]], "tensor() (netsquid.qubits.sparsedmtools.sparsedmrepr method)": [[57, "netsquid.qubits.sparsedmtools.SparseDMRepr.tensor"]], "csr_matrix_nocheck (class in netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.csr_matrix_nocheck"]], "dm2sparsedm() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.dm2sparsedm"]], "is_pure_sparse_dm() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.is_pure_sparse_dm"]], "is_valid_sparse_dm() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.is_valid_sparse_dm"]], "netsquid.qubits.sparseutil": [[58, "module-netsquid.qubits.sparseutil"]], "reduced_sparse_dm() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.reduced_sparse_dm"]], "reorder_sparse_dm() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.reorder_sparse_dm"]], "sparse_allclose() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.sparse_allclose"]], "sparse_allreal() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.sparse_allreal"]], "sparse_dm_fidelity() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.sparse_dm_fidelity"]], "sparse_fast_conj() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.sparse_fast_conj"]], "sparse_kron_identity_left() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.sparse_kron_identity_left"]], "sparse_kron_identity_middle() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.sparse_kron_identity_middle"]], "sparse_kron_identity_right() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.sparse_kron_identity_right"]], "sparse_mul_dense_matrix() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.sparse_mul_dense_matrix"]], "sparse_mul_dense_vector() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.sparse_mul_dense_vector"]], "sparse_partialtrace() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.sparse_partialtrace"]], "sparse_trace() (in module netsquid.qubits.sparseutil)": [[58, "netsquid.qubits.sparseutil.sparse_trace"]], "stabrepr (class in netsquid.qubits.stabtools)": [[59, "netsquid.qubits.stabtools.StabRepr"]], "check_matrix (netsquid.qubits.stabtools.stabrepr attribute)": [[59, "netsquid.qubits.stabtools.StabRepr.check_matrix"]], "clifford_transform() (in module netsquid.qubits.stabtools)": [[59, "netsquid.qubits.stabtools.clifford_transform"]], "create_in_basis() (netsquid.qubits.stabtools.stabrepr static method)": [[59, "netsquid.qubits.stabtools.StabRepr.create_in_basis"]], "destab_matrix (netsquid.qubits.stabtools.stabrepr attribute)": [[59, "netsquid.qubits.stabtools.StabRepr.destab_matrix"]], "discard() (netsquid.qubits.stabtools.stabrepr method)": [[59, "netsquid.qubits.stabtools.StabRepr.discard"]], "fidelity() (netsquid.qubits.stabtools.stabrepr method)": [[59, "netsquid.qubits.stabtools.StabRepr.fidelity"]], "generator_to_matrix() (netsquid.qubits.stabtools.stabrepr method)": [[59, "netsquid.qubits.stabtools.StabRepr.generator_to_matrix"]], "gmeasure() (netsquid.qubits.stabtools.stabrepr method)": [[59, "netsquid.qubits.stabtools.StabRepr.gmeasure"]], "is_valid (netsquid.qubits.stabtools.stabrepr attribute)": [[59, "netsquid.qubits.stabtools.StabRepr.is_valid"]], "log_operation() (netsquid.qubits.stabtools.stabrepr method)": [[59, "netsquid.qubits.stabtools.StabRepr.log_operation"]], "measure() (netsquid.qubits.stabtools.stabrepr method)": [[59, "netsquid.qubits.stabtools.StabRepr.measure"]], "measure_discard() (netsquid.qubits.stabtools.stabrepr method)": [[59, "netsquid.qubits.stabtools.StabRepr.measure_discard"]], "multi_operate() (netsquid.qubits.stabtools.stabrepr method)": [[59, "netsquid.qubits.stabtools.StabRepr.multi_operate"]], "multiply_rows() (netsquid.qubits.stabtools.stabrepr method)": [[59, "netsquid.qubits.stabtools.StabRepr.multiply_rows"]], "netsquid.qubits.stabtools": [[59, "module-netsquid.qubits.stabtools"]], "num_qubits (netsquid.qubits.stabtools.stabrepr attribute)": [[59, "netsquid.qubits.stabtools.StabRepr.num_qubits"]], "operate() (netsquid.qubits.stabtools.stabrepr method)": [[59, "netsquid.qubits.stabtools.StabRepr.operate"]], "phases (netsquid.qubits.stabtools.stabrepr attribute)": [[59, "netsquid.qubits.stabtools.StabRepr.phases"]], "reduced_dm() (netsquid.qubits.stabtools.stabrepr method)": [[59, "netsquid.qubits.stabtools.StabRepr.reduced_dm"]], "row_reduce() (netsquid.qubits.stabtools.stabrepr method)": [[59, "netsquid.qubits.stabtools.StabRepr.row_reduce"]], "smart_tensor() (netsquid.qubits.stabtools.stabrepr method)": [[59, "netsquid.qubits.stabtools.StabRepr.smart_tensor"]], "supports_mixed_states (netsquid.qubits.stabtools.stabrepr attribute)": [[59, "netsquid.qubits.stabtools.StabRepr.supports_mixed_states"]], "supports_universal (netsquid.qubits.stabtools.stabrepr attribute)": [[59, "netsquid.qubits.stabtools.StabRepr.supports_universal"]], "tensor() (netsquid.qubits.stabtools.stabrepr method)": [[59, "netsquid.qubits.stabtools.StabRepr.tensor"]], "to_basis_state() (netsquid.qubits.stabtools.stabrepr method)": [[59, "netsquid.qubits.stabtools.StabRepr.to_basis_state"]], "sample (class in netsquid.qubits.state_sampler)": [[60, "netsquid.qubits.state_sampler.Sample"]], "statesampler (class in netsquid.qubits.state_sampler)": [[60, "netsquid.qubits.state_sampler.StateSampler"]], "convert_states() (netsquid.qubits.state_sampler.statesampler method)": [[60, "netsquid.qubits.state_sampler.StateSampler.convert_states"]], "get_leaves() (netsquid.qubits.state_sampler.statesampler method)": [[60, "netsquid.qubits.state_sampler.StateSampler.get_leaves"]], "label (netsquid.qubits.state_sampler.sample attribute)": [[60, "netsquid.qubits.state_sampler.Sample.label"]], "labels (netsquid.qubits.state_sampler.statesampler attribute)": [[60, "netsquid.qubits.state_sampler.StateSampler.labels"]], "netsquid.qubits.state_sampler": [[60, "module-netsquid.qubits.state_sampler"]], "num_qubits (netsquid.qubits.state_sampler.statesampler attribute)": [[60, "netsquid.qubits.state_sampler.StateSampler.num_qubits"]], "num_states (netsquid.qubits.state_sampler.statesampler attribute)": [[60, "netsquid.qubits.state_sampler.StateSampler.num_states"]], "probabilities (netsquid.qubits.state_sampler.statesampler attribute)": [[60, "netsquid.qubits.state_sampler.StateSampler.probabilities"]], "probability (netsquid.qubits.state_sampler.sample attribute)": [[60, "netsquid.qubits.state_sampler.Sample.probability"]], "probability_of_none (netsquid.qubits.state_sampler.statesampler attribute)": [[60, "netsquid.qubits.state_sampler.StateSampler.probability_of_none"]], "qrepr (netsquid.qubits.state_sampler.sample attribute)": [[60, "netsquid.qubits.state_sampler.Sample.qrepr"]], "reduce_states() (netsquid.qubits.state_sampler.statesampler method)": [[60, "netsquid.qubits.state_sampler.StateSampler.reduce_states"]], "sample() (netsquid.qubits.state_sampler.statesampler method)": [[60, "netsquid.qubits.state_sampler.StateSampler.sample"]], "states (netsquid.qubits.state_sampler.statesampler attribute)": [[60, "netsquid.qubits.state_sampler.StateSampler.states"]], "constrainedmap (class in netsquid.util.constrainedmap)": [[62, "netsquid.util.constrainedmap.ConstrainedMap"]], "constrainedmapview (class in netsquid.util.constrainedmap)": [[62, "netsquid.util.constrainedmap.ConstrainedMapView"]], "constrainterror": [[62, "netsquid.util.constrainedmap.ConstraintError"]], "immutabilityerror": [[62, "netsquid.util.constrainedmap.ImmutabilityError"]], "valueconstraint (class in netsquid.util.constrainedmap)": [[62, "netsquid.util.constrainedmap.ValueConstraint"]], "check() (netsquid.util.constrainedmap.valueconstraint method)": [[62, "netsquid.util.constrainedmap.ValueConstraint.check"]], "constr_and() (netsquid.util.constrainedmap.valueconstraint method)": [[62, "netsquid.util.constrainedmap.ValueConstraint.constr_and"]], "constr_not() (netsquid.util.constrainedmap.valueconstraint method)": [[62, "netsquid.util.constrainedmap.ValueConstraint.constr_not"]], "filter_by_type() (netsquid.util.constrainedmap.constrainedmap method)": [[62, "netsquid.util.constrainedmap.ConstrainedMap.filter_by_type"]], "get_constraints() (netsquid.util.constrainedmap.constrainedmap method)": [[62, "netsquid.util.constrainedmap.ConstrainedMap.get_constraints"]], "get_global_constraints() (netsquid.util.constrainedmap.constrainedmap method)": [[62, "netsquid.util.constrainedmap.ConstrainedMap.get_global_constraints"]], "get_mutable() (netsquid.util.constrainedmap.constrainedmap method)": [[62, "netsquid.util.constrainedmap.ConstrainedMap.get_mutable"]], "get_type() (netsquid.util.constrainedmap.constrainedmap method)": [[62, "netsquid.util.constrainedmap.ConstrainedMap.get_type"]], "integer_constr (in module netsquid.util.constrainedmap)": [[62, "netsquid.util.constrainedmap.integer_constr"]], "internal_add() (netsquid.util.constrainedmap.constrainedmap method)": [[62, "netsquid.util.constrainedmap.ConstrainedMap.internal_add"]], "internal_del() (netsquid.util.constrainedmap.constrainedmap method)": [[62, "netsquid.util.constrainedmap.ConstrainedMap.internal_del"]], "map (netsquid.util.constrainedmap.constrainedmapview property)": [[62, "netsquid.util.constrainedmap.ConstrainedMapView.map"]], "negative_constr (in module netsquid.util.constrainedmap)": [[62, "netsquid.util.constrainedmap.negative_constr"]], "netsquid.util.constrainedmap": [[62, "module-netsquid.util.constrainedmap"]], "nonnegative_constr (in module netsquid.util.constrainedmap)": [[62, "netsquid.util.constrainedmap.nonnegative_constr"]], "nonpositive_constr (in module netsquid.util.constrainedmap)": [[62, "netsquid.util.constrainedmap.nonpositive_constr"]], "not_none_constr (in module netsquid.util.constrainedmap)": [[62, "netsquid.util.constrainedmap.not_none_constr"]], "positive_constr (in module netsquid.util.constrainedmap)": [[62, "netsquid.util.constrainedmap.positive_constr"]], "lrucache (class in netsquid.util.cycache)": [[63, "netsquid.util.cycache.LruCache"]], "clear() (netsquid.util.cycache.lrucache method)": [[63, "netsquid.util.cycache.LruCache.clear"]], "get() (netsquid.util.cycache.lrucache method)": [[63, "netsquid.util.cycache.LruCache.get"]], "keys() (netsquid.util.cycache.lrucache method)": [[63, "netsquid.util.cycache.LruCache.keys"]], "netsquid.util.cycache": [[63, "module-netsquid.util.cycache"]], "size_limit (netsquid.util.cycache.lrucache attribute)": [[63, "netsquid.util.cycache.LruCache.size_limit"]], "correct_global_phase() (in module netsquid.util.cymath)": [[64, "netsquid.util.cymath.correct_global_phase"]], "isclose() (in module netsquid.util.cymath)": [[64, "netsquid.util.cymath.isclose"]], "netsquid.util.cymath": [[64, "module-netsquid.util.cymath"]], "datacollector (class in netsquid.util.datacollector)": [[65, "netsquid.util.datacollector.DataCollector"]], "collect_on() (netsquid.util.datacollector.datacollector method)": [[65, "netsquid.util.datacollector.DataCollector.collect_on"]], "databuffer (netsquid.util.datacollector.datacollector property)": [[65, "netsquid.util.datacollector.DataCollector.databuffer"]], "dataframe (netsquid.util.datacollector.datacollector property)": [[65, "netsquid.util.datacollector.DataCollector.dataframe"]], "get_data_function (netsquid.util.datacollector.datacollector property)": [[65, "netsquid.util.datacollector.DataCollector.get_data_function"]], "netsquid.util.datacollector": [[65, "module-netsquid.util.datacollector"]], "priority (netsquid.util.datacollector.datacollector property)": [[65, "netsquid.util.datacollector.DataCollector.priority"]], "reset() (netsquid.util.datacollector.datacollector method)": [[65, "netsquid.util.datacollector.DataCollector.reset"]], "check_memory_usage() (in module netsquid.util.simlog)": [[66, "netsquid.util.simlog.check_memory_usage"]], "get_loggers() (in module netsquid.util.simlog)": [[66, "netsquid.util.simlog.get_loggers"]], "logger (in module netsquid.util.simlog)": [[66, "netsquid.util.simlog.logger"]], "netsquid.util.simlog": [[66, "module-netsquid.util.simlog"]], "warn_deprecated() (in module netsquid.util.simlog)": [[66, "netsquid.util.simlog.warn_deprecated"]], "simstats (class in netsquid.util.simstats)": [[67, "netsquid.util.simstats.SimStats"]], "data (netsquid.util.simstats.simstats property)": [[67, "netsquid.util.simstats.SimStats.data"]], "end() (netsquid.util.simstats.simstats method)": [[67, "netsquid.util.simstats.SimStats.end"]], "ended (netsquid.util.simstats.simstats property)": [[67, "netsquid.util.simstats.SimStats.ended"]], "netsquid.util.simstats": [[67, "module-netsquid.util.simstats"]], "record() (netsquid.util.simstats.simstats method)": [[67, "netsquid.util.simstats.SimStats.record"]], "start() (netsquid.util.simstats.simstats method)": [[67, "netsquid.util.simstats.SimStats.start"]], "summary() (netsquid.util.simstats.simstats method)": [[67, "netsquid.util.simstats.SimStats.summary"]], "timeline_status() (netsquid.util.simstats.simstats class method)": [[67, "netsquid.util.simstats.SimStats.timeline_status"]], "microsecond (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.MICROSECOND"]], "millisecond (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.MILLISECOND"]], "nanosecond (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.NANOSECOND"]], "picosecond (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.PICOSECOND"]], "second (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.SECOND"]], "get_random_state() (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.get_random_state"]], "netsquid.util.simtools": [[68, "module-netsquid.util.simtools"]], "set_random_state() (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.set_random_state"]], "sim_count_events() (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.sim_count_events"]], "sim_count_handlers() (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.sim_count_handlers"]], "sim_count_instants() (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.sim_count_instants"]], "sim_count_resets() (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.sim_count_resets"]], "sim_reset() (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.sim_reset"]], "sim_run() (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.sim_run"]], "sim_state() (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.sim_state"]], "sim_stop() (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.sim_stop"]], "sim_time() (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.sim_time"]], "test() (in module netsquid.util.simtools)": [[68, "netsquid.util.simtools.test"]], "entity (class in pydynaa.core)": [[84, "pydynaa.core.Entity"]], "event (class in pydynaa.core)": [[84, "pydynaa.core.Event"]], "eventexpression (class in pydynaa.core)": [[84, "pydynaa.core.EventExpression"]], "eventhandler (class in pydynaa.core)": [[84, "pydynaa.core.EventHandler"]], "eventtype (class in pydynaa.core)": [[84, "pydynaa.core.EventType"]], "expressionhandler (class in pydynaa.core)": [[84, "pydynaa.core.ExpressionHandler"]], "simulationengine (class in pydynaa.core)": [[84, "pydynaa.core.SimulationEngine"]], "_dismiss() (pydynaa.core.entity method)": [[84, "pydynaa.core.Entity._dismiss"]], "_schedule_after() (pydynaa.core.entity method)": [[84, "pydynaa.core.Entity._schedule_after"]], "_schedule_at() (pydynaa.core.entity method)": [[84, "pydynaa.core.Entity._schedule_at"]], "_schedule_now() (pydynaa.core.entity method)": [[84, "pydynaa.core.Entity._schedule_now"]], "_wait() (pydynaa.core.entity method)": [[84, "pydynaa.core.Entity._wait"]], "_wait_once() (pydynaa.core.entity method)": [[84, "pydynaa.core.Entity._wait_once"]], "atomic_id (pydynaa.core.eventexpression attribute)": [[84, "pydynaa.core.EventExpression.atomic_id"]], "atomic_source (pydynaa.core.eventexpression attribute)": [[84, "pydynaa.core.EventExpression.atomic_source"]], "atomic_type (pydynaa.core.eventexpression attribute)": [[84, "pydynaa.core.EventExpression.atomic_type"]], "copy() (pydynaa.core.eventexpression method)": [[84, "pydynaa.core.EventExpression.copy"]], "current_time (pydynaa.core.simulationengine attribute)": [[84, "pydynaa.core.SimulationEngine.current_time"]], "default_priority (pydynaa.core.eventhandler attribute)": [[84, "pydynaa.core.EventHandler.default_priority"]], "default_priority (pydynaa.core.expressionhandler attribute)": [[84, "pydynaa.core.ExpressionHandler.default_priority"]], "description (pydynaa.core.eventtype attribute)": [[84, "pydynaa.core.EventType.description"]], "first_term (pydynaa.core.eventexpression attribute)": [[84, "pydynaa.core.EventExpression.first_term"]], "get_diagnostic_info() (pydynaa.core.simulationengine method)": [[84, "pydynaa.core.SimulationEngine.get_diagnostic_info"]], "get_expression_handlers() (pydynaa.core.simulationengine method)": [[84, "pydynaa.core.SimulationEngine.get_expression_handlers"]], "handle() (pydynaa.core.eventhandler method)": [[84, "pydynaa.core.EventHandler.handle"]], "handle() (pydynaa.core.expressionhandler method)": [[84, "pydynaa.core.ExpressionHandler.handle"]], "highest_priority (pydynaa.core.eventhandler attribute)": [[84, "pydynaa.core.EventHandler.highest_priority"]], "highest_priority (pydynaa.core.expressionhandler attribute)": [[84, "pydynaa.core.ExpressionHandler.highest_priority"]], "id (pydynaa.core.event attribute)": [[84, "pydynaa.core.Event.id"]], "id (pydynaa.core.eventtype attribute)": [[84, "pydynaa.core.EventType.id"]], "identifier (pydynaa.core.eventhandler attribute)": [[84, "pydynaa.core.EventHandler.identifier"]], "identifier (pydynaa.core.expressionhandler attribute)": [[84, "pydynaa.core.ExpressionHandler.identifier"]], "lowest_priority (pydynaa.core.eventhandler attribute)": [[84, "pydynaa.core.EventHandler.lowest_priority"]], "lowest_priority (pydynaa.core.expressionhandler attribute)": [[84, "pydynaa.core.ExpressionHandler.lowest_priority"]], "name (pydynaa.core.eventtype attribute)": [[84, "pydynaa.core.EventType.name"]], "num_events (pydynaa.core.simulationengine attribute)": [[84, "pydynaa.core.SimulationEngine.num_events"]], "num_handlers (pydynaa.core.simulationengine attribute)": [[84, "pydynaa.core.SimulationEngine.num_handlers"]], "num_instants (pydynaa.core.simulationengine attribute)": [[84, "pydynaa.core.SimulationEngine.num_instants"]], "priority (pydynaa.core.eventhandler attribute)": [[84, "pydynaa.core.EventHandler.priority"]], "priority (pydynaa.core.expressionhandler attribute)": [[84, "pydynaa.core.ExpressionHandler.priority"]], "remove() (pydynaa.core.entity method)": [[84, "pydynaa.core.Entity.remove"]], "reprime() (pydynaa.core.eventexpression method)": [[84, "pydynaa.core.EventExpression.reprime"]], "reset() (pydynaa.core.simulationengine method)": [[84, "pydynaa.core.SimulationEngine.reset"]], "run() (pydynaa.core.simulationengine method)": [[84, "pydynaa.core.SimulationEngine.run"]], "second_term (pydynaa.core.eventexpression attribute)": [[84, "pydynaa.core.EventExpression.second_term"]], "source (pydynaa.core.event attribute)": [[84, "pydynaa.core.Event.source"]], "state (pydynaa.core.simulationengine attribute)": [[84, "pydynaa.core.SimulationEngine.state"]], "stop() (pydynaa.core.simulationengine method)": [[84, "pydynaa.core.SimulationEngine.stop"]], "triggered_events (pydynaa.core.eventexpression attribute)": [[84, "pydynaa.core.EventExpression.triggered_events"]], "triggered_time (pydynaa.core.eventexpression attribute)": [[84, "pydynaa.core.EventExpression.triggered_time"]], "type (pydynaa.core.event attribute)": [[84, "pydynaa.core.Event.type"]], "type (pydynaa.core.eventexpression attribute)": [[84, "pydynaa.core.EventExpression.type"]], "uid (pydynaa.core.entity attribute)": [[84, "pydynaa.core.Entity.uid"]], "unschedule() (pydynaa.core.event method)": [[84, "pydynaa.core.Event.unschedule"]], "value (pydynaa.core.eventexpression attribute)": [[84, "pydynaa.core.EventExpression.value"]], "wait() (pydynaa.core.eventexpression method)": [[84, "pydynaa.core.EventExpression.wait"]]}})