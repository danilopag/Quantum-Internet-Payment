CHANGELOG
=========

This file lists important incremental changes to the NetSquid source repository.
For a summary of changes per NetSquid release see [RELEASE](RELEASE.md).

**Important**: if NetSquid fails to build or the tests fail, try cleaning the building environment before building again e.g.:
```
make clean
make
make tests
```
This will clean up any lingering object or library files (.o, .so, etc.) that may be causing problems.

For details concerning new features please refer to the [online documentation](https://docs.netsquid.org/) or build it locally with `make docs`.

2021-12-09 Rob
--------------

- Deploying docs and packages to NetSquid servers is now possible via a proxy server. Only sftp is used to support modern openssh restrictions.

2021-11-15 Rob
--------------

- Updated link to NetSquid paper in README and list of active authors.

2021-06-30 Rob
--------------

- Fixed bug where calling the `Channel.peek` method on an empty channel gave IndexError.

2021-06-17 Rob
--------------

- PyDynAA dependency updated to support major versions 1.X.

2021-06-16 Rob
--------------

- _version.py_ functions `get_git_version_tag` and `bump_version` now take and return tuple of ints instead of strings for version numbers. 
- _version.py_ has a `MAJOR_VERSION` variable used to determine the current major version if different from latest version tag in Git.
- Added support for `v*-develop` protected branches to Gitlab CI script. These branches act as development branch for major versions that are not the focus of master branch e.g. `v2-develop`, or when v2 is merged into master, `v1-develop`, etc.

2021-05-07 Rob
--------------

- Fixed bug where `in_use` property of quantum memory positions wasn't being toggled upon calls to `set_qubit()` and `get_qubit()`, and thereby also not for `put()` and `pop()` methods of qmemory.

2021-05-05 Rob
--------------

- Added missing `delay_dephase` function to _qubitapi_ docs.

2021-04-18 Martijn, Rob
-----------------------

- Added positional output ports `qout{0..(N-1)}` for the N memory position on a quantum memory, which can be used as an alternative to the general `qout` port.
- Extended `gmeasure` to directly accept an `Operator`, such that users don't need to extract the projectors themselves.
- Implemented multi-qubit pauli measurements in `StabRepr`, which requires the `Operator` functionality. 
- Added helper function `check_measurement_operators()` to _qubits.operators_ module.

2021-03-30 Martijn
------------------

- Added a new interface: the Switch. It can be used to forward messages dynamically, or even split messages over multiple ports.
- Added a new component: the SimpleSwitch. Forward messages based on a port-to-port mapping you can specify.

2021-03-26 Chris
----------------

- Fidelity estimation optimized for sparse density matrices representing pure states (in `sparse_dm_fidelity`), i.e. for pure states one does not need to determine the square root of the density matrix.
- Added `is_pure_sparse_dm` to check if the sparse density matrix represents a pure state.

2021-03-25 Martijn
------------------

- Removed usage of `is_triggered` and `in_dead_time` of the `QuantumDetector` in methods intended to be overwritten.

2020-03-23 Martijn
------------------

- Changed the properties of a `Model` to a `ConstrainedMap`.
- Added `Model.add_property` to add value and/or type constrainted properties.
- Adding new keys to a `ConstrainedMap` is now allowed and will default to no constraints.
- Added support for tuples of different types in the `value_type` of a `ConstrainedMap`.
- Added `rng` parameter to `DelayModel`.

2021-03-17 Rob, Martijn
-----------------------

- Changed the Cython language level to 3str.

2021-03-05 Rob
--------------

- Fixed bug in _sparseutil_ module that in some instances converted DMs to have real instead of complex type.
- Changed uses of `np.complex{_}` to just `complex` to fix numpy deprecation warings. Note that use of `np.complex_t` for Cython should stay.

2021-03-04 Chris
----------------

- Added `discard` method to `QuantumMemory` which removes the qubit from the provided memory position and from any combined states the qubit was part of.
- Added `IDiscard` instruction class and `INSTR_DISCARD` instruction constant to discard a qubit or qubits from the quantum memory to the `instructions` module.

2021-02-18 Chris
----------------

- Added explanation to `simlog` on how the loggers in Netsquid work in general, how they can be found, and how their level can be configured to the user's preferences; including concrete examples in the `get_loggers` method.

2020-12-18 Martijn
------------------

- Added python 3.9 support.

2020-12-08 Martijn
------------------

- Fixed projectors of multi-qubit operators not collapsing projectors with degenerate eigenvalues. In practice using `gmeasure` with the projectors of `ZZ` now implements a parity measurement.
- A side-effect of the fix is that the eigenvalues of operator are no longer guaranteed to match with the projectors.

2020-12-04 Rob, Martijn
-----------------------

- Qubits on ports that aren't picked up on time are only discarded if there are no other external references to it.

2020-12-03 Martijn
------------------

- Added `operators.BELL_PROJECTORS` which are the Bell state projectors corresponding to the `BellIndex`.
- Added a `QRepr.create_in_basis` static method which can be used to easily create a representation of n qubits in a particular basis defined by a single qubit observable.
- Added support for providing measuremement operators as tuples.
- The `projectors` of an `Operator` are now returned as a tuple instead of a list.
- Added support for providing indices as a tuple to `QRepr.fidelity`.
- Added support for providing an int to `QRepr.gmeasure`.

2020-12-02
----------

### Martijn

- Deprecated `QuantumMemory.signal` in favor of `QuantumMemory.send_signal`.
- Deprecated `PhysicalIndex.num` for `PhysicalIndex.position` in _qprocessor_ module.
- Added an `INSTR_MEASURE_FAULTY` to `instructions` module.
- Replaced keyword name `**params`, `**program_kwargs` to `**parameters`.
- Deprecated `PhysicalInstruction.{c,q}_noise_model` in favor of `PhysicalInstruction.{classical,quantum}_noise_model`.
- Changed `ClassicalCodingFactory.create_coded_item` to a classmethod.
- Added port forwarding in `Node.add_subcomponent`.
- The `Clifford` class now correctly assigns the name attribute.
- Fixed a bug where it was possible to give more target indices to `padded_matrix` than the operator would act on.

### Rob

- The `positions` argument for the methods `peek`, `delta_time` and `operate` of `QuantumMemory` no longer takes a default value of 0.
- Deprecated the `QuantumMemory` methods `{get,set}_position_used()`, `get_position_empty()`. The `in_use` and `is_empty` attributes of a memory position can be accessed directly.
- Deprecated the `Channel.evtype_outputready` attribute by removing its documentation. The `Port.evtype_output` should be used instead.
- Added `QuantumMemory.used_positions` property and deprecated `QuantumMemory.num_used_positions`.

2020-12-01 Chris
----------------

- The `QSource` omits new pulse generation in case the `StateSampler` returns a vacuum (i.e. `None`) state. 

2020-11-30 Martijn
------------------

- Changed the internal representation of `StabRepr` to a double tableau instead of single. This results in double the memory usage, but the measurement time complexity has been reduced from `O(n^3)` to `O(n^2)`.
- Fixed a bug in `StabRepr.fidelity` in certain cases not returning the correct value if the selected indices aren't a range from 0 to n.
- Restored logging of operations to `GSLCRepr` and `StabRepr` such that `sim_run` counts the operations correctly.

2020-11-27 Martijn, Rob
-----------------------

Quantum states and representations:
- The way quantum states of qubits are represented by `QState` has changed. The actual representation of the state is now described by the `QRepr` base class, which it references via `QState.qrepr`. `QRepr` has no direct notion of `Qubit` object; the `QState` is responsible for mapping the qubits that share it to its representation.
- The `QRepr` class is subclassed by NetSquid's five formalisms: `KetRepr`, `DenseDMRepr`, `SparseDMRepr`, `StabRepr`, `GSLCRepr`. (`DenseDMRepr`, `SparseDMRepr` do so via the base class `DMRepr`).
- The methods of `QRepr` are immutable by default, but some permit a `modify` flag. See the documentation for more info about this new class, such as `supports_mixed_states` and `supports_universal` properties and the supported `^` tensor operator.
- `QState` has new property `num_qubits` and new method `indices_of(qubits)`.
- The _qrepr_ module has the `convert_to` function for conversions between `QRepr` instances. Supported conversions can be (de)registered by other modules.
- Refactored `QFormalism` to be an extendable class (previously Enum), so that users can add extra formalisms. The values of its attributes are now `QRepr` types. It is no longer possible to check if a formalism is an instance of QFormalism.
- When speciying a formalism to `qubitapi.assign_qstate` any `QRepr` type can be given, as well as `None` (e.g. as a vacuum state).
- `qubitapi.fidelity` function also accepts `QRepr` as a reference state.

State sampler:
- Added support for `QRepr` instances in the `StateSampler`. It will keep supporting numpy arrays, but will convert all leaves to `QRepr` or None.
- `state_sampler.Sample` has the `state` attribute renamed to `qrepr` (former deprecated).

Build environment:
- Changed cython version requirement from 0.29.16 to 0.29.21 (decided against 3.0.0a6 for now).
- Added a `coverage-report` makefile target, which reports on the achieved coverage without rebuilding netsquid.
- Updated `.coveragerc` to exclude code we don't expect to run.

Deprecated/removed:
- Deprecated `DMState`, `KetState`, `SparseDMState`, `StabState` and `GSLCState`.
- Directly operating, measuring and calculating fidelity on a `QState` is deprecated. Only operations that change the qubits in the `QState` remain.
- The properties of `QState` used to inspect the state like `dm`, `ket` and `stab` are deprecated.
- Deprecated `qformalism.convert_qsrepr` to be replaced by `qformalism.convert_qrepr`.
- Deprecated `Stabilizer` in favor of `StabRepr`.
- Removed support for usage of `|` and `>>` with `Operators`.
- `qformalism.get_formalism_of_qstate` function deprecated.

2020-11-18 Martijn
------------------

- Added EventType `evtype_busy_toggled` and `evtype_in_use_toggled` to the `MemoryPosition`, which is scheduled when the `busy` or `in_use` flag is toggled respectively.
- The event can be disabled by setting `busy_event_enabled` or `in_use_event_enabled` to False, which is the default.
- Added `Protocol.await_mempos_busy_toggle` and `await_mempos_in_use_toggle` which returns an `EventExpression` that waits for one of the specified positions.

2020-11-02 Martijn, Rob
-----------------------

- Added coverage testing based on the unittests and integration tests, and extended the CI. Facilitated by a new _coverage\_util_ module.
- Run `make coverage` to run the tests and collect a basic report on the coverage.
- Run `make coverage-html` to create a more sophisticated report on the coverage.
- Coverage testing caches the results, run individual tests commands to update the caches, or run `make clean` in advance.
- Added a nice badge in the readme about the coverage.
- Added the environment variable `NETSQUID_COVERAGE` which can be set to one to enable cython line tracing when building. It doubles runtime on average.
- Added the function `check_dirty_version()`  to _version_ module to warn if the build environment is potentially dirty due to change in coverage and profiling flags between builds.

2020-10-26 Martijn
------------------

- Added environment variable `NETSQUID_BUILD_CORES` to set the number of cores netsquid uses when building.

2020-10-20 Martijn
------------------

- Added support for retrieving different signal results via their triggered events if they were sent in the same time instance.
- Retrieving signal results using `get_signal_by_event` that are already overwritten with a newer signal result will return `None`.
- If not retrieved via the event, the most recently sent signal result is returned.

2020-10-13 Martijn
------------------

- Fixed a bug where removing a Connection from a Network wouldn't always work when the connection object was given as argument.

2020-09-29 Martijn
------------------

- Cythonized `StateSampler` and `Sample`.

2020-08-27 Loek
---------------

- Removed all deprecated code from before v0.10.

2020-08-19 Martijn
------------------

- Changed the return of `ns.test()` from a boolean to an exit code of 1.

2020-08-12 Martijn
------------------

- Added tuples `ensemble_formalisms`, `purestate_formalisms` and `universal_formalisms` to `qformalism` module and refactored lingering definitions of them.
- Updated `convert_qstate`, `convert_qsrepr` and `get_formalism_of_qstate` to work for all formalisms.
- Updated `assign_qstate`, `gmeasure`, `multi_operate`, `apply_pauli_noise` to work for all formalisms.
- Added support for SparseDM to the `StateSampler`.
- Changed `SparseDMState.dm` to return a numpy array instead of a dense csrmatrix.
- Fixed `SparseDMState.__repr__`.

2020-08-06 Loek
---------------

- `qubitapi.measure()` and `Operator.__rshift__()` now raise a `ValueError` if the qstate is `None`.

2020-08-03 Rob
--------------

- The cythonized `_emit`, `_generate_new_pulse` and `_set_qubit_port_mapping` methods of `QSource` are again exposed to Python (`cpdef` instead of `cdef`)
- Likewise, the cythonized `_send_delayed_message` and `_set_port_models` methods of `QuantumDetector` are again exposed to Python (`cpdef` instead of `cdef`)

2020-07-31 Chris, Loek, Leon, Martijn
-------------------------------------

- Added a `SPARSEDM` formalism, which functions identical to the `DM` formalism, but stores the matrix in a sparse format.
- Moved calculation of operators for `amplitude_dampen` to `dmutil`.
- Added conversion function `ketutil.ket2sparsedm()`
- Added `operate_sparse_dm` and `multi_operate_sparse_dm` to the `opmath` module.
- Added `reorder_sparse_dm`, `sparse_partialtrace`, `reduced_sparse_dm`, `dm2sparsedm` methods to `sparseutil`.

2020-07-30
----------

### Martijn, Loek

- Cythonized `QuantumDetector`, `QSource` and `SourceStatus`.
- Added `is_triggered` and `in_dead_time` property to `QuantumDetector`.

### Leon

- Deprecated the `QState.gslc` property.
- Moved qstate conversions to `gslcutil.stab2gslc`, `gslcutil.gslc2ket`, `gslcutil.gslc2dm` and `gslcutil.gslc2stab`
- Added a `QuantumProcessor.add_composite_instruction()`.
  Compiled instructions are instructions that are composed of multiple lower level physical instructions.
  When a this instruction is applied in a program it will execute the physical instructions it is composed of.
- Added `netsquid.components.qproccesor.PhysicalIndex`.
  Helper class for composite instructions to indicate instruction acts on a physical (hardcoded) 
  index outside the scope of instruction.

2020-07-28 
----------

### Martijn, Leon

- Extended the `ket2stabilizer` method to handle any KET vector.

### Martijn, Loek

- Added a `QuantumDetector` class which can measure single and multiple qubits, and supports a system delay and/or dead time.
- Added a `GatedQuantumDetector` class which is a `QuantumDetector` that requires an external trigger to be enabled.

### Leon

- Added an overview of the different formalisms in the `qformalism` documentation.
- Possibly breaking: `QuantumProcessor.execute_program` now returns an `EvenExpression` instead of the expected run time.
So you can now use `yield my_quantum_processor.execute_program(my_quantum_program)` directly. 
To access the runtime there is the `my_quantum_processor.sequence_end_time` property.
- `QuantumProcessor.execute_instruction` now returns an `EventExpression` as third value

2020-07-27
----------

### Martijn

- Added a custom git submodule for our fork of the _napoleon_ repository that fixes formatting of custom docstring headings. The `make docs` target automatically updates this submodule.


### Martijn, Rob

- Added a `make profile` target that builds NetSquid with cython profiling enabled. In this case `-profile` is appended to the local portion of the version string (i.e. after a `+`).

2020-07-22 Rob
--------------

- Port forwarding can now also be setup between ports of the same component.

2020-07-14 Guus
---------------

- handle_request of ServiceProtocol now returns the object returned by the request's handler function.

2020-07-13 Martijn
------------------

- Added enumeration `ketstates.BellIndex` that defines indices that relate to the Bell states.
- Added an example how to use `BellIndex` in the repeater(chain) examples.
- Added a dictionary `ketstates.bell_states` that maps the `BellIndex` to the states.


2020-07-10 Leon
---------------

- Added a `lazy` flag in Program.run(). When set to True the program will execute all its instructions at once (keeping track of a 'fake' simulation time for noise). 

2020-07-05 Rob
--------------

- The Makefile targets for building NetSquid will now use most cores for compiling c extensions if available.

2020-06-30 Leon
---------------

- You can now remove nodes and connections from networks using `network.remove_node` and `network.remove_connection` respectively.
- Optimized combining ket states. They are now up to 5 times faster.

2020-06-29 Martijn
------------------

- Added an example showing how to improve the runtime of the simple link example by abstracting the entanglement attempts, i.e. using magic.
- Split the `EGPService` into an `EGService` implementing the queue and an `EGProtocol` implementing the request handler.

2020-06-26 Leon
---------------

- `qubitapi.fidelity` now accepts one dimensional ndarrays.
- Fixed a bug where fidelity of Stabilizers wasn't calculated correctly.
- Fixed a bug where merging kets resulted in an incorrect ket size.
- Added a way to combine two networks using `Network.combine(other)`.

2020-06-25 Rob
--------------

- The KET formalism again does a left append when combining quantum states for special cases. Fixed a bug in the previous implementation and removed tests that required fixed internal qubit ordering for a combine.
- `qubitapi.combine_qubits` now returns a list of qubits with same ordering as in shared quantum state

2020-06-18 Martijn
------------------

- Removed direct access to methods of the ketutil module from the netsquid module. Use the netsquid.qubits module instead.

2020-06-15 Leon
---------------

- When a subcomponent is removed from its parent component, the ports that are connected with the parent component or sibling components are unlinked.
- Added a `ComponentError` and `ComponentHierarchyError` as custom exceptions instead of the more general ValueError.
- A `ComponentHierarchyError` is now raised when attempting to add a component as subcomponent that is already part of another component.

2020-06-12 Leon
---------------

- Added a GSLC Formalism (Graph States with Local Cliffords).
   - This formalism can be set as usual with QFormalism.GSLC
   - It is similar to the Stabilizer formalism in that it can only represent Stabilizer states
   - Two main classes are used: 
        1. `gslctools.GSLCState` as a subclass of `QState`, that holds the qubits and the representation 
        2. And `gslcutil.GSLCRepr`, the representation. The edges of the graph and local cliffords are stored in here.
        It is responsible for doing all operations, measurements and other calculations
   - Space complexity of GSLC is O(ndlog(n)); where d is the amount of edges in the graph. 
   On average stabilizer states d = O(log(n))
- Added a clifford group module (_qubits.cliffords_):
    - Contains the 24 single qubit cliffords
    - Contains CZ and SWAP as two qubit cliffords
    - All other cliffords operatiors can be made using multiplication (*) and tensor product (^) and the 26 above core cliffords. 
    - Used in the GSLC formalism to recognize clifford operators quicker without the need of a matrix.
- Optimized Stabilizers to use `netsquid.qubits.cliffords.Clifford` instead of looking at the matrix of the operator.
 
2020-06-10 Martijn
------------------

- Added a `QuantumProcessor.active_instructions()` method that returns the instructions that are being executed by the processor.

2020-06-04
----------

### Martijn

- Added `QuantumMemory.measure_faulty()` method for imperfect projective measurements.
- Added an instruction `IMeasureFaulty` that calls `measure_faulty()`.
- Optimized `StabState.fidelity()` for use with Stabilizer states. It also allows for Ket or DM states, but note converting to stabilizer is still limited and might be slow. 
- Added method `Stabilizer.operate()`
- Added method `Stabilizer.to_basis_state()` that puts the state into the standard basis and return the circuit used.

### Leon

- DM conversion in `StateSampler.convert_states` now adds a leaf for each ket in the DM.

2020-05-18 Martijn
------------------

- Measuring a single qubit using the qubitapi with `discard=True` will now set the qstate to `None`.

2020-05-13 Martijn
------------------

- The `ServiceProtocol.put()` method now returns `ServiceProtocol.handle_request()`.
- Extended the simple_link example to handle additional request arguments like the entanglement id. 

2020-05-11 Martijn, Rob
-----------------------

- Added `docs-pdf` make target to generate documentation in PDF format.

2020-04-23 Rob
--------------

- The `Protocol.start()` method now returns the protocol instance (self) for convenience.
- The string representations (`__repr__`) of `Component`, `Protocol`, `NodeProtocol` and `LocalProtocol` now correctly print name parameter i.e. as `name='foo'` versus `name=foo`.

2020-04-17 Axel
---------------

- Added the `K` gate.

2020-04-16 Martijn, Rob
-----------------------

- Added the `ServiceProtocol` abstract base class, a subclass of `NodeProtocol` that defines an interface for speciying service requests and responses.
- Added an example for a simple link layer protocol to the *netsquid.examples* subpackage.

2020-04-14 Leon
--------------

- Added a way to add arguments when executing a program on a quantum processor.

2020-04-08 Leon
---------------

- Ports of subcomponents can now be directly forward output/input to/from ports of its supercomponent when being added as subcomponent

2020-04-07 Leon
---------------

- Added a `qubit_mapping` parameter to a QuantumProgram constructor to be able to concatenate programs with different numbers of qubits or different qubit mappings.
- Qubits are now discarded on Ports if nothing came to pick up the message.
- Deprecated the _components.fibres_ module.

2020-04-03 Loek, Rob
--------------------

- The protocols related to repeater with purification now each use quantum processors and support (but don't use) physical instructions.

2020-03-31 Rob
--------------

- Added a test-deploy stage to the CI pipeline to test that deploys to pypi server install using pip and pass unit tests.
- Development versions are now bumped on minor version e.g. if were are 5 commits ahead of tag v0.8.6, the version will be 0.9.dev4.

2020-03-30 Leon, Loek, Rob
--------------------------

- Table of contents and learning goals added to tutorial sections.
- Restrict port forwarding to only be possible from a component to its subcomponents (input forwarding) or supercomponent (output forwarding).

2020-03-27 Leon
---------------

- Fix bug with incorrect check if an input_link already exists when forwarding input.

2020-03-27 Leon
---------------

- Deprecated DataProtocol
- Added a DataNodeProtocol as replacement for the DataProtocol. This Protocol is more in line with NetSquid protocols

2020-03-26 Martijn, Rob
-----------------------

- Added an example module for simulating repeater chains.

2020-03-23 Leon
---------------

- Added class `Network`. The Network is a `Component` that holds and manages `Nodes` and the `Connections` between them.
- Added class `ConstrainedMapView` filters a `ConstrainedMap` based on the `ValueConstraint`s given
- Added method `filter_by_type(self, value_type)` to `ConstrainedMap`; will return a `ConstrainedMapView` with everything that is not the given type filtered out. 

2020-03-14 Rob
--------------

- Updated pyDynAA dependency minimum version to 0.3.
- The package dependencies NumPy, SciPy and Pandas now have minimum versions set. In particular, some of our C extensions are built using NumPy headers, and NumPy 1.15 was found discovered to be incompatible.

2020-03-10 Rob
--------------

- Renamed existing INSTALL.md to INSTALL-SOURCE.md and moved install instructions in README.md to INSTALL.md. Linked to these new files in the documentation.
- Moved the authors section in README.md to an AUTHORS.md file.
- The `build_py` of *setuptools* command has been overriden to prepend a comment header with LICENSE and AUTHORS (using LICENSE.md and AUTHORS.md) to all python files when building the NetSquid package.
- Further automated documentation deployment to the docs server by automatically creating new stable version directory and changing latest version symlink if needed.

2020-02-25 Rob
--------------

- Added attributes `notify_all_{input,output}` to `Port` which, in contrast to the `notify_next_{input,output}` attributes, will ensure all input and output messages schedule an event.

2020-02-24 Rob
--------------

- The KET formalism no longer does a left append when combining quantum states, as previously for special cases.

2020-02-20 Rob
--------------

- Raised minimal Python version to 3.6 (previously 3.5).
- Removed Python 3.5 docker images from gitlab CI.

2020-02-18
----------

### Martijn, Rob
 
- Moved all ket utility functions (`dagger()`, `ket2dm()`, ...) from _ketstates.py_ to _ketutil.py_.
- Added `reduced_dm()`, `partial_trace()`, `reorder_ket()`, `ket_fidelity()` for vectors, which avoids conversions to a full density matrix.
- Added `reduced_dm()` to _dmutil.py_ module.

### Leon

- Moved initializing of topologies from the QuantumProcessor constructor to the individual physical instructions constructor

2020-02-11 Loek
---------------

- Docstrings are now tested using _doctest_ when a merge request is made. You can run the tests manually by calling `make doctests` in a terminal. They are also checked when calling `make verify`.

2020-02-06
----------

### Leon

- Ports now record the meta of messages input and output through them for the current time instant, which can be checked using the methods `Port.query_meta_{input,output}`.
- Removed `protocol.AwaitCondition` and all its subclasses; yielding in protocols should be done on `EventExpression`s instead.
- Added `Protocol.await_program` method.
- Replaced `Protocol.await_sleep` (deprecated) with `Protocol.await_timer(duration, end_time)`.
- Removed `Protocol.await_evexpr` and `Protocol.await_event` methods
- Removed `Protocol.result` property.

### Rob

- Removed the previously deprecated methods and properties of `Protocol`, including `status` and methods related to callback management.

### Martijn

- `qubitapi.fidelity()` now calls `QState.fidelity()` instead of directly implementing the fidelity measurement, so each QState can implement an optimized method.
- Improved `KetState.fidelity()` by avoiding the creation of a full density matrix.
- `QState.fidelity()` supports Ket and DM reference states, and raises a `ValueError` when an invalid reference state is used. 

2020-02-03 Rob
--------------

**Patch: version 0.7.3**

- Added `instructions.INSTR_MEASURE_BELL` instruction that does Bell state measurement on two qubits.
- The `instructions.IMeasure` class now accepts optional `meas_operators` parameter, which overrides the `observable` parameter.
- Added `instructions.IMeasureBell` class (subclass of `IMeasure`) that defines the general measurement operators, but will use individual operations in the case of stabiliser formalism.
- The _examples.repeater_ module now uses the `INSTR_MEASURE_BELL` instruction.

2020-01-28 Martijn
------------------

- The `measure` method of a `QuantumMemory` supports multi-qubit measurements if the dimensions of the measurement operators match the list of qubits given. If they don't match each qubit will be measured individually. 
- The  `IMeasure` instruction also supports multi-qubit measurements, identical to the `measure` method.

2020-01-27 Martijn
------------------

- The done/fail callbacks of a `QuantumProcessor` which are called once automatically remove themselves, which avoids a call to `dismiss`. 

2020-01-23 Rob
--------------

- Removed all uses of deprecated Numpy API in cython code; added build defines `NPY_NO_DEPRECATED_API` and `NPY_1_7_API_VERSION` to setup.py. Require Cython >= 0.29.
- Stripped leading 'v' from NetSquid version returned by `version.get_version` function.
- Renamed LICENSE to LICENSE.md and included link in documentation.

2020-01-22 Rob
--------------

**Patch: version 0.7.2**

- `DataProtocol` subclasses `NodeProtocol`.
- Fixed deprecations of noise and loss models by equating them directly to their error model counterparts.
- If `error_operation` method of `QuantumErrorModel` or `ClassicalErrorModel` is not overridden it will check for a deprecated `noise_operation` method.

2020-01-20 Martijn
------------------

**Release: version 0.7.0**

- A `QuantumProgram` will only set `MemoryPosition`(s) to busy which are defined in the `qubit_mapping` when executing a program.
- When accessing a `MemoryPosition` which is busy, a `MemPositionBusyError` is raised instead of a `ProcessorBusyError`.

2020-01-17 Rob
--------------

- Imported and heavily refactored the protocols from the _NetSquid-QRepeater_ snippet into `netsquid.examples` subpackage as the example modules _entanglenodes_, _purify_, and _repeater_.
- These modules also serve as integration tests; they replace the functionality of the _external tests_ that were imported as a git submodule into `ext_tests/` (now removed).
- The example modules also contain example functions for setting up networks (as components) and simulations with data collection.
- Running `make tests` will now run the unit (`test_{...}`) and integration (`testint_{...}`) tests. To only run unittests do `make unittests` (or inversely `make inttests`).

2020-01-16 Leon
---------------

- The event_expression of AwaitConditions that are part of a MultiCondition are now updated to the first_term and second_term of the ones in `MultiCondition`. This way this event condition can be used when getting the outcome.

2020-01-15 Martijn
------------------

- The `DataCollector` now has options to disable the 'entity_name' and 'time_stamp' columns in its constructor.
- The `DataCollector` will now check for `MutableMapping` or `None` as a return value of the `get_data_function`. When returning `None` or the data (including the default columns) is empty, nothing will be appended.
- Using `set_qubit` in a `MemoryPosition` which is busy will now raise a `MemPositionBusyError`.

2020-01-14
----------

### Martijn

- Qubits in a `MemoryPosition` are now discarded when they are replaced with another qubit or `None`.
- The metadata of a `MemoryPosition` will be set to `None` if the qubit is set to `None`.
- Deprecated `__getitem__`, `__setitem__`, `__contains__` and `__delitem__` from the Node class.

### Loek

- Added `qerrormodels.QuantumErrorModel.lose_qubit` helper method to make it easier for users to create their own `QuantumErrorModel`s that can lose qubits without having to worry about the qubit being in a number state or not.
- Removed methods `prob_item_lost` and `apply_loss` from `qerrormodels.FibreLossModel`, which are now done by `error_operation`.

2020-01-13
----------

### Leon

- A protocol's subprotocols will only be started automatically if the default `Protocol.run` has not been overriden. If it has, then they must be started manually; for instance by calling the `Protocol.start_subprotocols` method, which will start all of them at once.

### Rob

- `Port` now has attributes (and constructor parameters) `always_notify_{input,output}`, which if set to True (default False), mean the port will always schedule an event on incoming or outgoing messages.
- `QuantumMemory` has besides "qin" and "qout" ports also "qin{0..n}" input ports for each individual memory position. All "qin" ports have `always_notify_input` attribute set to True.
- `QSource` has an `output_meta` attribute (and constructor parameter) that allows specifying additional meta data in its outgoing messages.
- The `ISwap` instruction no longer uses the `put` method to swap methods qubits, and thereby will no longer schedule any event.
- If the `ID` parameter of a `Node` is not given at construction, then an incremental int is chosen (starting from 0). Previously a unique (but large) int was generated.
- added "Subprotocols" custom section to sphinx docstrings so that protocols can list their subprotocols.

2020-01-10 Leon
---------------

- Added `netsquid.util.simlog.check_memory_usage` context manager that can be used to check that NetSquid does not allocate more memory than expected within a code block.

2019-12-24 Leon, Rob
--------------------

The _protocol_ module and its `Protocol` class are completely refactored (see documentation for full details):
- Protocols can now be written sequentially as well as with callbacks. The protocol is written as a generator in `Protocol.run`. 
`AwaitCondition`s  in `Protocol.run` can be yielded on. Meaning one can yield until a certain condition has been met. 
`AwaitCondition`s can be created with the `Protocol.await_*` methods.
For example it is possible to yield on ports (`await_port_input/output`), other protocols (`await_signal`) or events (`await_event`/`await_evexpr`). Once the conditions has been met the `run` will continue.
The result of the condition (for example the message on a port or the outcome of a protocol) are stored in the condition, or can be retrieved as return value of the yield:
`message = yield self.await_port_output(port, header)` will halt the protocol until a message arrives at the port, once that happens the `run` will continue with the message of the port stored in the `message` parameter.
- It is possible to wait on multiple `AwaitCondition`s with the `&` and `|` operators.

- `dataprotocols.TimedProtocol` is now a `NodeProtocol` and no longer accepts a `connection` parameter.

2019-12-20 Leon
---------------

- Made models concatenable. Most models can be added together (with the `+` operator). 
Errors or delays are applied consecutively. Can also multiply (`*`) models with an integer to apply the same model multiple times. Works in addition with addition so you can chain complex models.

2019-12-19 Leon
---------------
- Removed dependency of bitarray module
- Moved all bit encodings to NetSquid-BitEncoding snippet.
- Bit encoding has moved from `netsquid.components.ccoding` to `netsquid_bitencoding.bitcoding`
- Bit noise models have moved from `netsquid.components.models.cnoisemodels` to `netsquid_bitencoding.bitnoisemodels`

2019-12-17 Leon
---------------

- Add a general `Models` parameter in all subclasses of `Component`, to be in line with the base `Component` class. This parameter accepts a dictionary of models.
- Other parameters that specified parameters for a model are deprecated.
- Main affected components are subclasses of `Channel` with their `delay_model` and `classical/quantum_noise/loss_model`, and the `QSource`.

2019-12-16 Loek
---------------

- Restructured the model modules. Model now has two subclasses `ErrorModel` and `DelayModel`. An `ErrorModel` can be both a loss or noise model to be able to allow a `Component` to check for an `ErrorModel` in general instead of a `LossModel` or `NoiseModel` specifically. The `ErrorModel` checks its input is a list of items.
- Introduced two subclasses of `ErrorModel`: `QuantumErrorModel` and `ClassicalErrorModel`. The first checks its input to be a list of only `Qubit`s or None, while the latter checks that there are no `Qubit`s in its list of items.
- Deprecated `LossModel` and moved `FibreLossModel` to the `QuantumErrorModel` module.
- `DepolarNoiseModel`, `DephaseNoiseModel` and `T1T2NoiseModel` now have an `error_operation()` instead of `noise_operation`.

2019-12-14 Rob
--------------

- Updated pyDynAA requirement to v0.2.2 patch, which adds `EventExpression.triggered_events` property that gives a sorted listed of triggered event. The `EventExpression.triggered_event` property is deprecated.
- `DataCollector` now collects the last triggered event of an event expression (previously only stored an event atomic expressions).

2019-12-12 Leon
---------------

- The `StateSampler` is now automatically flattened and combines samples with same label and state (in case of equal formalism) at construction.
- It is now possible to convert states in a `StateSampler` to a requested formalism at initialization using the `formalism` parameter.
- Added a `reduce_states` method which reduces all density matrices with the same label into one. Convert states to dm formalism first if you want to reduce stabilizer and ket states as well.
- Changed returned labels in state sampler to not always return tuples, only if additional `StateSampler`s were supplied in the constructor.

2019-12-09
----------

### Leon

- Added support for representing `Operator`s using sparse matrices in _opmath_ and _operators_ modules.
- Padding matrices automatically use either sparse or dense based on a threshold (set at 5)
- Optimized logic in _opmath_ to create SWAP matrices for padding.

### Rob

- `qubitapi.fidelity()` function has `reference_ket` parameter renamed to `reference_state`. The reference state can now also be a density matrix. Docstrings now include definition of fidelity.
- Moved sparse matrix methods from _opmath_ into new _qubits.sparseutil_ module. This avoids circular imports.
- Added a `Operator.use_sparse` property, which is set to True if operator is constructed using a sparse matrix, and can be toggled.
- If `use_sparse` is True, all methods of operator will, where possible, use sparse matrices and avoid conversions to a dense matrix.

2019-12-06
----------

### Loek

- Update `DataCollector` with refactored `pydynaa.EventExpression` with e.g. not having to reset the `wait()` after an `EventExpression` triggered data collection.

### Rob

- Support for `DataCollector.get_data_function` to use callback functions that take an event expression parameter rather than an event.
- Required pyDynAA version updated to v0.2, which includes a re-design of event expressions. See the pyDynAA CHANGELOG for full details.
- Event expressions should be _waited_ on using entities and a `pydynaa.ExpressionHandler`, similarly to how events are waited on, e.g. `entity._wait{_once}(handler, expression=evexpr)`. Continuous waiting is supported.
- Expression handlers can be dismissed using an entity e.g. `entity._dismiss(handler, expression=evexpr)` or `entity._dismiss(handler)`.
- Expression handlers are a subclass of `EventHandler` that wrap a callback function that has as its single parameter the triggering event expression (instead of the triggering event as for event handlers).
- Expressions handlers can be re-used to wait on multiple event expressions (the same also holds for event handlers).
- Multiple expression handlers can wait on the the same event expression. They will be executed in order of their priority, if any.
- Atomic event expressions store a copy of the event that triggered them in the `EventExpression.triggered_event` attribute.
- The `ExpressionHandler.wait()` method is deprecated.

2019-11-18 Rob
--------------

- Added support for Python 3.8 to CI pipeline.
- Version module also finds version tags not in direct history of the current branch.

2019-11-5 Rob
-------------

- The _netsquid.pydynaa_ sub-package has been replaced by an independent package dependency, _pydynaa_, which must be **installed separately**.
- The _netsquid.pydynaa_ sub-package is deprecated using a dummy module so that the reference will still work (for now). To avoid additional overhead it is **recommended** to switch to importing directly from the _pydynaa_ package as soon as possible.
- Both the setup and install package requirements are read in from `requirements.txt`. The install requirements are at the start of the file and end with a seperator comment.

2019-11-4 Rob
-------------

- Moved `version.py` out of _netsquid_ package into repository root directory.
- The version is now automatically calculated from the latest version tag in the Git branch's history. If HEAD is ahead of the last version tag `vX.Y.Z` by `N > 0` commits, then the is version bumped up to the development version: `vX.Y.{Z+1}.dev{N-1}+{commit hash}`.
- The package version is now automatically stored in generated `netsquid/version.txt` file (untracked).

2019-11-2 Loek
--------------

- `LossModel` now takes a list of items instead of a single item as input and modifies this list in place without returning anything.
- `preprocess_inputs` method of `QuantumChannel` and `ClassicalChannel` refactored to use the modified loss model.

2019-11-1 Rob
-------------

**Patch: version 0.6.3**

- Documentation is now included in the NetSquid binary wheel package. The make target `bdist` ensures the documentation is built first. The `bpkg` make target has been removed.
- Code to deploy the binary wheel file and documentation to the servers has been moved from the Makefile into setup.py

2019-10-29 Loek
---------------

- `MemoryPosition` can now be reset even when it is busy to make it easier to reset a simulation with multiple memories running in parallel.

2019-10-28 Rob
--------------

- `DataCollector` has a `databuffer` property for accessing the list of data collected since the last call to dataframe i.e. before its conversion into a dataframe.
- Input checking and docstrings improved for several methods and attributes of `DataCollector`.

2019-10-21 Leon
---------------

- Renamed `ProtectedMap` to `ConstrainedMap` and moved it to `util.constrainedmap`. It is now possible to set a `ValueConstraint` to check if values are valid.
- Immutable objects now raise a `ImmutabilityError` when attempted to be changed, instead of an `AttributeError`.
- `setter_fn` functionality of `ConstrainedMap` is now encapsulated in a list of global constraints in the ConstrainedMap.

2019-10-17 Rob
--------------

- Deprecated callback management methods and functionality of `Node`. `Protocol` callback management can be used instead.

2019-10-10 Leon
---------------

**Patch: version 0.6.2**

- Renamed `noise_models` to `memory_noise_models` (former is now deprecated) and added a `models` parameter in the init of `QuantumMemory`.

2019-10-08 Loek
---------------

- Fix memory leakage (found by David M and Julien) in `QSource` where internal dictionaries were not cleared after each emission.

2019-10-07 Guus, Loek
---------------------

- Added `IEmit` `Instruction` that emits a qubit entangled with a qubit on the `QuantumMemory` when this latter qubit was in state |0>.

2019-09-30 Rob
--------------

**Patch: version 0.6.1**

- Several minor bug fixes.
- `cysignals` added as an install dependency in _setup.py_ (previously only a setup dependency).

2019-09-18 Loek
---------------

- Minor change to the `Clock` component: instead of taking a `delay` as argument of the `start` method, a `start_delay` can be passed to the constructor and will be stored as a property of the clock. To change the delay, the user can edit this property via `Clock.properties["start_delay"]`.

2019-09-16
----------

**Release: version 0.6.0**

### Loek

- `QSource` is completely refactored. The source can now create an arbitrary number of qubits and put them on any number of output ports. The source can be either in internal or external mode, meaning it will either be triggered to start an emission by its internal clock (see `Clock` below) or by a message on its trigger port.
- Added the `Clock` class which presents messages on its "cout" port at times specified by frequency or a timing model of type `DelayModel`. Based on the work of David M in the NL Blueprint team.

### Rob

- Properties passed via the _properties_ parameter of the `QuantumMemory` constructor are also assigned to each of its memory positions.
- Renamed `QuantumMemory.emit()` back to `pop()`, as latter is more general (and familiar). The `emit()` method is now deprecated.
- The `pop()` method of `QuantumMemory` now has the optional parameter `meta_data` for specifying additional meta data to add to an outgoing message (overrides existing meta).
- Added _qubits.qformalism_ module that now houses `QFormalism` enum class and related functions including `{get,set}_qstate_formalism` and `convert_qstate` (formerly `convert_qstate_formalism`). It also has the new function `convert_qsrepr`.
- The `StateSampler` has a method `convert_states(formalism=None)` that recursively converts all leaf states to a format matching the specified qstate formalism.
- Removed several formerly deprecated functions from `Component`, `Channel` and `QuantumMemory`.

2019-09-10 Rob
--------------

- `Component` docstrings can have fields _Ports_, _Models_, _Subcomponents_, and _Properties_.
- All attributes for ports and models have been deprecated in favour of access via respective maps, including `Channel.port_{send,recv}`, `QuantumMemory.port_{qin,qout}`, `Channel.delay_model`, `QuantumChannel.{quantum_noise_model,quantum_loss_model}`, etc.

2019-09-09 Ariana, Rob
----------------------

- Added the `ProtectedMap` class (called `Container` during development), a subclass of `collections.Mapping` that behaves like a dict but with restricted set and delete methods, and with support for tracking the _type_ and _mutability_ of each item.
- The `Component` collections _ports_, _properties_, _subcomponents_, and _models_ are stored using a `ProtectedMap` object. The `Component` methods `_add_ports`, `add_property`, `add_subcomponent`, and `specify_model` can mutate their respective maps.
- The `Component` constructor has an optional `models` dict parameter that can be used to specify and set models.
- Component subclasses using models (`Channel`, `QuantumMemory`, `MemoryPosition`, etc.) now use the _models_ map instead of private variables.
- `QuantumMemory` methods `get_noise_model` and `set_noise_model` are deprecated. Use the _models_ property of the memory position subcomponents instead.
- `Component` method `get_subcomponent` is deprecated.
- `Channel` methods `register_handler` and `clear_handler` and property `length` deprecated.

2019-09-06 Rob
--------------

- QState quantum operations now do debug logging, recording the operation type and size of the quantum state.
- The `sim_run()` function now does info (level `INFO`) logging before and after each run. This includes wallclock times and timeline status before and after (events, registered handlers).
- Module _util.simstats_ added with the class `SimStats`, including a context manager method `record()`. It is used by `sim_run()` to record a variety of simulation stats, such as number of triggered events, called handlers, quantum operations stats (as above), etc.
- The `sim_run()` function returns a `SimStats` object which contains the recorded data; printing the object gives a convenient summary.
- The root netsquid logger has been moved from _util.simtools_ to _util.simlog_ modules. The methods `set_console_debug` and `set_console_log` are now deprecated (use `logger.setLevel` instead).
- NetSquid modules now define their own loggers. All netsquid package loggers can be accessed via the `util.simlog.get_loggers()` function. This is useful, for example, to tune which modules you wish to debug.

2019-08-30 Rob
--------------

- Added ports "qin" and "qout" to `QuantumMemory`, which replace the "qubitIO" port.
- Added the method `emit` to `QuantumMemory`, which extracts qubits from memory positions into a message on the `qout` port. This deprecates `pop` method.
- Added `emission_noise_model` and `absorption_noise_model` to `QuantumMemory` for output and input noise respectively.
- Made each `MemoryPosition` a `Component`, which are held as subcomponents of `QuantumMemory` and available via the `mem_positions` property.
- `MemoryPosition` has a `meta` property for holding arbitrary meta information for the held qubit. This meta is adopted from input messages and merged into output messages.
- Added the `QuantumMemory` methods `get_matching_qubits` and `get_matching_positions`. Deprecated the methods `get_positions_of_event`, `get_put_event`, `get_positions_for_type`, and `get_qubit_type`.
- Deprecated `put_event` parameter for the `peek` method of `QuantumMemory`.

2019-08-26 Rob
--------------

- The simulation engine of _pydynaa_ has improved signal handling, including keyboard interrupts (CTRL-C). It also behaves more robustly on python callback exceptions.
- `cysignals` is an added python package dependency for building NetSquid/pydynaa from source.

2019-08-16 Rob
--------------

- `Component` has a `supercomponent` property that refers to its parent composite component if present, otherwise None.
- `Component.components` property is deprecated by the `Component.subcomponents` property that returns a list of (name,component) tuples. The method `Component.get_subcomponent` can be used for O(1) lookup by name.
- Added the methods `has_supercomponent` and `has_subcomponent` to `Component` for checking if a component is a super or sub component at any depth. These help to prevent circular hierachies when adding subcomponents.
- Renamed `Component` method `add_component` to `add_subcomponent` -- former is deprecated.
- Added the method `rem_subcomponent` to `Component` for removing subcomponents.
- The `Component` constructor takes an optional `subcomponents` parameter specifying subcomponents to be added.
- The ports of subcomponents can only be _connected_ if they have the same supercomponent (parent). This ensures that a component's ports are its only IO interface; subcomponents must use _forwarding_ to communicate beyond their supercomponent.

- The _netsquid.simutil_ module has been moved to _netsquid.util.simtools_. The former location is deprecated.

- Ports do debug logging of transmitted input and output messages (`tx_input` and `tx_output` methods). This replaces debug logging of Channel send and receive.
- Added `__repr__` to `Message` class.
- Added `__repr__` to classes `Qubit`, `QState`, `KetState`, `DMState`, `StabState`, which replace existing `__str__` in each case.

2019-08-14 Rob
--------------

- `Component` constructor takes the optional `port_names` parameter that specifies ports to be added. The composite component `Node` also uses this parameter.
- Most of the component subclasses now take the optional `properties` parameter.

2019-07-12 Rob
--------------

- Memory positions can now be toggled to `in_use` (via `QuantumMemory.set_position_used`) also if they do not hold a qubit.

2019-07-10 Rob
--------------

- Added the property `Operator.inv` that returns the inverse version of an operator.
- Added the property `Operator.conj` that returns the complex conjugated version of an operator.
- `Operator.controlled` property renamed to `Operator.ctrl`. Former is now deprecated.
- `Operator` equality operators (`__eq__` and `__neq__`) now check if matrix representations are (almost) equal. To check for identical objects use `is`.

2019-07-09 Axel, Rob
--------------------

- Added `qubits.state_sampler.StateSampler` class, which can sample between quantum state representations by assigning a probability to each. It is itself also a valid representation, so that a state sampler can hold a tree of states to arbitrary depth.
- `qubitapi.assign_qstate` function accepts also `StateSampler` for its `qs_repr` parameter.

2019-07-05
----------

### David M

- Added possibility to pass properties when initiating `qmemory`.

### Rob

- Added `ket2stabilizer` function to _stabtools_ module that converts selected 1 and 2 qubit ket vectors to Stabilizer objects.
- `assign_qstate` function in _qubitapi_ module now supports the above conversion to stabilizer objects.Useful, for example, for assigning a stabilizer bell state using the `ketstates.b00` ket state, or for assigning from a density matrix mixture of supported stabilizer states.

2019-07-04 Rob
--------------

- Renamed parameter `qs_reprn` to `qs_repr` in `qubitapi.assign_qstate` function.

2019-07-02 Rob
--------------

- It's now possible to combine the quantum states of qubits with heterogeneous formalisms. The conversion to the current formalism is handled automatically (via `combine_qubits` function). Conversion from ket or dm to stabilizer representation is not yet implemented.
- Added the function `convert_qstate_formalism` to the _qubitapi_ module to support quantum state formalism conversion.
- The `QFormalism` enum now has the formalism classes (`KetState`, etc.) as values inplace of strings.
- The `QState` class has a `qubits` attribute which returns a list of qubits sharing the state, which are sorted according to the current data representation.

- `multi_operate` function in _qubitapi_ supports also pure state KET formalism by using sampling.
- Added `multi_operate_qubits` method to `KetState` and `QState`.
- Added `multi_operate_dm` function to _opmath_ module.

2019-07-01 Rob
--------------

- Added the methods `measure` and `generator_to_matrix` to `Stabilizer` class. Refactored (Cython) implementation of _stabtools_ module.

2019-06-28 Rob
--------------

- Added functions `dm2kets` and `sample_ket_from_dm` to _ketstates_ module. These use an eigendecomposition to convert a density matrix into pure states.
- Added `assign_qstate(qubits, state, formalism=None)` function to _qubitapi_ module that allows assigning a custom quantum state to existing qubits. This can be a ket array, dm array, or `Stabilizer`, and will be assigned to the created qubits using the current (or a specified) QFormalism.
- Added a `no_state` parameter to the `create_qubits` function in _qubitapi_ module, which if True will not assign the default `|0>` states to the created qubits (for use with `assign_qstate`).
- The `StabState` class constructor now takes a `Stabilizer` representation object instead of a check matrix with phases (the latter parameters are deprecated).
- The `Stabilizer` class no longer has setters for its check matrix and phases, which means it is no longer possible to change its size. Create a new object instead.
- The `row_reduce` methods of `Stabilizer` class is now publicly accessible from Python.
- In `QState` constructor a warning is no longer logged when the quantum state of qubit is overridden by a new quantum state. It is still discarded from the old state.

2019-06-21 Rob
--------------

**Patch: version 0.5.2**

- The callback function specified by a `QuantumProgram` to a `QuantumProcessor` (via `ProgramInstruction`) now expects its _output_ to be given as a parameter. This fixes a bug in concatenated programs, where the callback's reference to output was incorrect in some cases.

2019-06-17 Loek, Rob
--------------------

- The `IInit` instruction (of which an `INSTR_INIT` is an instance) now has `num_positions` as optional argument at initialization. By default the instruction can initialize any number of positions,
but if `num_positions` is set at initialization, the number of positions and qubits given at execution should match `num_positions`.
- When calling `IInit` `Instruction` the `positions` argument is now optional. If it is empty, all positions will be initialised e.g. by calling `INSTR_INIT(quantum_memory)`. The `qubit` argument has been deprecated and renamed to `qubits`, which should be an optional list of qubits.
- The `QuantumMemory` methods `create_qubits()` and `create_qubits_at()` have been deprecated. The `put()` method can be used instead, or an instruction.

2019-06-05 Rob
--------------

- The `QuantumMemory` now also accepts None as input inplace of `Qubit`s, both via port messages and the `put()` method. A None qubit will override an existing qubit if present.

2019-05-31 Rob
--------------

**Patch: version 0.5.1**

2019-05-24 Rob
--------------

- `QuantumMemory` now passes its _properties_ when calling the noise model(s) on its memory position(s), and also makes use of the model `validate()` method.
- The number of memory positions on a quantum memory is now stored as "num_positions" in the _properties_ attribute (it should not be changed).
- The `validate()` method of `Model` now returns False when validation fails (instead of raising an exception). The component calling this method can raise a ValueError, as the channels and quantum memory currently do.

2019-05-23 Rob
--------------

- _pydynaa_ has been updated so that simulation `Entity`s are now automatically garbage collected (GC) by python i.e. it is no longer needed to use the `remove()` method to allow GC (though it still exists). **Note** that GC can happen from the moment an entity leaves scope, which is irrespective of whether it is the source of any events still on the simulation engine (these only hold a weak reference to it).
- `Channel` methods `delay_mean` and `delay_std` have been revived from deprecation.

2019-05-21 Rob
--------------

- The `DepolarNoiseModel` has the new attribute (and constructor parameter) `time_independent`. If True (default False), the `depolar_rate` is applied as a probability that is independent of the `delta_time` given to the model.
- Similarly to above, a `DephaseNoiseModel` has been added.
- A `delay_dephase` function has been added to the _qubitapi_ module (an analogue of `delay_depolarize`.

2019-05-11 Loek
---------------

**Release: version 0.5.0**


2019-05-09 Rob
--------------

- Changed debug logging for `Channel`: if a message has more than 5 items, the length of the list is logged rather than the whole list of items (using `str(item)`).

2019-05-07
----------

### Ariana

- Created the _netsquid.components.models_ subpackage where the modules _qnoisemodels_, _cnoisemodels_, _lossmodels_, and _delaymodels_ have been moved to. Removed the existing and deprecated _models_ module.
- Created `Model` class, an abstract base class for all models.
- Added `model.properties` and `model._required_properties` to all models.
- Added `properties` attribute to components, which is meant to be passed to
  the models when a model is called.
- Adapted the models to take `**kwargs` in the call function.
- Added method `compute_model` to the models; `compute_model` is returned when a method is called. The `compute_model` in turn returns the _main_ function of a model.

### Loek, Rob

- Added the `netsquid.util` subpackage, which replace `netsquid.cyutil`. It contains a new `DataCollector` clas that can collect data when triggered by events. The data is stored in a `pandas.DataFrame` which can be used for further processing the data (e.g. plotting or exporting to a different file format).
- The `DataCollector` uses a new _prioritized wait_ feature of pydynaa (not yet merged into `develop` branch) so that its event handler(s) are ensured to be the first to handle an event. We regard this behaviour as _special_ and recommend against using priority waits in simulations in general.

2019-5-6 Rob
------------

Addition of `Port`s to `Component`s:
- `Port`s provide a gateway interface to easily connect components, and build composite components from sub-components. New functionality includes _connecting_ and _forwarding_ ports, and _binding_ handler functions to ports. See docstring API documentation for more details.
- Ports transmit and receive `Message` objects, which contain _items_ (general payload) and an optional _meta_ dict.
- Ports are held by `Component`\s. They can be accessed using the `ports` dict attribute, and added using the `add_ports` method.
- `Component`\s can hold subcomponents. These are added with `add_component` and accessed via the `components` dict.
- Resetting a component resets all subcomponents and held ports.

The new _ports_ functionality has been added to:
- The `Channel` class (and subclasses), which define a "send" and "receive" port. The `send()`, `peek()`, and `receive()` methods still work as before, but also now use ports and `Message` object internally.
- The `QuantumMemory` class (and `QuantumProcessor` subclass), which defines a "qubitIO" port. The `put()` method works as before, but uses this port internally. A message containing a list of qubits will be _put_ in the same order onto memory positions. See documentation for more details.
- The `Connection` base class (a component) defines the remote ports "A" and "B".
- The `DirectConnection` class is a composite component that internally holds two one-way channels that forward their port input and output to the "A" and "B" ports.
- The `Node` in a composite component, and its usual quantum memory is now managed as a subcomponent. It can `connect_to` other nodes using `Connection`s, which are connected by adding new ports to both nodes. A connected port can be accessed using `get_conn_port(remote_ID, label='')`.

Several features of the `Channel` class have been deprecated:
- `transmit_empty_items` is now an object flag rather than `send()` parameter (also a constructor parameter).
- `ready_evtype` is removed from `send()`: only the default `Channel.evtype_outputready` is possible, which is equal to `Port.evtype_output`.
- Concept of channel _bandwidth_ is no longer supported (its reference is deprecated) and `ChannelBandwidthError` removed because it is no longer used.
- The `key` parameter renamed to `header` in _send_, _receive_ and _peek_. It is implemented in `Message` as a meta data field.
- Deprecated `append` parameter of `send()` method (now always true). Messages at the same instant are now always appended.
- As a result of always appending, the `pulse_interval` attribute is removed.
- `output_no_wait` and `warn_on_discard` properties are no longer supported (references deprecated).
- `delay_mean` and `delay_std` are deprecated.

Several features related to nodes have been deprecated:
- The entire _nodeapi_ module and its functions `create_nodes` and `link_nodes` are deprecated in favour of using `Node()` constructor and the new `Node.connect_to` method.
- The `Node` _send/receive_ and _store/retrieve_ methods for items and qubits are all deprecated in favour of directly using ports and `components`/`qmemory` attributes.

2019-4-23 Rob
-------------

Changes to `QuantumMemory`:
- Concept of _in use_ now differs from the position being _empty_. Toggling a qubit to _not used_ will leave the qubit on the memory. Toggling an empty position to _used_ will raise an error. Setting or removing a qubit still toggle _used_ status as before.
- When a qubit is replaced on a memory position the replaced qubit now has memory noise applied up to the time of replacement (it is still not _discarded_ i.e. it remains in its shared quantum state).
- `position_in_use` method renamed to `get_position_used` (former deprecated). Also added `set_position_used` method.
- `get_position_empty` method  returns whether memory position is empty.
- `empty_positions` property replaced by `unused_positions` (former deprecated).

2019-4-19 Rob
-------------

- Converted to using numpy `array` everywhere instead of `matrix`, as the latter is pending deprecation by numpy. **Note:** to do matrix multiplication between arrays use `@` (`*` does element wise multiplication).
- The ket vectors in _ketstates_ module are now also numpy arrays.
- Added helper functions `dagger(array)` (conjugate transpose), `innerprod(ket)`, `outerprod(ket)`, and `ket2dm(ket)` to _ketstates_ module.
- `Operator.mat` property has been deprecated. Use `Operator.arr` to get an array instead.
- `operate_dm` function moved from _dmutil_ to _opmath_. Added analogous `operate_ket` function.

2019-4-5 Leon
-------------

- Added some extra failure checks on `QuantumMemoryError` an business in `QuantumProcessor` when running programs

2019-3-25 Loek
-------------

- Added extra standard operators `Rx90`, `Rx180` and `Rx270` (and 'y' and 'z' equivalents).
- `IRotationGate` now checks if the tuple `(axis, angle)` exists in a class variable (`_standard_rotation_ops`) to reuse above standard rotation operators.


2019-3-12 Rob
-------------

- Added `operate_dm` function to `dmutil` that more efficiently does operator conjugation for density matrices.
- Added `sparse_mul_dense_matrix` and `sparse_fast_conj` helper functions to `opmath` module.

2019-3-8 Loek
-------------

- Add `Operator.controlled` variable returning the controlled version of this operator.
- Deprecated `create_controlled_op`, use `Operator.controlled` property instead.
- Changed naming of controlled operators from e.g. `C[X]` to `CX`.
- Add extra standard operators and instructions for `CX`, `CCX` and `TOFFOLI`.
- The `Operator.protect` mechanism is now removed. Operators are no longer compared by their names (str) but based on object reference.

2019-2-19 Rob
-------------

- Changes to how `Stabilizer` class represents its quantum state: the combination (x=1,z=1) in the _check matrix_ now represents Y (formerly X*Z). As a result the _phases_ array is purely real (storing only +1/-1).
- The private method `Stabilizer._multiply_rows` is no longer accessible from Python (now purely C). A public `Stabilizer._multiply_rows` method that wraps it is added.
- Internal methods in `stabtools` have been greatly optimized in C/Cython, making it **much faster** (10-100x, see [this comment](https://ci.tno.nl/gitlab/QuTech/NetSQUID/issues/161#note_57898)).
- `Operator` no longer has the `clifford_transform` method. This functionality has migrated to `stabtools` module as a private function.
- Similarly, `Operator.padded_matrix` method is _deprecated_ and the corresponding function has been moved to `opmath`.
- `Operator` now has a method `get_cache(cache_id)` that returns an `LruCache` for the given id. It replace the private caches that were reserved for `clifford_transform` and `padded_matrix`.
- The modules `qubitapi`, `operators`, and `qubit` converted to pure python ("decythonized"). Computationally intensive code has been moved to the new `opmath` cython module.
- The `sparse_kron_identity_{left,right,middle}` functions have been moved from `cymath` to `opmath`.
- The variable `sparse_padding_threshold` has been moved from `operators` to `opmath` module.

2019-2-13
---------

### Loek, Rob

- The _stabtools_ module has been fully converted to Cython. The profiled speed-up for the `STAB_FORMALISM` is about a factor of two.
- `StabState` no longer inherits from `Stabilizer` but uses composition: it has a `stabilizer` attribute of type `Stabilizer`. This was needed to make the `StabState` a Cython extension type (no multiple inheritance allowed in Cython).

### Leon, Rob

- Added a `sequence_end_time` property to the `qprocessor` that returns the end time of the currently executing sequence of instructions. If no program is executing (processor is not _busy_) the current time is returned.

2019-2-12 Rob
-------------

- Exceptions raised in handler callback functions are now properly propagated from C++ to Python (update in pydynaa).
- `QuantumProcessor.busy` attribute is true if the processor has status `ProcessorStatus.PAUSED`, as well as `ProcessorStatus.RUNNING`.
- `QuantumProcessor.execute_program` has a boolean `error_on_fail` paramater. If True (default is False) the exception causing a quantum program to fail will be raised (instead of only recorded), causing the simulation run to exit. The `qprocessor` module also has a global `error_on_program_fail` boolean flag (default False), which if set to True will always raise such exceptions.
- `QuantumProcesser.stop_program` method no longer has the (optional) `fail` parameter. Failure is now indicated by setting the (optional) `fail_exception` parameter (default None) to an exception object.
- `QuantumProcessor.failure_exception` attribute is renamed to `fail_exception` (shorter and consistent with other naming); the former is now deprecated.

2019-2-11 Rob
-------------

- When manually constructing a `QState` (e.g. `DMState`, `KetState`, etc.) it is checked if the qubits already share a non-trivial quantum state. If so, they are first discarded (dropped) from this state, and a warning is printed.

2019-1-29 Rob
-------------

**Patch: version 0.4.2**

- Added `netsquid/version.py` for single-source versioning within the repository. The attribute `netsquid.__version__` also gives the version number (e.g. 0.4.2).
- Gitlab CI now uses *version* rather than *branch name* for naming downloadable pipeline artefacts.

2019-1-28 Loek
--------------

- `QuantumProcessor` now re-peeks qubits after applying an instruction to allow for applying noise to newly created qubits (e.g. after `INSTR_INIT`)

2019-1-17 Rob
-------------

- `make bdist` target now first calls `gitmodules` target.
- Bug fix for `dmutil.reorder_dm()` ( used by `fidelity()` and `reduced_dm()` in *qubitapi* module): it was missing a final transpose, which makes a difference if the DM has complex elements.

2018-12-14 Rob
--------------

**Patch: version 0.4.1**

- The `qubitapi.QFormalism` enumerated class replaces the module variables `KET_FORMALISM`, `DM_FORMALISM`, and `STAB_FORMALISM` with `QFormalism.KET`, `QFormalism.DM`, and `QFormalism.STAB`, respectively. The former are deprecated.
- `qprocessor.ProcessorStatus` enumerated class replaces the class variables of `QuantumProcessor`: `STATUS_{IDLE,RUNNING,FAILED,PAUSED}` with `ProcessorStatus.{IDLE,RUNNING,FAILED,PAUSED}`.

2018-12-12 Rob
--------------

**Release: version 0.4.0**

2018-12-10 Rob
--------------

- The `ClassicalChannel` has been generalized beyond encoding only to bitstreams. Loss and noise models are now applied also if no encoding specified.
- Added a general `ccoding.CodedItem` interface class, which is subclassed by `ccoding.BitCodedItem`. The latter deprecates `ClassicalCodedObject`.
- `ClassicalCoded{Bytes,Integer,String,Bitarray}` are deprecated by `BitCoded{...}`.
- Loss of encoded items handled by the `CodedItem.apply_loss_model` method. `BitCodedItem.apply_loss_model` now processes the loss of individual items instead of the `ClassicalChannel`.

2018-12-9 Rob
-------------

- `Node` now has an ID, which if not specified at initialization takes a random unique integer value.
- Added `QuantumMemory.empty_positions()` method that returns of empty memory positions.
- `Protocol` callback methods renamed to remove _nonlocal_ (former method names deprecated).
- `protocols.dataprotocols` module added with `DataProtocol` (formerly EasyProtocol) and `TimedProtocol` imported from EasySquid.
- `Node` now has `qmemory` attribute (and init parameter) that gives direct access to the primary quantum memory component. The `qmem` attribute is deprecated.
- Node's `store_qubit` and `retrieve_qubit` methods now interact with the primary quantum memory, and use memory position instead of strings to index qubits.
- `Node` methods `qmemory_empty` and `num_qmemory` deprecated.
- `nodes.connections` module added with a _stub_ `Connection` class. Fully functional connections are pending inclusion.

2018-12-8 Tim
-------------

- The `ccoding.ClassicalCodingFactory` is now a general interface, and the bitstream coding factory is renamed to `BitCodingFactory`.
- `ClassicalChannel` has no default coding factory (`classical_coding=None`).

2018-12-4 Rob
-------------

- Protocols related to filtering and repeaters have been moved to the separate [NetSquid-QRepeater](https://ci.tno.nl/gitlab/QuTech/netsquid-qrepeater) snippet. Specifically: _entanglenodes.py_, _filter.py_, _distil.py_, _repeater.py_, _recordfidelity.py_, _filterexpt.py_, _repeaterexpt.py_ and _distilrepeaterexpt.py_ -- along with their unit tests.
- The filter, repeater, and recurrence _examples_ have also been moved to the separate snippet, as has the `tutorial/`, which relied on these protocols. The profiling examples have been moved to `profiling/`. The discrete event example does no yet have a new home.
- Because these protocols served as integration tests for NetSquid, the above snippet is imported as a git submodule in the `ext_tests/` directory. The tests can be run with `make exttests`, and are included in the continuous integration pipeline (_.gitlab-ci.yml_).
- All tests have been organized into separate `tests/` directories within the netsquid (sub)package(s). This is done to clean up these namespaces.

2018-11-23
----------

### Loek

- `QuantumMemory` has a `signal` method that will schedule an event of a given type. The default event type is `evtype_signal_default`, a class variable, but a custom type can also be specified.
- Added a `INSTR_SIGNAL` that calls the `signal` method. Acts on zero qubits.
- `QuantumProcessor.get_finished_instr` has been changed to `get_finished_instrs` (i.e. plural). Instead of giving only the instruction related to a specific event, this method returns all finished instructions with their end times in a list of tuples.
- To allow `get_finished_instrs` to be usable after a program is finished (e.g. to check all the finished instructions), we do not clear the list of finished instructions in `stop_program` anymore. The list is cleared when calling `execute_program`.
- `QuantumProcessor` does not have a class variable `evtype_job_finished` anymore, as this is not needed with the new `get_finished_instrs`.

### Rob

- The `QuantumProgram.load()` method can be used within a program to load and run another program via `yield from self.load(other_program)`. The loaded program can be either a class or an instance.
- Quantum programs can be concatenated using the addition operator: `prog3 = prog2 + prog3`. Either operand can be a class (though at least one should be an instance).
- A new quantum program can be made by repeatedly concatenating another program using the multiplication operator e.g. `prog2 = prog1 * 5` or `prog2 = 5 * prog1`.
- `operators.CPHASE` renamed to `operators.CS` to avoid confusion.
- `QuantumProgram.apply()` has default parameter of `qubit_indices=None`, which means instruction acts on no memory positions.
- It is now possible to assign physical instructions on a quantum processor to a null topology `[()]`, meaning they act on no memory positions -- this is distinct to the wild card topology specified with `None`.

2018-11-22 Rob
--------------

- In `QuantumProcessor` a `MissingInstructionError` occurring during program execution will stop and fail the program, rather than raise the exception. The exception is still raised when executing a single instruction, or requesting the duration of a program.

2018-11-16 Leon
---------------

- `QuantumProcessor` has a `status` property with a corresponding `_status` attribute : an int that indicates the current status of the `QuantumProcessor`, either `STATUS_IDLE`, `STATUS_RUNNING`, `STATUS_FAILED` or `STATUS_PAUSED`. These are class variables of the `QuantumProcessor`. Replaces `_failed` and `_locked`.
- `QuantumProcessor` has a `failure_exception` property : to access the Exception that made the last quantum program to fail.
- `QuantumProcessor` has a `set_program_fail_callback` method : same functionality as `set_program_done_callback` except the callback is executed when the program fails.
- `QuantumProcessor` has a class variable `evtype_job_finished`. An `EventType` that is scheduled when a job finishes.
- `QuantumProcessor` has a `get_finished_instr` method : takes an `Event` created by `QuantumProcessor._handle_job`. It returns the corresponding `Instruction` from the finished `_Job`.
- Added a `instruction` field to `_Job` that was used to schedule the job.

2018-11-13 Rob
--------------

- `QuantumProcessor` has a `super_instructions` attribute (+ constructor parameter): a dict that specifies instruction hierarchies for matching physical instructions.
- `QuantumProcessor` has a `fallback_to_nonphysical` boolean attribute. If True, instructions are executed non-physically if they can not be matched to a physical instruction.

2018-11-8 Rob
-------------

- `QuantumProcessor` has a `set_program_done_callback()` helper method to set a waiting callback for a successful program.
- It is possible to specify whether an instruction is `physical` (boolean) in `QuantumProgram.apply()`. Non-physical instructions are instant and noiseless on a quantum processor (and don't require a matching PhysicalInstruction).
- If an `InstructionError` is raised during the execution of an `Instruction`, the quantum processor will terminate the currently running program.
- An `Instruction` can have `num_positions=-1`, which means it can act on an arbitrary number of positions.

2018-11-1 Rob
-------------

- `PhysicalInstruction` makes a distinction between quantum and classical noise models (`{q,c}_noise_model` attributes). The latter are applied to the output of instructions e.g. a measurement instruction.

2018-10-29 Rob
--------------

- `qubitapi.measure()` and `qstate.measure_qubit()` now return an _int_ (0/1) instead of a _bool_ (True/False) to represent a positive/negative eigenvalue result.
- `QuantumMemory.measure()` likewise now returns a list of ints.
- `QuantumMemory` supports a _qubit\_type_ for each memory position. The constructor has a _qubit_types_ parameter, and the methods _get_qubit_type()_ and _get_positions_for_type()_.

2018-10-23 Rob
--------------

- Added `components.instructions.Instruction`s, which can be executed on the memory positions of `QuantumMemory`
- Added `components.qprogram.QuantumProgram`, a sequence of instructions, with support for control logic (using yield statements) and parallel execution.
- Added `components.qprocessor.QuantumProcessor`, a subclass of `QuantumMemory` supporting execution of quantum programs. Parallel execution of supporting physical instructions is also supported.
- Added `components.qprocessor.PhysicalInstruction`, a physical realization of an instruction with a duration and noise model.
- `simutil.sim_count_resets()` function counts how many times simulation engine has been reset. Can be used to detect a reset.

2018-10-20 Rob
--------------

- The `QuantumMemory` methods `peek()` and `pop()` only return a list of qubits, and no longer delta times.
- The `QuantumMemory` method `delta_time()` returns the times since the qubits on memory positions were last accessed.
- The `QuantumMemory` methods `peek()`, `pop()`, `operate()` and `measure()` receive a `skip_noise` parameter that bypasses application of a noise model since the last access time.

2018-10-19 Loek, Rob
--------------------

- Caching of operators now uses a least recently used (LRU) bounded cache (implemented in Cython). The default cache limit is 1e6.
- `QuantumNoiseModel` no longer accepts an _operator_ parameter, which was only used by the now deprecated `QController`.

2018-10-3 Rob
-------------

- `setup.py` does cythonization when building, which **now requires** developers to have Cython installed.
- Removed `.cpp` files generated by Cython from repository. `create_cpp_extensions.py` are no longer needed and have been removed from subpackages.

2018-9-25 Axel
--------------

- In `netsquid.qubits.qubitapi` it is now possible to set the parameter `cache_precision` to `-1` (new default) for the function `amplitude_dampen` such that no rounding will be done of the amplitude damping parameters. The same is true for the method `netsquid.components.qnoisemodel.T1T2NoiseModel._random_amplitude_dampen`.

2018-9-6 Rob
------------

**Note EasySquid users:** requires merge of branch _235-merge-quantummemorydevice-netsquid_ in EasySquid.

- The methods `put()` and `get()` for `Channel` (and its derivatives) are renamed to `send()` and `receive()`.
- `QuantumMemory` now supports multiple addressable memory positions, similar to EasySquid's `QuantumMemoryDevice` (which it deprecates). Each memory position can have its own noise model. It subclasses `Component` directly rather than `Channel`.
- `QuantumMemory` methods deprecating EasySquid methods include `create_qubits`/`create_qubits_at` (allocate_qubit_XXX), `peek` (get_qubit), `put` (add_qubit), `pop` (release_qubit), `operate` (apply_unitary), `measure` (measure_XXX).
- The `QuantumMemory` methods `peek()` and `pop()` always return a list of qubits and a list of delta times.

2018-8-30 Rob, Julio
--------------------

- Added diagnostic methods to _simutil_ module: `sim_count_events`, `sim_count_instances`, and `sim_count_handlers`.
- Update of cDynAA. Event iteration now much faster when many events on the timeline.

2018-8-26 Rob
-------------

- Optimized inner and outer operator padding functions by replacing `scipy.sparse.kron` with custom Cython implementation and wrapping `csr_matrix` to skip slow format checks. As a result dynamic operators that can't always use caching (e.g. amplitude damping) are now _many time faster_. Work is based on findings of Filip Kuklis (intern) and Damian Podareanu (SURFsara collaboration).


2018-8-10 Rob
-------------

**Note EasySquid users:** requires merge of branch _193-channel-get-interface_ in EasySquid.

- `Channel.get()` always returns retrieved items as a _list_ (no longer a _tuple_). If the channel output is empty, it will return an empty list (no longer `None`). The parameter `force_tuple` is deprecated. Similar for `Channel.peek()`.
- If `Channel.put()` receives a _tuple_ for the `items` parameter it regards the tuple as a single item, rather than a list of items.


2018-8-9 Rob
------------

**Patch: version 0.3.5**

- `ClassicalChannel` added with support for classical noise and loss models, and can encode items to bitstream during transmission.
- Support for classical codes added in `ccoding` module (based on `easysquid.classicalcoding`).
- Classical noise models added in `cnoisemodels` module (based on models in `easysquid.easynoise`).
- `CombinedChannel` added (based on `easysquid.GeneralComboChannel`) that allows messages with combined classical and quantum items (inherits from `ClassicalChannel` and `QuantumChannel`).
- Renaming of `QChannel` to `QuantumChannel`, `QMemory` to `QuantumMemory`, `QController` to `QuantumController`, with deprecation of old class names.
- `Channel` has a `peek()` method to inspect the transmit queue. Useful for unit testing.

2018-8-6 Rob
------------

- `Channel` has a method `postprocess_outputs()` that is called during `get()` and is meant to be overridden for applying noise (similar use of `preprocess_inputs()` by `put()` for loss).
- The implementation of `Channel`'s internal `_Message` class has changed. When calling `get()` without specifying a key for a message containing keys, the items are returned per key, in the order the keys were put. Previous behaviour was to return the items in the order they were put, independent of their keys.
- `Channel.put()` has a ``transmit_empty_items`` parameter (default False). If True, ``None`` items (e.g. lost qubits) will be transmitted and retrievable with a get.
- `Channel.preprocess_inputs()` has a `remove_empty` parameter (default True), which specifies whether empty (``None``) input items are to be removed.
- `LossModel` and `FibreLossModel` are generalized for both qubits and (classical) items, with methods renamed to reflect this e.g. to `prob_item_lost` and `compute_item_loss`. Old methods names are deprecated.

2018-8-2 Rob
------------

- `Channel` now has a `length` attribute (default 0).
- The `put()` method of `Channel` and `QChannel` now has the (optional) `append` parameter default to True.
- `Channel` has adopted the `register_handler` method for EasySquid compatibility. To dismiss a registered event handler the method `clear_handler` has been added too. _Connection may ultimately be a better place for this functionality, to keep to the physical component paradigm_.
- `QChannel` attributes `loss_model` and `noise_model` renamed to `quantum_loss_model` and `quantum_noise_model` in preparation for a new channel with classical analogues.
- The `models` module has been reorganized into `delaymodels`, `qnoisemodels`, `lossmodels`. `FibreLossModel` and `FibreDelayModel` have also been into these modules (from the `fibres` module).
- `EasyNoiseModel` is imported from EasySquid (with unit tests) as `components.qnoisemodels.T1T2NoiseModel`.
- `simutil.warn_deprecated(log_message, key=None, logger=None)` function warns about deprecated functionality. Setting a non-trivial unique `key` means the message will only be printed once.
- The `models` module is deprecated.

2018-7-30 Rob
-------------

New/changed functionality
- `dmutil.is_valid_dm()` is more tolerant of the precision to which a DM's trace must sum to one.
- `QState`'s default `stoch_operate_qubits` method more efficiently checks its `p_weights` parameter.

2018-7-24 Rob
-------------

New/changed functionality
- `Channel` now makes use of `Event.unschedule()`, which speeds up channel operations.
- Channel item(s) (qubit(s) etc.) can be retrieved when the current *time instant* matches their arrival time. Because events scheduled at the same time instant may occur in a random order, it is possible for items(s) to be retrieved before their ready event occurs.
- `qubits.cytutil` module has become the `netsquid.cytil` subpackage, which now contains the modules `cymath` and `cysim` (exclusively for Cython).

2018-7-19 Rob
-------------

New/changed functionality
- The new _qubits.dmutil_ module houses general density matrix functions (independent from dmtools.DMState).
- `reorder_dm()` and `partialtrace()` are moved from the _operators_ module to _dmutil_ .
- `dmutil.dm_fidelity(rhoA, rhoB, squared=False, dm_check=True)` function added that computes fidelity between two density matrices.
- `dmutil.is_valid_dm(rho)` function added that checks validity of a density matrix.
- All _dmutil_ module function are accessible from _qubits_ package too e.g. `qubits.is_valid_dm(rho)`.


2018-7-16 Rob
-------------

Changed functionality
- To improve the naming consistency, the boolean parameter `new_qstate` of the `qubitapi.measure()` function is **renamed** to `discard`, and has the opposite action i.e. no new qstate is created for the measured qubit (default is False). If True, the `keep_combined` parameter will be ignored.

2018-7-13 Rob
-------------

New/changed functionality
- A `discard(qubit)` function is added to the _qubitapi_. It drops a qubit from a shared quantum state, after which the qubit's qstate will be `None`. In the DM formalism the qubit is _traced out_, in the pure state formalism it's first measured (if sharing a quantum state).
- The `measure()` function has a new boolean parameter `new_qstate` (default True). If False, measured qubits won't be assigned a new single-qubit state, but will have their qstates set directly to `None`.
- The implementations of the functions `reorder_dm()` and `partialtrace()` (_operators_ module) have been improved.

2018-7-12 Julio
---------------

New/changed functionality
- `pydynaa.Event` now has the method `unschedule()` which will remove the event from the simulation timeline i.e. it will no longer be issued in the present/future.

2018-7-10 Rob
-------------

New/changed functionality
- The sphinx documentation code has been migrated from QNetSquid-docs repository to this repository, and can now be built locally using `make docs`.
- Building netsquid in-place from source now uses _setuptools_, and more functionality has been moved to `setup.py`. It is still best to call `make` to do a complete build.
- A binary wheel distribution file for QNetSquid can be built with `make bdist` (requires _python3-wheel_). This file can be installed with pip (see README).
- The tests suite can be called from within python as `import netsquid; netsquid.test()`

2018-6-28 Rob
-------------

New/changed functionality
- The _qubits_ subpackage and the _component_ and _channel_ modules have been ported to cython for speed. These libraries now need to be compiled as well, so **run ``make``** after pulling from master.
- The `Component` and `QState` abstract base classes no longer subclass ABC because they are now Cython extension types. Instead their methods that should be overridden (previously abstract methods), will now raise a `NotImplementedError` if not overridden.
- `qubitapi.amplitude_dampen()` now makes use of caching, and has a `cache_precision` parameter (see docs). Aside from caching (and cythonizing) it has also received some extra optimizations.

2018-6-21 Mathijs, Rob
----------------------

New/changed functionality
- The random state methods have been moved from _qubitapi_ to the _simutil_ module.

Deprecated functionality
- The old random state methods in _qubitapi_ have been deprecated: they will print a warning if used, and call their simutil versions.

2018-6-9 Rob
------------

New/changed functionality
- **IMPORTANT:** the default simulation time has changed from _seconds_ to _nanoseconds_ ([as requested by Stephanie](https://ci.tno.nl/gitlab/QuTech/NetSQUID/issues/72)). All channel models (Delay, Noise, Loss) have been adjusted accordingly. Make sure do the same with your own models, and other time sensitive code.
- The functions `sim_run()`, `sim_time()`, `sim_reset`, `sim_stop()`, and `sim_status()` have been added to the _simutil_ module and can be called directly from the netsquid package (e.g. `netsquid.sim_time()`). These functions wrap the pydynaa `SimulationEngine()` (= `DynAASim()`) singleton's methods, obviating the need to construct this singleton in simulations.
- With the function `sim_run(end_time=None, duration=None)` it's now possible to specify a time duration to run for instead of a final (absolute) time.

2018-5-30 Rob
-------------

New/changed functionality
- `exp_value(qubits, operator)` function added to _qubitapi_ module. It calculates the expectation value of an operators of the (reduced) state of the given qubits.

2018-5-29 Rob
-------------

New/changed functionality
- `reduced_dm(qubits)` function added to _qubitapi_ module (and to `QState` base class). It calculates the reduced density matrix of the quantum state shared by `qubits` by tracing out any extra qubits sharing the state.
- The `fidelity(qubits, reference_ket)` function of the _qubitapi_ module now calculates the fidelity using the reduced density matrix if the shared quantum state of the specified qubits is larger than the reference state.
- `partialtrace` method moved from _dmtools_ to _operators_ module. It can now trace out multiple `qubit_indices` from a given density matrix.
- Bug fix: `LossModel` now properly amplitude dampens a number state from `|1>` to `|0>` instead of the inverse.

2018-5-17
---------

**Release: version 0.3.0**

2018-5-10 Rob
-------------

New/changed functionality
- `Node` has a `wait_for_messages()` method that allows for a _local callback_ function to continuously wait for classical or quantum input from a specified remote node.
- `Node.wait_with_callback()` is renamed to `Node.wait_for_event()`.
- `Protocol.wait_with_nonlocal_callback()` is renamed to `Protocol.wait_for_event()`.
- Example and tutorial protocols have been updated to use the `wait_for_messages()` method, and so no longer use shared event types to transmit between nodes.

Deprecated functionality:
- `Node.wait_with_callback()` method is deprecated.
- `Protocol.wait_with_nonlocal_callback()` method is deprecated.

2018-5-1 Rob
------------

- Added the `tutorial/` directory containing exercises covering the _qubits_, _components_, _nodes_ and _protocols_ QNetSquid subpackages. The exercises build on each other with the end goal of setting up a repeater experiment using distillation. Each exercise also has a _test_ script for checking solutions and a solution file.

2018-4-23/24 Rob
-------------

New/changed functionality

- If no `ready_evtype` argument is specified to the `put` method of `Channel` (and its derivatives) a default static event type `Channel.evtype_outputready` is used.
- Integration tests are added for the protocols `RepeaterExpt` and `FilterExpt`. These use statistical sampling.
- `Channel.warn_on_discard` attribute now defaults to `False`.

#### Callback management in Node and Protocol

- `Node` has the following methods to manage _local_ callback functions: `add_callback`, `get_callback`, `wait_with_callback`, `dismiss_callbacks`, `remove_callbacks`. The point of this new functionality is to obviate the need for users to manage `EventHandler`s directly.
- Node callback functions have the argument interface `(node, namespace, event, **kwargs)` to encourage locality. It is also recommended to decorate protocol methods intended as local callbacks with `@classmethod` so that the protocol instance (i.e. `self`) is not available (as this would give access to other nodes).
- `Protocol` base class has the following methods to manage _non-local_ callbacks: `add_nonlocal_callback`, `get_nonlocal_callback`, `wait_with_nonlocal_callback`, `dismis_nonlocal_callbacks`.
- Protocol callback functions have a more general interface. By passing the protocol instance (via `self`) non-local operations on all nodes referenced by the protocol can be performed.
- All existing protocols have been updated with the above idioms.
- Node _B_ of `EntangleNodes` now behaves completely locally. A consequence of this refactoring is that the delay between entanglements is shorted.
- `Protocol` has a static method `check_assigned` that helps with checking that inputs are correctly connected.
- The `reset` method of `Node` now dismisses all local callbacks.
- The `stop` method of `Protocol` now dismisses all non-local callbacks of a protocol.
- Unit tests added for `Protocol` base class.

2018-4-10 Rob
-------------

New/changed functionality
- The `qubitapi.create_qubits` function now takes `system_name` as an _optional_ parameter. If not specified then a default (and incrementing) name is set. The order of input parameters has changed (reversed) to: `create_qubits(num_qubits, system_name=None)`.

2018-4-6 Rob
------------

**Recompilation required (see above)**

New/changed functionality
- Ownership of `EventHandler`s is now shared between Cython and C++, and cleaned up on module exit to prevent possible segmentation faults. It is now no longer needed to prevent an `EventHandler` from leaving scope, as was the case for some use cases (e.g. [ping pong example](https://ci.tno.nl/gitlab/QuTech/NetSQUID/wikis/Introduction-to-Discrete-Events-in-NetSQUID)).
- `pydynaa.EventExpression` can now be used directly as a truth value e.g. `if not event_expression: ...` is equivalent to `if not event_expression.value: ...`

2018-4-4 Rob
------------

**Recompilation required (see above)**

New/changed functionality
- Classes that subclass `Entity` are no longer required to call `super().__init__()` to avoid a segmentation fault. Examples are `Protocol`, `Component`, `Node`, and their subclasses such as `Channel`, etc.
- `pydynaa.EventExpression` now has some methods converted to property attributes: `value`, `type`, `first_term` (was `firstTerm`) and `second_term` (was `secondTerm`). It now also has more detailed docstrings.

2018-4-3 Roeland, Rob
---------------------

New/changed functionality
- `qubitapi.gmeasure` can now do general measurements on multiple qubits (via kettools and dmtools).

Removed functionality
- If `qubitapi.gmeasure` is given an incomplete set of measurement operators, it will no longer complete this set by computing an extra operator. Note that the function also doesn't check whether the basis is complete, that is left to the user.
- `qubitapi.gmeasure` no longer accepts a `projective` boolean parameter, as this was only needed in the case of an incomplete operator set.


2018-3-29 Rob
-------------

New/changed functionality

#### Nodes

- A `Node` class is added that represents a network location at which quantum and classical operations are local. Nodes are responsible for managing components, and provide an API with which to send/receive items or qubits, store qubits on quantum memories, as well as access any available components (see the documentation for further details).
- Nodes can hold local classical information, which can be accessed directly like a Python dictionary e.g. `nodeA["rawkey"] = "01010"`.
- The protocols `EntangleNodes`, `Filter`, `Repeater`, `RecFidelity` and the experiment protocols `FilterExpt` and `RepeaterExpt` have all been adapted to work with nodes rather than directly with components.
- The `nodes.nodeapi` module facilitates creating and linking nodes. It is used by filter and repeater experiment examples to build their quantum networks. The nodes of these networks are then _connected_ to the experimental protocol being simulated.
- In adapting protocols to work with nodes, protocol methods now attempt to execute on a single node as much as possible. *This local execution of instructions on a node is an active topic of development.*

#### LossModel and qubit number states

- `components.models.LossModel` callable base class now also takes the qubit that might be lost as a parameter.
- `LossModel.is_qubit_lost` abstract method renamed to `prob_qubit_lost`, and now only returns the probability the qubit is lost.
- The new method `LossModel.compute_qubit_lost` (called when object is called) uses the probability of loss to modify the qubit. Upon loss, in the standard case it measures the lost qubit in the standard basis and returns True to indicate the qubit can be discarded.
- The `Qubit` class now has a boolean attribute `is_number_state`, to indicate the qubit represents, for example, the presence or absence of a photon. Default is `False`.
- If a qubit is a number state, the `LossModel.compute_qubit_lost` method will apply amplitude damping according to the loss probability, but return `False`, so that the qubit is not actually *lost* (read: discarded) by the qchannel.


2018-2-25 Rob
-------------

New/changed functionality
- Multiple items can be put on a Channel (and it's derivatives) at once by giving a tuple of items, or calling put multiple time with the `append=True` parameter.
- Channel's `bandwidth` attribute determines the maximum items that can be put at one instant.
- If put is called multiple times in one instant with `append=False` (the default) then dependent on the delay model the second put arrives at least `pulse_interval` later than the first to ensure FIFO.
- When putting multiple items using `append=True` it is also possible to specify a `key` parameter. If _get_ is called with a non-trivial key, then only those items are retrieved.
- Channel has a `output_no_wait` attribute. If True, received items will be discarded if not retrieved on their arrival instant. If False the last received items can wait on output until retrieved (new arrivals will still replace old ones).
- If a `ready_evtype` is specified for a put then the items are only available after this event is scheduled. If _not_ specified the items can be retrieved at any event during their arrival instant.
- If _get_ is called on an empty Channel `None` is now returned.
- **Note**: new changes have _slowed down_ Channel operation slightly; this will be addressed in [optimizing Channel issue](https://ci.tno.nl/gitlab/QuTech/NetSQUID/issues/7).

Removed functionality
- As a _get_ now returns None on empty channel, the old behaviour of raising a `ChannelOutputError` is removed. As is this exception class.
- Channels `compute_loss` method is removed. Loss is now computed using `procces_inputs` method.

2018-2-15 Rob
-------------

New/changed functionality
- The repeater and filter experiments in `examples/` now have associated _job files_ to allow parallel execution on the SURFsara cartesius cluster, and script to generate parameter sets. See `examples/parallel_on_cluster_HOWTO.md`.
- The associated python scripts now accept command line parameters.

2018-2-7 Rob
------------

**Release: version 0.2.0**

Changed functionality
- `Operator.padded_matrix()` method returns (and caches) sparse matrices if the quantum state >= `operators.sparse_padding_threshold`. Hereby operations on large quantum states are considerably faster, and now also possible for much larger states than before.
- `operators.caching_sparse_threshold` module attribute is removed in favour of `operators.sparse_padding_threshold`.
- `KetState` is now more efficient in how it _drops_ qubits.

2018-1-28 Rob
-------------

Renamed functionality:
- In `qubits.qubitapi` the functions `measure_obs` and `measure_gen` have been renamed to `measure` and `gmeasure`.
- `measure` now has a default observable (`Z`) e.g.`measure(q1)` will measure q1 in the standard basis.
- The protocol `LogFidelity` has been renamed to `RecordFidelity`. This is done because _log_ (referring to a logbook) can be wrongly interpreted as logarithm.

Deprecated functionality:
- The functions `measure_obs` and `measure_gen` are deprecated: while they still work, their use will print a warning and refer to the new names. They will be removed at some point in the future.
- Similarly, `LogFidelity` protocol is deprecated.


2018-1-25 Rob
-------------

New features:
- A `QController` component (derivative of `QChannel`), which can perform quantum gates and measurements to qubit(s) (collectively *operations*) with delay and noise.
- `QController` uses the new `OperationDelayModel` to specify custom delays per gate/measurement it is capable of applying.

Changed functionality:
- Multiple qubits can be *put* onto a `QChannel` at once. The limit is specified by the new attribute `qubit_bandwidth` e.g. `QFibre` and `QMemory` only accept single qubits, while `QController` can accept multiple by default.
- `NoiseModel` now accepts an optional *operator* argument, which (if non-trivial) should be called in conjunction with the noise (as specified by the model).

2018-1-4 Rob
------------

New features:
- `Channel`, `QChannel`, and their derivatives (except for `QMemory`), can now handle multiple concurrent transmissions.
- A FIFO order is guaranteed for multiple transmissions (with the exception of loss), which means a non-conforming `DelayModel` will have it's generated delays lengthened if necessary.
- `Channel` has the new attribute `last_rx_time` and the new methods `compute_lost` and `cancel_transmissions`.
- The `RepeaterExpt` protocol now requires only one R->B classical channel, that it can share between its `Filter` and `Repeater` sub-protocols.
- An example `components.models.GaussianDelayModel` is added.

Removed/changed functionality
- `Channel`'s `is_empty` attribute is renamed to `output_empty`.
- `components.models.ExpDelayModel` is removed.
- `QStore` and `ExpChannel` are now removed (previously deprecated).

2018-1-2 Rob
------------

New features
- At and above a specified number of qubits (by `operators.caching_sparse_threshold`) an operator's *padding matrices* (as used by KetState and DMState) are now cached using sparse matrices to save memory.

2017-12-21 Kenneth, Rob
-----------------------

New features
- `qubitapi.dephase` noise function.
- `qubitapi.apply_dda_noise` function for combining depolarizing, dephasing and amplitude damping noise (in that order) on qubit(s).

2017-12-17 Rob
--------------

New features:
- The channel *components* have been refactored, see this [inheritance diagram](https://docs.netsquid.org/netsquid.components.html) for an overview.
- The new `qchannel.QChannel` component (child of `Channel`) is a general quantum channel that has qubit noise **and qubit loss** handled by the `models.NoiseModel` and `models.LossModel` *model interfaces*. An example of a `models.NoiseModel` is `models.DepolarNoiseModel`, which applies depolarizing noise.
- Children of `qchannel.QChannel` are `fibres.QFibre` and `qmemory.QMemory`. A `QGate`, for applying noisy and delayed quantum operations, is planned (see [Issue 30](https://ci.tno.nl/gitlab/QuTech/NetSQUID/issues/30)).
- `channel.Channel` delays are now handled by the `models.DelayModel` interface. The simplest example is `models.FixedDelayModel`, which always returns the same delay.
- The new `fibres` module defines both classical and quantum fibres: `fibres.CFibre` and `fibres.QFibre`. These components are specified by their *length* attribute, and have a default delay model `fibres.FibreDelayModel`, as well as a default loss model `fibres.FibreLossModel` for the quantum channel -- an exponential loss with distance. The default noise model is `models.DepolarNoiseModel`.

Removed/changed functionality:
- `QStore` is renamed to `QMemory`. Component attributes of all protocols have been renamed e.g. `qstore_A` to `qmemory_A`.
- Protocols that previously required `QFibre` now require `QChannel` for generality (they still accept `QFibre` of course). Component attributes have been renamed e.g. `qfibre_AB` to `qchannel_AB`.
- `Channel` and its derivatives no longer have a `schedule_transmission` method. The new `compute_delay` can be overridden to similar effect.
- `Channel` and its derivatives no longer have a `delay` attribute. Such characteristics are now managed by the `delay_model` attribute. You can sample a delay using the `compute_delay` method.
- The filter and repeater *examples* now use `CFibre` instead of `ExpChannel`, and define their network topography in terms of *node distance* rather than *channel delay*.

Deprecated functionality:
- `QStore` and `ExpChannel` are now deprecated: using them will print a warning. Replace their usage with `QMemory` and `Channel` + `ExpDelayModel`, respectively.

2017-12-15 Rob
--------------

New features:
- `qubits.qubitapi.stochastic_operate` and `qubits.qubitapi.multi_operate` functions added to qubits API.
- `qubits.qubitapi.apply_pauli_noise` added to qubits API, adopting the `p_weights` functionality from `qubits.qubitapi.depolarize` (but now for (`I`, `X`, `Y`, `Z`)).

Removed functionality:
- `qubits.qubitapi.depolarize` and `qubits.qubitapi.delay_depolarize` no longer take a `p_weights` parameter; they only do pure depolarization.
- `QFibre` and `QStore` components no longer take a `p_weights` parameter; they only do pure depolarization. Note that the noise models of these components will change soon (see Issue 26).

2017-12-08 Rob
--------------

New features:
- Generalized amplitude damping (via `qubits.qubitapi.amplitude_dampen`) is now also possible in the KetState formalism (uses an ancilla qubit).
- `qubits` package now uses its own `numpy.random.RandomState`, the seed for which can be set with `qubits.qubitapi.set_random_state` function. When calling `QState` _random_ methods a custom `RandomState` can be specified, including a mock up for unit testing.

Renamed functionality:
- `StabilizerState` renamed to `StabState`.

2017-12-04 Rob
--------------

New features:
- All formalisms (KetState, DMState, StabilizerState) can now do arbitrary size (n-qubit) quantum operations (within memory/computational constraints of course).

2017-12-02 Rob
--------------

New features:
- `qubits.operators.create_rotation_op` function to help construct rotation operators.
- `qubits.operators.create_controlled_op` function to help construct controlled gates.
- Overloaded `Operator`'s `^` _python operator_ to do tensor product e.g. `X ^ Z`.
- Overloaded `Operator`'s `|` _python operator_ to allow acting directly on qubit(s) e.g. `H | q1` and `CNOT | [q1, q2]` -- note that this **does not** replace `qubits.qubitapi.operate`, which does the same thing.
- Overloaded `Operator`'s `>>` _python operator_ to allows directly measuring a qubit with a Hermitian operator e.g. `Z >> q1` -- note that this **does not** replace `qubits.qubitapi.measure_obs`, which does the same thing (and with more options).

Removed functionality:
- `qubits.operators.rotation_operator_mat` function.
- Operators `K1, K2, Bx, By, Bz` from `qubits.operators` module.

2017-10-19 Rob
--------------

**Release: version 0.1.0**
