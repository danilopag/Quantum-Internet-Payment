# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# File: testint_teleportation.py
# 
# This file is part of the NetSquid package (https://netsquid.org).
# It is subject to the NetSquid Software End User License Conditions.
# A copy of these conditions can be found in the LICENSE.md file of this package.
# 
# NetSquid Authors
# ================
# 
# NetSquid is being developed within [Quantum Internet division](https://qutech.nl/research-engineering/quantum-internet/) at QuTech.
# QuTech is a collaboration between TNO and the TUDelft.
# 
# Active authors (alphabetical):
# 
# - Tim Coopmans (scientific contributor)
# - Chris Elenbaas (software developer)
# - David Elkouss (scientific supervisor)
# - Rob Knegjens (tech lead, software architect)
# - IÃ±aki Martin Soroa (software developer)
# - Julio de Oliveira Filho (software architect)
# - Ariana Torres Knoop (HPC contributor)
# - Stephanie Wehner (scientific supervisor)
# 
# Past authors (alphabetical):
# 
# - Axel Dahlberg (scientific contributor)
# - Damian Podareanu (HPC contributor)
# - Walter de Jong (HPC contributor)
# - Loek Nijsten (software developer)
# - Martijn Papendrecht (software developer)
# - Filip Rozpedek (scientific contributor)
# - Matt Skrzypczyk (software contributor)
# - Leon Wubben (software developer)
# 
# The simulation engine of NetSquid depends on the pyDynAA package,
# which is developed at TNO by Julio de Oliveira Filho, Rob Knegjens, Coen van Leeuwen, and Joost Adriaanse.
# 
# Ariana Torres Knoop, Walter de Jong and Damian Podareanu from SURFsara have contributed towards the optimization and parallelization of NetSquid.
# 
# Hana Jirovska and Chris Elenbaas have built Python packages for MacOS.
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This file uses NumPy style docstrings: https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt

"""Integration tests for the teleportation module.

"""
import unittest
from netsquid.examples.teleportation import run_experiment
from netsquid.qubits.qformalism import QFormalism
import netsquid as ns


class TestTeleportation(unittest.TestCase):

    def setUp(self):
        ns.sim_reset()
        ns.set_qstate_formalism(QFormalism.DM)

    def test_no_noise(self):
        data = run_experiment(num_runs=10, depolar_rates=[0], distance=4e-3, dephase_rate=0)
        self.assertEqual(len(data), 10)
        for fidelity in data['fidelity']:
            self.assertAlmostEqual(fidelity, 1)

    def test_lots_of_noise(self):
        data = run_experiment(num_runs=10, depolar_rates=[1e10, 10e10, 100e10, 1000e10],
                              distance=4e-3, dephase_rate=0)
        self.assertEqual(len(data), 40)
        for fidelity in data.groupby('depolar_rate')['fidelity'].mean():
            self.assertAlmostEqual(fidelity, 0.5)


if __name__ == "__main__":
    unittest.main()
