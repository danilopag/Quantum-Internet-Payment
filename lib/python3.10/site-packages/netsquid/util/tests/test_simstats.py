# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# File: test_simstats.py
# 
# This file is part of the NetSquid package (https://netsquid.org).
# It is subject to the NetSquid Software End User License Conditions.
# A copy of these conditions can be found in the LICENSE.md file of this package.
# 
# NetSquid Authors
# ================
# 
# NetSquid is being developed within [Quantum Internet division](https://qutech.nl/research-engineering/quantum-internet/) at QuTech.
# QuTech is a collaboration between TNO and the TUDelft.
# 
# Active authors (alphabetical):
# 
# - Tim Coopmans (scientific contributor)
# - Chris Elenbaas (software developer)
# - David Elkouss (scientific supervisor)
# - Rob Knegjens (tech lead, software architect)
# - IÃ±aki Martin Soroa (software developer)
# - Julio de Oliveira Filho (software architect)
# - Ariana Torres Knoop (HPC contributor)
# - Stephanie Wehner (scientific supervisor)
# 
# Past authors (alphabetical):
# 
# - Axel Dahlberg (scientific contributor)
# - Damian Podareanu (HPC contributor)
# - Walter de Jong (HPC contributor)
# - Loek Nijsten (software developer)
# - Martijn Papendrecht (software developer)
# - Filip Rozpedek (scientific contributor)
# - Matt Skrzypczyk (software contributor)
# - Leon Wubben (software developer)
# 
# The simulation engine of NetSquid depends on the pyDynAA package,
# which is developed at TNO by Julio de Oliveira Filho, Rob Knegjens, Coen van Leeuwen, and Joost Adriaanse.
# 
# Ariana Torres Knoop, Walter de Jong and Damian Podareanu from SURFsara have contributed towards the optimization and parallelization of NetSquid.
# 
# Hana Jirovska and Chris Elenbaas have built Python packages for MacOS.
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This file uses NumPy style docstrings: https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt

"""Unit tests for the simstats module.

"""
import unittest
from netsquid.qubits import operators as ops
from netsquid.qubits import qubitapi as qapi
from netsquid.util.simstats import SimStats


class TestSimStats(unittest.TestCase):
    """Unit tests for the simstats module.

    """

    def test_qops_collection(self):
        """Test quantum ops collection."""
        q1, q2, q3 = qapi.create_qubits(3)
        stats = SimStats()
        qapi.operate([q1], ops.X)
        self.assertEqual(stats.data["quantum_ops_total"], 1)
        stats.start()
        self.assertEqual(stats.data["quantum_ops_total"], 0)
        q1, q2, q3 = qapi.create_qubits(3)
        qapi.operate([q1], ops.X)
        qapi.operate([q1, q2], ops.CNOT)
        qapi.operate([q2], ops.X)  # qstate now size 2
        self.assertEqual(stats.data["quantum_ops_total"], 3)
        self.assertEqual(stats.data["quantum_ops_freq"], [(ops.X.name, 2), (ops.CNOT.name, 1)])
        self.assertEqual(stats.data["qstate_max_size"], 2)
        self.assertAlmostEqual(stats.data["qstate_avg_size"], 5/3)
        # Continue collecting stats
        qapi.operate([q1, q2, q3], ops.TOFFOLI)
        self.assertEqual(stats.data["quantum_ops_total"], 4)
        self.assertEqual(stats.data["qstate_max_size"], 3)
        self.assertAlmostEqual(stats.data["qstate_avg_size"], 2)
        # End collection
        self.assertFalse(stats.ended)
        stats.end()
        self.assertTrue(stats.ended)
        qapi.operate([q1], ops.Y)
        qapi.operate([q3], ops.Z)
        self.assertEqual(stats.data["quantum_ops_total"], 4)

    def test_record_statistics(self):
        """Test record statistics context manager."""
        q1, q2, q3 = qapi.create_qubits(3)
        stats = SimStats()
        qapi.operate([q1], ops.Y)
        self.assertEqual(stats.data["quantum_ops_total"], 1)
        with stats.record():
            qapi.operate([q1], ops.X)
            qapi.operate([q1, q2], ops.CNOT)
            qapi.operate([q2], ops.X)  # qstate now size 2
        self.assertTrue(stats.ended)
        self.assertEqual(stats.data["quantum_ops_total"], 3)
        self.assertEqual(stats.data["quantum_ops_freq"], [(ops.X.name, 2), (ops.CNOT.name, 1)])
        qapi.operate([q1], ops.Y)
        qapi.operate([q3], ops.Z)
        self.assertEqual(stats.data["quantum_ops_total"], 3)
        # Test string representation gives summary
        self.assertEqual(str(stats), stats.summary())
