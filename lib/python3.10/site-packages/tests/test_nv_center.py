import netsquid as ns
from netsquid.components import QuantumProgram, INSTR_MEASURE, INSTR_INIT, INSTR_Z
from netsquid_nv.nv_center import NVQuantumProcessor
from netsquid_nv.delft_nvs.delft_nv_2020_near_term import NVParameterSet2020NearTerm


def test_noiseless_nv_center():
    nv_center = NVQuantumProcessor(num_positions=2, noiseless=True)
    nv_parameter_set = NVParameterSet2020NearTerm()
    perfect_parameters = nv_parameter_set.to_perfect_dict()

    for key, value in perfect_parameters.items():
        assert nv_center.properties[key] == value


def test_number_of_positions():
    num_positions = 5
    nv_center = NVQuantumProcessor(num_positions=num_positions)
    assert nv_center.num_positions == num_positions + 1  # we expect one more because of the emission position
    assert nv_center.electron_position == 0
    assert len(nv_center.carbon_positions) == num_positions - 1


def test_default_nv_center():
    nv_center = NVQuantumProcessor(num_positions=2)
    nv_parameter_set = NVParameterSet2020NearTerm()
    default_parameters = nv_parameter_set.to_dict()

    for key, value in default_parameters.items():
        assert nv_center.properties[key] == value


def test_property_overwrites_noiseless():
    electron_T2 = 100
    nv_center = NVQuantumProcessor(num_positions=2, noiseless=True, electron_T2=electron_T2)
    nv_parameter_set = NVParameterSet2020NearTerm()
    perfect_parameters = nv_parameter_set.to_perfect_dict()

    for key, value in perfect_parameters.items():
        if key == "electron_T2":
            assert nv_center.properties[key] == electron_T2
        else:
            assert nv_center.properties[key] == value


def test_property_overwrites_default():
    electron_T2 = 100
    nv_center = NVQuantumProcessor(num_positions=2, electron_T2=electron_T2)
    nv_parameter_set = NVParameterSet2020NearTerm()
    default_parameters = nv_parameter_set.to_dict()

    for key, value in default_parameters.items():
        if key == "electron_T2":
            assert nv_center.properties[key] == electron_T2
        else:
            assert nv_center.properties[key] == value


class InitializeAndMeasureProgram(QuantumProgram):

    def program(self, init_state):
        q = self.get_qubit_indices(1)
        self.apply(instruction=INSTR_INIT, qubit_indices=q)
        if init_state:
            self.apply(instruction=INSTR_Z, qubit_indices=q)
        self.apply(instruction=INSTR_MEASURE, qubit_indices=q, output_key="outcome")

        yield self.run()


def _initialize_and_measure(nv_center, init_state=0):
    qprogram = InitializeAndMeasureProgram()
    nv_center.execute_program(qprogram, init_state=init_state)
    ns.sim_run()

    return qprogram.output["outcome"][0]


def test_faulty_measurement():
    prob_error_0 = 1.
    prob_error_1 = 0.

    nv_center = NVQuantumProcessor(num_positions=1, noiseless=True,
                                   prob_error_0=prob_error_0, prob_error_1=prob_error_1)

    for init_state in [0, 1]:
        # 0 measurement is always wrong, 1 is always right, so we always expect 1
        assert _initialize_and_measure(nv_center, init_state) == 1
