import unittest
import numpy as np
from netsquid_nv.nv_state_delivery_model import \
    prob_nuclear_dephasing_during_entgen_attempt
from netsquid_nv.nv_parameter_set import (
    compute_product_tau_decay_delta_w_from_dephasing_prob,
    compute_dephasing_prob_from_nodephasing_number,
    compute_nodephasing_number_from_dephasing_probability)


class TestNVParameterSetFunctions(unittest.TestCase):

    def test_conversion_dephasing_prob_and_product_tau_decay_delta_w(self):
        """Tests that the two functions

        1. :fn:`~netsquid_nv.nv_state_delivery_model.prob_nuclear_dephasing_during_entgen_attempt`
        2. :fn:`~netsquid_nv.nv_parameter_set.compute_product_tau_decay_delta_w_from_dephasing_prob`

        are each other's inverse.
        """
        for alpha in np.arange(0.01, 1.0, 0.1):

            # test 1 -> 2
            for product_tau_decay_delta_w in np.arange(0.1, 5, 0.1):
                prob_deph = \
                    prob_nuclear_dephasing_during_entgen_attempt(
                        alpha=alpha,
                        delta_w=1,
                        tau_decay=product_tau_decay_delta_w)
                computed_product = compute_product_tau_decay_delta_w_from_dephasing_prob(
                    prob_deph=prob_deph,
                    alpha=alpha)
                self.assertTrue(np.isclose(product_tau_decay_delta_w, computed_product))

            # test 2 -> 1
            maximally_possible_prob_deph = (1 - alpha) / 2
            for prob_deph in np.arange(0.05, maximally_possible_prob_deph, 0.05):
                product = compute_product_tau_decay_delta_w_from_dephasing_prob(
                    prob_deph=prob_deph,
                    alpha=alpha)
                computed_prob_deph = \
                    prob_nuclear_dephasing_during_entgen_attempt(
                        alpha=alpha,
                        delta_w=1,
                        tau_decay=product)
                self.assertTrue(np.isclose(prob_deph, computed_prob_deph))

    def test_conversion_dephasing_prob_and_nodephasing_number(self):
        """Tests that the two functions

        1. :fn:`~netsquid_nv.nv_parameter_set.compute_dephasing_prob_from_nodephasing_number`
        2. :fn:`~netsquid_nv.nv_parameter_set.compute_nodephasing_number_from_dephasing_prob`

        are each other's inverse.
        """

        # test 1 -> 2
        for nodephasing_number in np.arange(0.5, 50, 0.50):

            prob_deph = compute_dephasing_prob_from_nodephasing_number(nodephasing_number)
            computed_nodephasing_number = \
                compute_nodephasing_number_from_dephasing_probability(prob_deph)
            self.assertTrue(np.isclose(nodephasing_number, computed_nodephasing_number))

        # test 2 -> 1
        for prob_deph in np.arange(0.05, 0.5, 0.05):

            nodephasing_number = \
                compute_nodephasing_number_from_dephasing_probability(prob_deph)
            computed_prob_deph = compute_dephasing_prob_from_nodephasing_number(nodephasing_number)
            self.assertTrue(np.isclose(prob_deph, computed_prob_deph))


if __name__ == "__main__":
    unittest.main()
