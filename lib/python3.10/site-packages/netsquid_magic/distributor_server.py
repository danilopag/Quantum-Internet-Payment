from netsquid.components.component import Component
from netsquid.nodes.node import Node

from netsquid.nodes.connections import Connection
from netsquid_magic.magic_distributor import MagicDistributor

# Used to keep track of what Component have gotten which MagicDistributor
_distributors_supplied = {}


def get_magic_distributor(nodes, component, magic_distributor_class=None, **kwargs):
    """
    Returns a distributor given a component and a delivery sampler class.
    Calling this function again with the same component returns the same distributor.

    Args:
        nodes: (list of :obj:`netsquid.nodes.node.Node`): A list of nodes holding this component
        component: (:obj:`netsquid.components.component.Component`): The Component over which the distributor should distibute over.
        magic_distributor_class: (:class:`~.magic_distributor.MagicDistributor` or None): The default value implies that an object of
            type :class:`~.magic_distributor.MagicDistributor` is returned.
        **kwargs: Example: provide the delivery sampler factory which the distributor should use.
            Must be subclass of :class:`~.state_delivery_sampler.IStateDeliverSamplerFactory`.
    """
    if not (isinstance(component, Component) or isinstance(component, Connection)):
        raise TypeError("component is not an instance of Component or a subclass thereof, but is of type {}"
                        .format(type(component)))

    if not all([isinstance(node, Node) for node in nodes]):
        raise TypeError("All nodes in the list are not instances of Node or a subclass thereof")

    component_id = id(component)
    if component_id in _distributors_supplied:
        distributor = _distributors_supplied[component_id]
        return distributor
    else:
        if magic_distributor_class is None:
            magic_distributor_class = MagicDistributor
        else:
            if not issubclass(magic_distributor_class, MagicDistributor):
                raise TypeError("Class {} is not of type MagicDistributor".format(magic_distributor_class))
        distributor = magic_distributor_class(nodes=nodes,
                                              component=component,
                                              **kwargs)
        _distributors_supplied[component_id] = distributor
        return distributor
