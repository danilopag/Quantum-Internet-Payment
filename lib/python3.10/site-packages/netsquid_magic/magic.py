################################################################################################################
#                                                                                                              #
# A magic protocol should be used together with a service interface (netsquid_magic.services.ServiceInterface) #
# When a service is set to be "magic" it will instead of calling the normal protocols `put`-method,            #
# instead call the magic protocols `put_from`-method with the node ID of the node issuing the request.         #
# The magic protocol is similar to a normal protocol, except that it contains many nodes and is therefore      #
# non-local and "magical".                                                                                     #
#                                                                                                              #
################################################################################################################

import abc

from netsquid.protocols.protocol import Protocol


class MagicProtocol(Protocol, metaclass=abc.ABCMeta):
    def __init__(self, nodes):
        """
        A non-local magic protocol holding more than one node.

        :param nodes: list of :obj:`netsquid.nodes.node.Node`
            The nodes part of this magic protocol
        """
        super().__init__()
        self._nodes = nodes
        self._service_interfaces = {}

    @property
    def nodes(self):
        """
        Returns the list of nodes part of this magic protocol

        :return: :obj:`netsquid.nodes.node.Node`
        """
        return self._nodes

    @property
    def service_interfaces(self):
        """
        Returns the service interface using this magic protocol.
        If this magic protocol has not been given as input to a service interface yet, None is returned.

        :return: :obj:`netsquid_magic.services.ServiceInterface`
        """
        return getattr(self, "_service_interfaces", None)

    @abc.abstractmethod
    def put_from(self, node_id, request):
        """
        Should be overridden to define the behavior of this magic protocol

        :param node_id: int
        :param request: any
            Will be of one of the types in the property request_types of the corresponding service interface
        """
        pass

    def react_to(self, node_id, msg):
        """
        Used by internally by the magic protocol to communicate back to the user of the protocol.
        Should not be subclassed.

        :param node_id: int
        :param msg: any
            Will be of one of the types in the property reaction_types of the corresponding service interface
        """
        service_interfaces = self.service_interfaces
        if not isinstance(service_interfaces, dict):
            raise RuntimeError("This magic protocol does not have any service interfaces."
                               "To make use of a magic protocol you need to add it to a service interface,"
                               "using :obj:`netsquid_magic.services.ServiceInterface.add_magic_protocol`")
        service_interface = service_interfaces.get(node_id, None)
        if service_interface is None:
            raise RuntimeError("There is no service interface for node with id {}".format(node_id))

        service_interface.react(msg)

    def start(self):
        """
        Starts the magic protocol
        Not meant to be subclassed, subclass instead _custom_start
        """
        self._custom_start()
        super().start()

    def stop(self):
        """
        Stops the magic protocol
        Not meant to be subclassed, subclass instead _custom_stop
        """
        self._custom_stop()
        super().stop()

    def is_connected(self):
        """
        Needed to subclass from Protocol
        """
        # TODO should we check if the service interfaces are set here?
        return True

    def _custom_start(self):
        """
        Meant to be overridden if the protocol needs to do something when starting
        """
        pass

    def _custom_stop(self):
        """
        Meant to be overridden if the protocol needs to do something when stopping
        """
        pass
