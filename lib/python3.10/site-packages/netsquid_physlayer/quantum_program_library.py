################################################################################################################
# This library consists of functions that takes QuantumPrograms as inputs and applies gates to achieve a certain
# operation or circuit.
#
################################################################################################################

from netsquid.components.instructions import INSTR_CNOT

__all__ = [
    'move_using_CNOTs',
]


def move_using_CNOTs(q_program, control=0, target=1):
    r"""
    This schedules the correct operations in the provided QuantumProgram, using CNOTs
    to perform an effective 'move' operation. Assuming that the target qubit is in the \|0> state
    and the control qubit is in the state \|psi>, after the operation the state of the target
    will be \|psi> and the control will be \|0>.
    NOTE, will not perform an initialization of the target qubit before.

    Parameters
    ----------
    q_program : :class:`netsquid.components.qprogram.QuantumProgram`
    control : int
        The qubit ID of the control qubit in the program
    target : int
        The qubit ID of the target qubit in the program
    """
    # Do effective move operation
    q_program.apply(INSTR_CNOT, [control, target])
    q_program.apply(INSTR_CNOT, [target, control])
